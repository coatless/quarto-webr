[
  {
    "objectID": "webr-readme-example.html",
    "href": "webr-readme-example.html",
    "title": "webR in Quarto HTML Documents",
    "section": "",
    "text": "This is a webr-enabled code cell in a Quarto HTML document.\nLoading\n  webR...",
    "crumbs": [
      "Demos",
      "README Example"
    ]
  },
  {
    "objectID": "webr-communication-channels.html",
    "href": "webr-communication-channels.html",
    "title": "Communication Channels",
    "section": "",
    "text": "As you dive deeper into using webR, it’s crucial to grasp how webR manages communication between R and your web browser. Think of it as a conversation between two active workers or “threads”:\nNow, here’s why this separation is so important: webR’s special version of R can tackle complicated and time-consuming calculations without causing your web browser to freeze or become unresponsive when you’re on a web page that uses webR.\nImagine trying to watch a video online while your computer is running a heavy software update. Without separating them, your video might start buffering, freeze, or even crash. But by putting the update in the background (on a separate worker, like webR), your video can continue to play smoothly. It’s the same concept with webR and your web browser – keeping things running smoothly without hiccups.\nFor more details, please see the official webR documentation on Worker Communication and Serving Web Pages with webR.",
    "crumbs": [
      "Deployment",
      "Communication Channels"
    ]
  },
  {
    "objectID": "webr-communication-channels.html#specifying-how-webr-communicates",
    "href": "webr-communication-channels.html#specifying-how-webr-communicates",
    "title": "Communication Channels",
    "section": "Specifying How webR Communicates",
    "text": "Specifying How webR Communicates\nIn a Quarto document’s YAML header, you can tell webR which communication channel to use by setting the channel-type option. It’s like telling webR how you want it to talk with your web browser. For example, if you want to use the \"post-message\" channel, you can do it like this:\n---\ntitle: \"Setting Up webR to use the PostMessage Channel\"\nformat: html\nwebr:\n  channel-type: \"post-message\"\nfilters:\n- webr\n---",
    "crumbs": [
      "Deployment",
      "Communication Channels"
    ]
  },
  {
    "objectID": "webr-communication-channels.html#sec-automatic",
    "href": "webr-communication-channels.html#sec-automatic",
    "title": "Communication Channels",
    "section": "Using “automatic” for Communication (Default)",
    "text": "Using “automatic” for Communication (Default)\nBy default, the quarto-webr extension guides webR to use the \"automatic\" option for channel-type, if you don’t specify the channel-type in your document’s YAML header. Let’s break down how this default setting works:\n\nCommunication Attempts: webR will try two different communication channels in order:\n\nFirst, it attempts to establish a communication channel using \"shared-array-buffer\".\nIf that doesn’t work, it will then try to use \"service-worker\".\n\nFallback Behavior: If both of these attempts are unsuccessful, webR code cells in your document will be shown in a deactivated state. This means they won’t run or execute any R code.\n\n\n\n\n\n\n\nNote\n\n\n\nIt’s important to note that the \"automatic\" option doesn’t try to use the \"post-message\" option for communication.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nOne thing to be aware of is that when the \"automatic\" option is used, it adds two additional files, webr-serviceworker.js and webr-worker.js, into the output directory. These files must be present alongside the rendered HTML document if you intend to use the \"service-worker\" option. For more details on this, please refer to the Section 2.3 section of the documentation.\n\n\nIn summary, when you leave the channel-type unspecified, webR will follow the \"automatic\" option, attempting to use \"shared-array-buffer\" and then \"service-worker\". If both attempts fail, your webR code cells will be inactive.",
    "crumbs": [
      "Deployment",
      "Communication Channels"
    ]
  },
  {
    "objectID": "webr-communication-channels.html#sec-shared-array-buffer",
    "href": "webr-communication-channels.html#sec-shared-array-buffer",
    "title": "Communication Channels",
    "section": "Using “shared-array-buffer” for Communication",
    "text": "Using “shared-array-buffer” for Communication\nNow, let’s explore the \"shared-array-buffer\" option for communication. When you specify channel-type as \"shared-array-buffer\", webR aims to use something called SharedArrayBuffer. This choice, however, comes with some specific requirements and benefits:\nRequirements:\n\nYour web server needs to send web pages with webR using specific HTTP headers. This is to ensure that the page is cross-origin isolated. In simple terms, your server must be set up to allow this kind of communication otherwise webR will not work.\n\nBenefits:\n\nThe benefit of using this approach is that webR runs notably faster. It’s like giving webR a high-speed lane for its operations.\n\n\n\n\n\n\n\nNote\n\n\n\nIt’s important to note that the \"shared-array-buffer\" option isn’t currently available on platforms like GitHub Pages or Quarto Pub. If you’re using these services, we recommend using the channel-type: \"post-message\" option instead. There’s a possibility that GitHub Pages may offer the option to set the necessary headers in the future, as discussed here.\n\n\nTo help you set up the necessary headers for cross-origin isolation, we provide some guidance for both Netlify and nginx web server administrators:\nFor Netlify Configuration:\nIf you’re hosting your website with Netlify, you can add the following code to your netlify.toml configuration file:\n[[headers]]\n  for = \"/directory/with/webr/content/*\"\n\n  [headers.values]\n    Cross-Origin-Opener-Policy = \"same-origin\"\n    Cross-Origin-Embedder-Policy = \"require-corp\"\nFor nginx Web Server Administrators:\nIf you’re managing a server with nginx, you can use the add_header directive in your server’s configuration file, which is usually found at /etc/nginx/nginx.conf. Here’s an example:\nserver {\n  # Enable headers for the webr directory\n  location ^~ /directory/with/webr/content {\n    add_header \"Cross-Origin-Opener-Policy\" \"same-origin\";\n    add_header \"Cross-Origin-Embedder-Policy\" \"require-corp\";\n  }\n}\nBy following these instructions, you’ll ensure that your web server is set up to display web pages with a cross-origin isolated status, allowing you to use the \"shared-array-buffer\" option effectively.",
    "crumbs": [
      "Deployment",
      "Communication Channels"
    ]
  },
  {
    "objectID": "webr-communication-channels.html#sec-service-worker",
    "href": "webr-communication-channels.html#sec-service-worker",
    "title": "Communication Channels",
    "section": "Using “service-worker” for Communication",
    "text": "Using “service-worker” for Communication\nHere, we’ll dive into the \"service-worker\" option for communication.\n\n\n\n\n\n\nWarning\n\n\n\nThe \"service-worker\" option doesn’t work with Quarto Pub. If you’re hosting documents with Quarto Pub, please use the channel-type: \"post-message\" option instead. There’s an ongoing effort to address the service worker upload issue with the Quarto team, which you can track here.\n\n\nWhen you set channel-type to \"service-worker\", webR changes its communication channel to use the Service Worker API. This means you need two worker scripts, webr-worker.js and webr-serviceworker.js, hosted on the same website as the page using webR.\nHere’s what you need to ensure:\n1. Worker Scripts: The quarto-webr extension will automatically create and register these workers when your Quarto document is rendered.\n2. Directory Structure: Your initial directory structure should include these files:\n.\n├── _extensions/coatless/quarto-webr\n└── demo-quarto-webr.qmd\nAfter rendering the Quarto document with the \"service-worker\" option, your directory will look like this:\n.\n├── _extensions/coatless/quarto-webr\n├── demo-quarto-webr.qmd\n├── demo-quarto-webr.html  # Rendered document\n├── webr-serviceworker.js  # Service workers\n└── webr-worker.js\n3. Hosting: When hosting your rendered document, you need to make sure the rendered HTML document and the service worker files (webr-serviceworker.js and webr-worker.js) are present on the server. This is important for everything to work correctly:\n.\n├── demo-quarto-webr.html  # Rendered document\n├── webr-serviceworker.js  # Service workers\n└── webr-worker.js\nIf you want to change where the service workers are located, you can set the service-worker-url option in the document YAML. By default, the rendered document will search for the service workers in its current directory.\nIn a nutshell, the “service-worker” option is a powerful choice for communication with webR, but you need to ensure the correct setup and hosting to make it work smoothly.",
    "crumbs": [
      "Deployment",
      "Communication Channels"
    ]
  },
  {
    "objectID": "webr-communication-channels.html#sec-post-message",
    "href": "webr-communication-channels.html#sec-post-message",
    "title": "Communication Channels",
    "section": "Using “post-message” for Communication",
    "text": "Using “post-message” for Communication\nNow, let’s delve into the \"post-message\" option. This sets up a communication channel using something called Post Message. It’s a good choice when you can’t use cross-isolation or service workers. This option is simpler to set up and works in more places, like RStudio’s preview pane or the built-in browser in VSCode.\nHowever, there are some trade-offs. While it’s easier to get started, certain R features that need to pause and wait for input (like readline(), menu(), browser(), etc.) won’t work as expected. Instead, they’ll return empty values like \"\" or c('', ''). Also, you won’t have the option to stop or interrupt long-running R code. In those cases, you’ll need to refresh the page to regain control.\nFeel free to experiment with the \"post-message\" interface in this webR code cell:\nLoading\n  webR...",
    "crumbs": [
      "Deployment",
      "Communication Channels"
    ]
  },
  {
    "objectID": "webr-developer-resources.html",
    "href": "webr-developer-resources.html",
    "title": "Developer Resources",
    "section": "",
    "text": "Are you eager to contribute to the development of the quarto-webr extension or explore ways to modify it to suit your needs? This resource page is your guide to invaluable tools and references that will empower you on your development journey.",
    "crumbs": [
      "Extra",
      "Developer Resources"
    ]
  },
  {
    "objectID": "webr-developer-resources.html#mastering-webr",
    "href": "webr-developer-resources.html#mastering-webr",
    "title": "Developer Resources",
    "section": "Mastering webR",
    "text": "Mastering webR\nBefore diving into extension development, it’s essential to understand the core of what powers the quarto-webr extension: webR. These webR resources will be your trusty companions:\n\nwebR Documentation: This comprehensive documentation is your gateway to a deep understanding of webR. It provides profound insights into webR’s features, usage, and capabilities. Dive into practical examples, comprehensive guides, and everything you need to become a webR expert.\nwebR Source Code: For the technically curious, webR’s GitHub source code repository offers transparency into the development of webR. Here, you can review, contribute, and engage with the vibrant webR community to enhance its capabilities.\nBob Rudis’ Experiments with webR: Many different projects that explore a variety of use cases for webR. These experiments make use of the underlying webR JavaScript API.\n\nThese resources empower you to master webR, whether you’re just starting out or you’re a seasoned developer eager to contribute. Remember, webR is a versatile tool that can be used independently or alongside the Quarto extension to unlock the magic of interactive code cells in HTML documents.",
    "crumbs": [
      "Extra",
      "Developer Resources"
    ]
  },
  {
    "objectID": "webr-developer-resources.html#quarto-development-ecosystem",
    "href": "webr-developer-resources.html#quarto-development-ecosystem",
    "title": "Developer Resources",
    "section": "Quarto Development Ecosystem",
    "text": "Quarto Development Ecosystem\nFor those interested in extending the quarto-webr extension or exploring broader extension development within the Quarto ecosystem, we recommend exploring the following supplementary resources.\n\nQuarto Documentation\nGet acquainted with Quarto’s official extension documentation to deepen your understanding.\n\nFilters Documentation: Learn the art of creating filters for Quarto documents, enabling you to customize content generation.\nLua Development Tips: Access development tips specific to Lua scripting within Quarto extensions.\nLua API: Explore the Lua API documentation to understand how to interact with Quarto’s core functionality programmatically.\n\n\n\nRelated Extensions\nFor those intrigued by the broader world of extension development, we suggest the following Quarto extensions that can inspire your journey into extension development and functionality:\n\nquarto-ext/shinylive: Explore the shinylive extension’s codebase to understand how interactive content is implemented within Quarto documents.\nmcanouil/quarto-elevator: Delve into the quarto-elevator extension to gain insights into adding new features to Quarto documents.\nshafayetShafee/downloadthis: Investigate the downloadthis extension to see how it facilitates downloads within Quarto documents.\n\nThere are many more Quarto extensions to explore and learn from. For an up-to-date list, visit: https://quarto.org/docs/extensions/\n\n\nPandoc Essentials\nPandoc plays a pivotal role in Quarto’s document conversion process. To deepen your knowledge of Quarto, consider these Pandoc resources:\n\nExample Filters: Draw inspiration from Pandoc’s example filters to see how custom filters can be applied to your Quarto documents.\nCodeBlock: Understand the significance of the CodeBlock element in Pandoc, often used for implementing extensions and custom functionality.",
    "crumbs": [
      "Extra",
      "Developer Resources"
    ]
  },
  {
    "objectID": "webr-internal-cell.html",
    "href": "webr-internal-cell.html",
    "title": "Hiding and Executing Code",
    "section": "",
    "text": "In quarto-webr, you have the ability to execute code cells without displaying the code or its output. This feature can be particularly useful for preloading variables, loading datasets, creating visualizations, or checking student solutions without revealing the code to end users.",
    "crumbs": [
      "Getting Started",
      "Hiding and Executing Code"
    ]
  },
  {
    "objectID": "webr-internal-cell.html#setup---hidden-evaluation-and-output",
    "href": "webr-internal-cell.html#setup---hidden-evaluation-and-output",
    "title": "Hiding and Executing Code",
    "section": "“setup” - Hidden Evaluation and Output",
    "text": "“setup” - Hidden Evaluation and Output\nYou can create hidden setup code cells within your document using the special comment #| context: setup. The code within these cells executes discreetly in the background without displaying the code or its output.\n```{webr-r}\n#| context: setup\nmeaning_of_life = 42\n```\nIn the example above, we’ve pre-loaded the meaning_of_life variable with a value of 42. If you proceed to run the subsequent code cell, you’ll observe the value of meaning_of_life being displayed as 42.\n\t\nLoading\n  webR...\n\n\n  \n\n\nBy incorporating the setup hidden code cell for data loading and preprocessing, you enhance the user experience by providing them with an accessible and interactive environment for working with the data while maintaining a clutter-free and organized document structure.",
    "crumbs": [
      "Getting Started",
      "Hiding and Executing Code"
    ]
  },
  {
    "objectID": "webr-internal-cell.html#output---hidden-evaluation-with-results-shown",
    "href": "webr-internal-cell.html#output---hidden-evaluation-with-results-shown",
    "title": "Hiding and Executing Code",
    "section": "“output” - Hidden Evaluation with Results Shown",
    "text": "“output” - Hidden Evaluation with Results Shown\nYou also have the choice of crafting an output-only code cell within your quarto-webr document, achieved by incorporating the special comment #| context: output. The code inside this cell executes quietly in the background and reveals its output when the execution is complete. The output can take the form of either text or graphics.\nFor instance, the following code cell suppresses the creation of the matrix; but, displays the end result.\n```{webr-r}\n#| context: output\nmat2x2 &lt;- matrix(c(1, 2, 3, 4), nrow = 2)\nmat2x2\n```\n\n  \n\n\nIn the next example, the code used to generate the graph is suppressed.\n```{webr-r}\n#| context: output\nplot(\n  mpg ~ wt,\n  data = mtcars,\n  col = \"blue\", \n  xlab = \"Miles/(US) gallon\",\n  ylab = \"Weight (1000 lbs)\",\n  main = \"Miles per Gallon and Weight of Cars\",\n  sub = \"Source: 1974 Motor Trend US magazine.\"\n)\n```\n\n  \n\n\nBy using output code cells, you maintain a streamlined and comprehensible document, focusing on the outcome rather than the intricate data processing steps. This approach will enhance the readability and clarity of your content, making it more accessible and informative to your audience.",
    "crumbs": [
      "Getting Started",
      "Hiding and Executing Code"
    ]
  },
  {
    "objectID": "webr-internal-cell.html#hidden-loading-of-a-dataset",
    "href": "webr-internal-cell.html#hidden-loading-of-a-dataset",
    "title": "Hiding and Executing Code",
    "section": "Hidden Loading of a Dataset",
    "text": "Hidden Loading of a Dataset\nThe setup hidden code cell is a powerful tool for seamlessly pre-loading and preprocessing an entire dataset within your quarto-webr document. This capability enables users to work directly with the loaded data without any distracting code or output.\nIn the following example, we demonstrate the process of loading and preprocessing a dataset. First, we download the dataset from an external source and save it as 'penguins.csv' in the virtual webR file system. Next, we read the data into a data frame named df_penguins. All these operations occur silently in the background, ensuring that your document remains clean and focused on the data’s application.\n```{webr-r}\n#| context: setup\n\n# Download a dataset\ndownload.file(\n  'https://raw.githubusercontent.com/coatless/raw-data/main/penguins.csv',\n  'penguins.csv'\n)\n\n# Read the data\ndf_penguins = read.csv(\"penguins.csv\")\n```\n\t\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\nNote\n\n\n\nIf the setup code relies on specific R packages, we strongly recommend specifying the required packages in the document’s YAML. This approach informs users that the webpage is not yet ready and communicates a clear status update at the top. For example:\n---\nwebr:\n  packages: ['ggplot2', 'dplyr']\n---\nLearn more on the Using R Packages documentation page.",
    "crumbs": [
      "Getting Started",
      "Hiding and Executing Code"
    ]
  },
  {
    "objectID": "webr-internal-cell.html#hidden-summarization",
    "href": "webr-internal-cell.html#hidden-summarization",
    "title": "Hiding and Executing Code",
    "section": "Hidden Summarization",
    "text": "Hidden Summarization\nYou can use the output hidden code cell to generate summarized information about retrieved or manipulated data. This powerful feature enables you to process and summarize data without displaying the intermediary steps or code, keeping your document clean and focused on the results.\nFor instance, in the code cell below, we transform the mtcars dataset, converting variables, and then promptly produce a summary of the modified data.\n```{webr-r}\n#| context: output\nmtcars2 &lt;- within(mtcars, {\n   vs &lt;- factor(vs, labels = c(\"V\", \"S\"))\n   am &lt;- factor(am, labels = c(\"automatic\", \"manual\"))\n   cyl  &lt;- ordered(cyl)\n   gear &lt;- ordered(gear)\n   carb &lt;- ordered(carb)\n})\nsummary(mtcars2)\n```",
    "crumbs": [
      "Getting Started",
      "Hiding and Executing Code"
    ]
  },
  {
    "objectID": "webr-internal-cell.html#hidden-solution-checking-of-student-work",
    "href": "webr-internal-cell.html#hidden-solution-checking-of-student-work",
    "title": "Hiding and Executing Code",
    "section": "Hidden Solution Checking of Student Work",
    "text": "Hidden Solution Checking of Student Work\n\n\n\n\n\n\nWarning\n\n\n\nPlease be aware that any solution written in a webR hidden code cell can be obtained by viewing the document’s HTML source code. It is not recommended for formal assessments such as exams, quizzes, or homework.\n\n\nIn webR, you can check student answers by providing an answer key and a comparison function within the document.\nFor instance, you can create a solution data frame like this:\n```{webr-r}\n#| context: setup\nanswer_frame &lt;- data.frame(\n  problem = c(\"1a\", \"1b\", \"2\"),\n  answer = c(10, 2, 3/16),\n  tol = c(0.001, 0, 1/32)\n)\n```\nNext, define an internal check function:\n```{webr-r}\n#| context: setup\ncheck &lt;- function(problem, answer) {\n  aframe &lt;- answer_frame\n  if(!problem %in% aframe$problem) {\n    error_msg &lt;- paste0(\"Please enter a valid problem. (\", paste0(aframe$problem, collapse = \",\"), \")\")\n    stop(error_msg)\n  }\n\n  solution &lt;- aframe[which(aframe$problem == problem), \"answer\"]\n\n  ifelse(\n    all.equal(answer, solution, tolerance = 0.001) == TRUE,\n    \"Correct! Well done.\",\n    \"Incorrect! Good attempt. Let's try again?\"\n  )\n}\n```\n\t\nStudents can then compare their answers to the answer key using the check() function.\nFor example, consider the question:\n\nWhat is 9 + 1?\n\nLoading\n  webR...",
    "crumbs": [
      "Getting Started",
      "Hiding and Executing Code"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Greetings from quarto-webr Wonderland!",
    "section": "",
    "text": "Welcome to the documentation portal for the quarto-webr extension – your key to unlocking the endless possibilities of webR within various Quarto formats, including HTML, Websites, and Books.\nReady for an exciting journey into the world of webR’s interactive code cells? Click the “Run Code” button below to experience it firsthand:\nLoading\n  webR...\n\n\n  \n\n\nAt its core, the quarto-webr extension is designed to empower you to run R code directly in your web browser using familiar reporting tools, all without the need for an external R server. Moreover, the extension abstracts away the need to know HTML or JavaScript to use webR. However, it’s worth noting that you can also choose to unlock the full potential of webR and create more complex applications independently by directly using webR’s JavaScript API, granting you unparalleled freedom to harness the power of R in innovative ways.\nWith this in mind, let’s dive in and kickstart your journey with interactive code cells by creating our very first webR-powered Quarto document!"
  },
  {
    "objectID": "webr-troubleshooting.html",
    "href": "webr-troubleshooting.html",
    "title": "Troubleshooting",
    "section": "",
    "text": "As this is an exciting new frontier, we’re learning as we go. Or as my friend Lawrence says, “I like to build airplanes in the air-”. In the spirit of learning, let’s address some common issues you may come across…\n\nStuck at Loading webR…\nProblem: If you see the message Loading webR... above your code cell instead of Run code, it might be due to missing worker files (webr-worker.js and webr-serviceworker.js) at the document’s root or a relative directory.\nSolution: Ensure that these worker files are located in the same directory as your Quarto document. For instance, the following directory structure is recommended:\n.\n├── demo-quarto-webr.qmd\n├── webr-serviceworker.js\n└── webr-worker.js\nIf the issue persists, specify the worker files’ location using the service-worker-url option in the document’s YAML header or set the channel-type option to \"post-message\".\n\n\nUnable to Render the Quarto File\nProblem: When I add the webr value to the filter section, my Quarto document fails to render and displays a lengthy error message.\nSolution: Quarto extensions are project-specific, which means you must install the extension for each new project you create. To resolve this issue, ensure that your project directory structure includes an _extensions directory with the appropriate extension files, as shown below:\n.\n├── _extensions\n│   └── coatless\n│       └── webr\n│           ├── _extension.yml\n│           ├── ...\n│           └── webr.lua\n└── test-document.qmd\nIf your directory is missing the _extensions/ folder, please install the webr extension by following the instructions in Install the quarto-webr extension.\nStarting from Quarto v1.4, you will receive an improved error message that emphasizes the extension’s absence from your current working directory.\n#| code-fold: true\n#| code-summary: \"Missing extension error for Quarto v1.4 and later\"\n\nFATAL (/Applications/quarto/share/filters/main.lua:129) An error occurred:\nCould not run /Users/jjb/github/demo-webr/webr as a JSON filter.\nPlease make sure the file exists and is executable.\n\nDid you intend 'webr' as a Lua filter in an extension?\nIf so, make sure you've spelled the name of the extension correctly.\n\nThe original Pandoc error follows below.\nError running filter /Users/jjb/github/demo-webr/webr:\nCould not find executable /Users/jjb/github/demo-webr/webr\nIn versions prior to Quarto v1.4, including v1.3 and earlier, the error message may differ, but it typically signals that the extension is either missing or not executable.\n#| code-fold: true\n#| code-summary: \"Missing extension error for Quarto v1.3 and earlier\"\n\nError running filter /Applications/quarto/share/filters/main.lua:\nError running filter /Users/jjb/github/demo-webr/webr:\nCould not find executable /Users/jjb/github/demo-webr/webr\nstack traceback:\n        /Applications/quarto/share/filters/main.lua:4030: in function &lt;/Applications/quarto/share/filters/main.lua:4009&gt;\n        [C]: in ?\n        [C]: in method 'walk'\n        /Applications/quarto/share/filters/main.lua:171: in function 'run_emulated_filter'\n        /Applications/quarto/share/filters/main.lua:449: in local 'callback'\n        /Applications/quarto/share/filters/main.lua:454: in upvalue 'run_emulated_filter_chain'\n        /Applications/quarto/share/filters/main.lua:495: in function &lt;/Applications/quarto/share/filters/main.lua:476&gt;\nstack traceback:\n        /Applications/quarto/share/filters/main.lua:171: in function 'run_emulated_filter'\n        /Applications/quarto/share/filters/main.lua:449: in local 'callback'\n        /Applications/quarto/share/filters/main.lua:454: in upvalue 'run_emulated_filter_chain'\n        /Applications/quarto/share/filters/main.lua:495: in function &lt;/Applications/quarto/share/filters/main.lua:476&gt;\n\n\nDirectly Accessing Rendered HTML\nProblem: When I directly open the rendered HTML document in a web browser, webR components are not loaded due to security reasons.\nSolution: When you use quarto preview or quarto render, the rendered HTML document is served by mimicking a server running under https://localhost/. In this context, everything usually works fine if you follow the directory structure mentioned above.\nHowever, if you directly open the rendered HTML document (e.g., demo-quarto-web.html) in a web browser, you may encounter issues with WebR components not loading due to security restrictions. This behavior is explained further in this StackOverflow answer.\nTo address this problem and avoid the need for a local Quarto installation to open the rendered file directly, you have a few options:\n\nUse Chrome’s --allow-file-access-from-files access: You can modify your Chrome shortcut to include the --allow-file-access-from-files flag. This allows local files to access other local files, potentially resolving the issue.\nUse the WebServer for Chrome Extension: Install the WebServer for Chrome extension to serve your HTML files. This extension sets up a local web server that doesn’t have the same security restrictions as directly opening files.\nUse NPM to Obtain local-web-server: Install the local-web-server package from npm, which is a lightweight, no-configuration-required HTTP server. You can use it to serve your HTML files without encountering security restrictions.\n\n\n\nSpeed Up webR\nProblem: WebR documents are not performing as efficiently as expected.\nSolution: To optimize the performance of webR documents, it’s essential to set appropriate HTTP headers for COOP and COEP. These headers help speed up the process and ensure a smoother user experience.\nHere are the recommended COOP and COEP headers to use:\nCross-Origin-Opener-Policy: same-origin\nCross-Origin-Embedder-Policy: require-corp\nBy configuring these headers, you enforce a same-origin policy for cross-origin windows and ensure that cross-origin iframes are required to have a COEP policy that allows cross-origin embedding. For more detailed instructions on setting up these headers, please refer to the \"shared-array-buffer\" channel type documentation.\n\n\nEngine Registration\nProblem: When using the knitr engine instead of the jupyter engine and the original tag {webr} instead of {webr-r}, a warning message may appear in the render processing output:\nWarning message:\nIn get_engine(options$engine) :\n  Unknown language engine 'webr' (must be registered via knit_engines$set()).\nSolution: The warning message about the unknown language engine ‘webr’ is purely cosmetic and does not affect the functionality of the webr filter. It is merely an aesthetic issue and does not impact the execution of code cells.\nThis warning occurs because the knitr engine is not initially aware of the webr engine. However, this lack of awareness does not cause any functional problems. The webr filter will operate as expected despite this warning.\nWhile the warning is not critical, it may be addressed in future updates for aesthetic reasons. Nevertheless, you can safely disregard this warning message as it does not interfere with the functionality of your webR documents.",
    "crumbs": [
      "Extra",
      "Troubleshooting"
    ]
  },
  {
    "objectID": "webr-using-r-packages.html",
    "href": "webr-using-r-packages.html",
    "title": "Using R Packages",
    "section": "",
    "text": "Whether you need specialized statistical analysis, advanced visualization, or any other R-based functionality, you can harness the rich ecosystem of R packages directly within your documents. By default, quarto-webr avoids loading additional packages. However, you have two ways to incorporate packages into your document: one where packages are installed when the document opens, and the other where packages are installed interactively within specific code cells.\n\nAvailable R Packages\nBefore you use any R package with webR, it’s essential to check if it’s available. You can explore the available packages by executing the following R code, either with webR or just R:\nLoading\n  webR...\n\n\n  \n\n\nAlternatively, you can navigate to the WebR repository here for package listings.\n\n\nInstall R Packages on Document Open\nTo automatically install packages when the document opens, add the packages key under webr in the YAML header, listing the packages in an array:\n---\nwebr:\n  packages: ['ggplot2', 'dplyr']\n---\nBy using this approach, you ensure that necessary packages are available right from the start when readers access your document. Moreover, the webR code cells do not become active until the packages are installed. This can be especially helpful when working with packages in multiple cells.\n\n\nInstalling an R Package Interactively\nIf you need to install a package interactively within specific code cells, you can do so using the webr::install() function. This method allows you to install packages on-the-fly when needed.\n\n\n\n\n\n\nNote\n\n\n\nPlease note that not all R packages are immediately available for use with webR due to the presence of compiled code routines. The installation process might also take some time depending on the communication channel being used.\n\n\nLet’s take ggplot2 as an example:\nLoading\n  webR...\n\n\n  \n\n\nUsing this approach, you can install packages on a per-code cell basis, which can be more efficient when you only need specific packages for certain parts of your document.",
    "crumbs": [
      "Getting Started",
      "Using R Packages"
    ]
  },
  {
    "objectID": "webr-first-steps.html",
    "href": "webr-first-steps.html",
    "title": "Making your first webR-powered Quarto document",
    "section": "",
    "text": "To use this extension in a Quarto project, install it from within the project’s working directory by typing into Terminal:\nquarto add coatless/quarto-webr\n\n\n\nDemonstration of using the Terminal tab to install the extension.",
    "crumbs": [
      "Getting Started",
      "Your first webR-powered Quarto document"
    ]
  },
  {
    "objectID": "webr-first-steps.html#installation",
    "href": "webr-first-steps.html#installation",
    "title": "Making your first webR-powered Quarto document",
    "section": "",
    "text": "To use this extension in a Quarto project, install it from within the project’s working directory by typing into Terminal:\nquarto add coatless/quarto-webr\n\n\n\nDemonstration of using the Terminal tab to install the extension.",
    "crumbs": [
      "Getting Started",
      "Your first webR-powered Quarto document"
    ]
  },
  {
    "objectID": "webr-first-steps.html#usage",
    "href": "webr-first-steps.html#usage",
    "title": "Making your first webR-powered Quarto document",
    "section": "Usage",
    "text": "Usage\nFor each document, place the webr filter in the document’s header:\nfilters:\n  - webr\nThen, place the R code for webR in a code block marked with {webr-r}\n---\ntitle: webR in Quarto HTML Documents\nformat: html\nengine: knitr\nfilters:\n  - webr\n---\n\nThis is a webr-enabled code cell in a Quarto HTML document.\n\n```{webr-r}\nfit = lm(mpg ~ am, data = mtcars)\nsummary(fit)\n```\nThe rendered document can be viewed online here.\nWhen quarto render or quarto preview is called, the filter will execute under engine: knitr. During the execution, the filter adds two files to the working directory: webr-worker.js and webr-serviceworker.js. These files allow for the webR session to be started and must be present with the rendered output.\nNote: If engine: knitr is not specified, then the jupyter compute engine will be used by default.",
    "crumbs": [
      "Getting Started",
      "Your first webR-powered Quarto document"
    ]
  },
  {
    "objectID": "webr-acknowledgements.html",
    "href": "webr-acknowledgements.html",
    "title": "Acknowledgments and Collaborations",
    "section": "",
    "text": "We would like to express our heartfelt gratitude to several individuals and teams who played a pivotal role in bringing quarto-webR to life as an extension for Quarto. Without their dedication and contributions, this project would not have been possible.",
    "crumbs": [
      "Extra",
      "Acknowledgements"
    ]
  },
  {
    "objectID": "webr-acknowledgements.html#quarto-webr-extension-core-developers",
    "href": "webr-acknowledgements.html#quarto-webr-extension-core-developers",
    "title": "Acknowledgments and Collaborations",
    "section": "quarto-webr Extension Core Developers",
    "text": "quarto-webr Extension Core Developers\n\nJames Joseph Balamuta\nJooYoung Seo for accessibility improvements.\n\nTheir tireless efforts and expertise have been instrumental in the development of this extension, and we are immensely grateful for their invaluable contributions.",
    "crumbs": [
      "Extra",
      "Acknowledgements"
    ]
  },
  {
    "objectID": "webr-acknowledgements.html#webr-core-developers",
    "href": "webr-acknowledgements.html#webr-core-developers",
    "title": "Acknowledgments and Collaborations",
    "section": "webR Core Developers",
    "text": "webR Core Developers\n\nGeorge Stagg\nLionel Henry\n\nTheir tireless efforts and expertise in developing webR were instrumental in the development of this extension, and we are immensely grateful for their contributions.",
    "crumbs": [
      "Extra",
      "Acknowledgements"
    ]
  },
  {
    "objectID": "webr-acknowledgements.html#early-testing-feedback",
    "href": "webr-acknowledgements.html#early-testing-feedback",
    "title": "Acknowledgments and Collaborations",
    "section": "Early Testing Feedback",
    "text": "Early Testing Feedback\nWe extend our sincere appreciation to the following individuals for providing early testing feedback on the extension:\n\nEli E. Holmes\nBob Rudis\n\nTheir insightful feedback and suggestions have been invaluable in refining and enhancing the functionality of the extension.",
    "crumbs": [
      "Extra",
      "Acknowledgements"
    ]
  },
  {
    "objectID": "webr-acknowledgements.html#quarto-team-assistance",
    "href": "webr-acknowledgements.html#quarto-team-assistance",
    "title": "Acknowledgments and Collaborations",
    "section": "Quarto Team Assistance",
    "text": "Quarto Team Assistance\nWe would like to acknowledge the Quarto team for their assistance in setting up a new code cell type, which greatly improved the overall functionality of the extension. You can view the discussion here.",
    "crumbs": [
      "Extra",
      "Acknowledgements"
    ]
  },
  {
    "objectID": "webr-acknowledgements.html#inspirations",
    "href": "webr-acknowledgements.html#inspirations",
    "title": "Acknowledgments and Collaborations",
    "section": "Inspirations",
    "text": "Inspirations\nOur project built upon the initial proof of concept for a standalone Quarto HTML document, made possible by the work of the coatless-r-n-d/webR-quarto-demos repository.\nAdditionally, we were inspired by the following public-facing examples from the webR Core developers:\n\nSource of Tidyverse Blog Post and Minor fix\nwebR documentation landing page (Live page)",
    "crumbs": [
      "Extra",
      "Acknowledgements"
    ]
  },
  {
    "objectID": "webr-code-cell-demos.html",
    "href": "webr-code-cell-demos.html",
    "title": "Exploring Interactive Code Cells",
    "section": "",
    "text": "Welcome to the world of interactive code cells, unlocked by the quarto-webr extension. These cells allow you to run R code directly within your Quarto HTML documents, enabling real-time computations, dynamic visualizations, and more. Let’s explore the impressive capabilities webR offers.",
    "crumbs": [
      "Demos",
      "Exploring Interactive Code Cells"
    ]
  },
  {
    "objectID": "webr-code-cell-demos.html#fit-a-linear-regression-model",
    "href": "webr-code-cell-demos.html#fit-a-linear-regression-model",
    "title": "Exploring Interactive Code Cells",
    "section": "Fit a Linear Regression Model",
    "text": "Fit a Linear Regression Model\nWe begin by using the “Hello World” example of statistics: fitting and analyzing a linear regression.\nLoading\n  webR...",
    "crumbs": [
      "Demos",
      "Exploring Interactive Code Cells"
    ]
  },
  {
    "objectID": "webr-code-cell-demos.html#create-a-graph-with-base-r",
    "href": "webr-code-cell-demos.html#create-a-graph-with-base-r",
    "title": "Exploring Interactive Code Cells",
    "section": "Create a Graph with Base R",
    "text": "Create a Graph with Base R\nFor this example, webR empowers us to create and visualize data plots interactively. For example, try changing the color from blue to orange and run the code again.\nLoading\n  webR...",
    "crumbs": [
      "Demos",
      "Exploring Interactive Code Cells"
    ]
  },
  {
    "objectID": "webr-code-cell-demos.html#data-wrangle-in-real-time",
    "href": "webr-code-cell-demos.html#data-wrangle-in-real-time",
    "title": "Exploring Interactive Code Cells",
    "section": "Data Wrangle in Real Time",
    "text": "Data Wrangle in Real Time\nData manipulation is a crucial part of data analysis. In this example, we’ll modify a data set in real-time and view the results. It’s like changing ingredients while cooking to get the perfect dish!\nLoading\n  webR...",
    "crumbs": [
      "Demos",
      "Exploring Interactive Code Cells"
    ]
  },
  {
    "objectID": "webr-code-cell-demos.html#working-with-r-packages",
    "href": "webr-code-cell-demos.html#working-with-r-packages",
    "title": "Exploring Interactive Code Cells",
    "section": "Working with R Packages",
    "text": "Working with R Packages\nYou can incorporate R packages available in webR by installing them interactively using webr::install() within a {webr-r} code cell or by specifying them in the document’s YAML. Once you’ve installed a package, you can harness its power just as you would in a traditional R environment. For more details, please refer to Using R Packages.\n\n\n\n\n\n\nNote\n\n\n\nPlease note that installing certain packages, such as ggplot2, may take some time depending on the communication channel being used.\n\n\nLet’s take ggplot2 as an example:\nLoading\n  webR...\n\n\n  \n\n\nWith ggplot2 now installed, let’s create a graph with it!\nLoading\n  webR...",
    "crumbs": [
      "Demos",
      "Exploring Interactive Code Cells"
    ]
  },
  {
    "objectID": "webr-code-cell-demos.html#variable-definitions-and-reuse",
    "href": "webr-code-cell-demos.html#variable-definitions-and-reuse",
    "title": "Exploring Interactive Code Cells",
    "section": "Variable Definitions and Reuse",
    "text": "Variable Definitions and Reuse\nDefine variables in one code cell and reuse them in subsequent cells:\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...",
    "crumbs": [
      "Demos",
      "Exploring Interactive Code Cells"
    ]
  },
  {
    "objectID": "webr-code-cell-demos.html#functions",
    "href": "webr-code-cell-demos.html#functions",
    "title": "Exploring Interactive Code Cells",
    "section": "Functions",
    "text": "Functions\nFunctions can similarly be defined and used in one code cell or multiple code cells.\nLoading\n  webR...\n\n\n  \n\n\nLoading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\nNote\n\n\n\nThe function definition must be run before calling the function. Otherwise, there will be an error that is generated.",
    "crumbs": [
      "Demos",
      "Exploring Interactive Code Cells"
    ]
  },
  {
    "objectID": "webr-code-cell-demos.html#handling-errors-and-warnings",
    "href": "webr-code-cell-demos.html#handling-errors-and-warnings",
    "title": "Exploring Interactive Code Cells",
    "section": "Handling Errors and Warnings",
    "text": "Handling Errors and Warnings\nWhen webR encounters an error while running R code, the error and warning messages are displayed to the user.\nFor example, if the routine has a hard stop, the execution immediately ends, and the message is shared.\nLoading\n  webR...\n\n\n  \n\n\nSimilarly, if a variable is not found, then the code stops being evaluated and returns an error.\nLoading\n  webR...\n\n\n  \n\n\nUnlike errors, warning messages are allowed to propagate into the output without stopping the computation.\nLoading\n  webR...\n\n\n  \n\n\nThis is even the case inside of complex functions.\nLoading\n  webR...",
    "crumbs": [
      "Demos",
      "Exploring Interactive Code Cells"
    ]
  },
  {
    "objectID": "webr-code-cell-demos.html#escaping-characters-in-a-string",
    "href": "webr-code-cell-demos.html#escaping-characters-in-a-string",
    "title": "Exploring Interactive Code Cells",
    "section": "Escaping Characters in a String",
    "text": "Escaping Characters in a String\nHandle special characters in strings with ease:\nLoading\n  webR...",
    "crumbs": [
      "Demos",
      "Exploring Interactive Code Cells"
    ]
  },
  {
    "objectID": "webr-code-cell-demos.html#anonymous-function-definition",
    "href": "webr-code-cell-demos.html#anonymous-function-definition",
    "title": "Exploring Interactive Code Cells",
    "section": "Anonymous Function Definition",
    "text": "Anonymous Function Definition\nDefine and use anonymous functions seamlessly:\nLoading\n  webR...",
    "crumbs": [
      "Demos",
      "Exploring Interactive Code Cells"
    ]
  },
  {
    "objectID": "webr-code-cell-demos.html#empty-code-cell",
    "href": "webr-code-cell-demos.html#empty-code-cell",
    "title": "Exploring Interactive Code Cells",
    "section": "Empty Code Cell",
    "text": "Empty Code Cell\nDefine an empty code cell by simply leaving it blank.\nLoading\n  webR...",
    "crumbs": [
      "Demos",
      "Exploring Interactive Code Cells"
    ]
  },
  {
    "objectID": "webr-code-cell-demos.html#pre-rendered-code-cell",
    "href": "webr-code-cell-demos.html#pre-rendered-code-cell",
    "title": "Exploring Interactive Code Cells",
    "section": "Pre-rendered Code Cell",
    "text": "Pre-rendered Code Cell\nAny code using the usual {r} tag will be executed, and its output saved, just as if you were rendering a Quarto document without the webR extension:\n\nmessage(\"Hello!\")\n\nHello!",
    "crumbs": [
      "Demos",
      "Exploring Interactive Code Cells"
    ]
  },
  {
    "objectID": "webr-meta-options.html",
    "href": "webr-meta-options.html",
    "title": "Customization Options",
    "section": "",
    "text": "The quarto-webr extension empowers you to tailor your webR environment to meet your unique requirements. By configuring various options in your document’s YAML header, you can structure the webR experience on a per-page basis. Below, we explore these customization options and how to implement them.",
    "crumbs": [
      "Getting Started",
      "Customization Options"
    ]
  },
  {
    "objectID": "webr-meta-options.html#webr-options",
    "href": "webr-meta-options.html#webr-options",
    "title": "Customization Options",
    "section": "webR options",
    "text": "webR options\nBy specifying various WebROptions options in the document YAML, you can create a personalized webR experience\n\nhome-dir\n\nDescription: Set the WebAssembly user’s home directory and initial working directory.\nDefault Value: '/home/web_user'\nDocumentation: homeDir\n\n\n\nbase-url\n\nDescription: Define the base URL for downloading R WebAssembly binaries.\nDefault Value: 'https://webr.r-wasm.org/[version]/'\nDocumentation: baseUrl\n\n\n\nchannel-type\n\nDescription: Specify the communication channel type to interact with webR.\nDefault Value: \"automatic\" (0)\nPossible Values: \"automatic\" (0), \"shared-array-buffer\" (1), \"service-worker\" (2), \"post-message\" (3).\nDocumentation: channelType\n\n\n\n\n\n\n\nNote\n\n\n\nWe recommend using the \"post-message\" channel when GitHub Pages or Quarto Pub serve the webR-enabled document. Note that this option prevents the interruption of running R code and the use of nested R REPLs (readline(), menu(), browser(), etc.). For more details, please see Communication Channels\n\n\n\n\nservice-worker-url\n\nDescription: Set the base URL for loading JavaScript worker scripts when using the ServiceWorker communication channel mode.\nDefault Value: ''\nDocumentation: serviceWorkerUrl",
    "crumbs": [
      "Getting Started",
      "Customization Options"
    ]
  },
  {
    "objectID": "webr-meta-options.html#native-extension-options",
    "href": "webr-meta-options.html#native-extension-options",
    "title": "Customization Options",
    "section": "Native Extension Options",
    "text": "Native Extension Options\nThe extension also provides native options that affect its behavior:\n\nshow-startup-message\n\nDescription: Controls the display of the WebR initialization state in the document header.\nDefault Value: true\n\n\n\nshow-header-message\n\nDescription: Determines whether COOP and COEP headers are in use for faster page loads.\nDefault Value: false\n\n\n\npackages\n\nDescription: Specifies R packages to install automatically when the document opens.\nDefault Value: []",
    "crumbs": [
      "Getting Started",
      "Customization Options"
    ]
  },
  {
    "objectID": "webr-extension-website.html",
    "href": "webr-extension-website.html",
    "title": "Quarto Extension Website Guide",
    "section": "",
    "text": "Initializing the Project\nTo get started, follow these steps to set up the Quarto extension website project:\n\nCreate a new directory named docs/ within your repository using the following command:\nmkdir docs && cd $_\nInitialize a Quarto website project by running the following command:\nquarto create project website .\n\n\n\nIncorporating the Extension\nTo seamlessly integrate the extension into your project, you’ll need to create a symbolic link to the _extensions folder containing the development version of the extension. This approach helps you avoid maintaining a duplicate copy of the extension in your Git repository history.\nFollow these steps:\n\nNavigate to the docs/ directory in your project.\nCreate a symbolic link to the _extensions folder using the following command:\nln -s ../_extensions _extensions",
    "crumbs": [
      "Extra",
      "Setting up the Extension Website"
    ]
  }
]