[
  {
    "objectID": "qwebr-acknowledgements.html",
    "href": "qwebr-acknowledgements.html",
    "title": "Acknowledgments and Collaborations",
    "section": "",
    "text": "We would like to express our heartfelt gratitude to several individuals and teams who played a pivotal role in bringing quarto-webR to life as an extension for Quarto. Without their dedication and contributions, this project would not have been possible.",
    "crumbs": [
      "Extra Information",
      "Acknowledgements"
    ]
  },
  {
    "objectID": "qwebr-acknowledgements.html#quarto-webr-extension-core-developers",
    "href": "qwebr-acknowledgements.html#quarto-webr-extension-core-developers",
    "title": "Acknowledgments and Collaborations",
    "section": "quarto-webr Extension Core Developers",
    "text": "quarto-webr Extension Core Developers\n\nJames Joseph Balamuta\nJooYoung Seo for accessibility improvements.\n\nTheir relentless dedication have played a pivotal role in shaping the development of this extension.",
    "crumbs": [
      "Extra Information",
      "Acknowledgements"
    ]
  },
  {
    "objectID": "qwebr-acknowledgements.html#webr-core-developers",
    "href": "qwebr-acknowledgements.html#webr-core-developers",
    "title": "Acknowledgments and Collaborations",
    "section": "webR Core Developers",
    "text": "webR Core Developers\n\nGeorge Stagg\nLionel Henry\n\nTheir tireless efforts and expertise in developing webR were instrumental in the development of this extension, and we are immensely grateful for their contributions.",
    "crumbs": [
      "Extra Information",
      "Acknowledgements"
    ]
  },
  {
    "objectID": "qwebr-acknowledgements.html#early-testing-feedback",
    "href": "qwebr-acknowledgements.html#early-testing-feedback",
    "title": "Acknowledgments and Collaborations",
    "section": "Early Testing Feedback",
    "text": "Early Testing Feedback\nWe extend our sincere appreciation to the following individuals for providing early testing feedback on the extension:\n\nEli E. Holmes\nBob Rudis\n\nTheir insightful feedback and suggestions have been invaluable in refining and enhancing the functionality of the extension.",
    "crumbs": [
      "Extra Information",
      "Acknowledgements"
    ]
  },
  {
    "objectID": "qwebr-acknowledgements.html#quarto-team-assistance",
    "href": "qwebr-acknowledgements.html#quarto-team-assistance",
    "title": "Acknowledgments and Collaborations",
    "section": "Quarto Team Assistance",
    "text": "Quarto Team Assistance\nWe would like to acknowledge the Quarto team for their assistance in setting up a new code cell type, which greatly improved the overall functionality of the extension. You can view the discussion here.",
    "crumbs": [
      "Extra Information",
      "Acknowledgements"
    ]
  },
  {
    "objectID": "qwebr-acknowledgements.html#inspirations",
    "href": "qwebr-acknowledgements.html#inspirations",
    "title": "Acknowledgments and Collaborations",
    "section": "Inspirations",
    "text": "Inspirations\nOur project built upon the initial proof of concept for a standalone Quarto HTML document, made possible by the work of the coatless-r-n-d/webR-quarto-demos repository.\nAdditionally, we were inspired by the following public-facing examples from the webR Core developers:\n\nSource of Tidyverse Blog Post and Minor fix\nwebR documentation landing page (Live page)",
    "crumbs": [
      "Extra Information",
      "Acknowledgements"
    ]
  },
  {
    "objectID": "qwebr-using-r-packages.html",
    "href": "qwebr-using-r-packages.html",
    "title": "Using R Packages",
    "section": "",
    "text": "Whether you need specialized statistical analysis, advanced visualization, or any other R-based functionality, you can harness the rich ecosystem of R packages directly within your documents. By default, quarto-webr avoids loading additional packages. However, you have two ways to incorporate packages into your document: one where packages are installed when the document opens, and the other where packages are installed interactively within specific code cells.",
    "crumbs": [
      "Getting Started",
      "Using R Packages"
    ]
  },
  {
    "objectID": "qwebr-using-r-packages.html#custom-repositories",
    "href": "qwebr-using-r-packages.html#custom-repositories",
    "title": "Using R Packages",
    "section": "Custom Repositories",
    "text": "Custom Repositories\nIf an R package is not available on the main webR repository (note, this is a large shinylive app that should not be open on mobile), fear not! You can compile your own R package to an R WASM Package binary and setup a custom repository to share it.\nWe have the following guides:\n\nOrg-focused webR/WASM Package Repository without a {pkgdown} website\nUnified GitHub Action Deployment using artifacts of R WASM Package binaries and {pkgdown} website\nSeparate GitHub Action Deployment onto gh-pages branch of R WASM Package binaries and {pkgdown} website\n\nAnother approach would be to use r-universe.dev to automatically build and supply R WASM package binaries.\nOnce done, please make sure to specify where the custom repository is by using the repos key under the webr option in the document header. For example, we can add two custom repositories – one to a GitHub pages hosted repository and another to the r-universe, by using:\n---\nwebr:\n  repos:\n    - https://username.github.io/reponame\n    - https://username.r-universe.dev\n---\n\n\n\n\n\n\nNote\n\n\n\nThe {quarto-webr} extension is setup to always check whether an R package is available at the main repository even without it being specified in the repos key.",
    "crumbs": [
      "Getting Started",
      "Using R Packages"
    ]
  },
  {
    "objectID": "qwebr-code-cell-demos.html",
    "href": "qwebr-code-cell-demos.html",
    "title": "Exploring Interactive Code Cells",
    "section": "",
    "text": "Welcome to the world of interactive code cells, unlocked by the quarto-webr extension. These cells allow you to run R code directly within your Quarto HTML documents, enabling real-time computations, dynamic visualizations, and more. Let’s explore the impressive capabilities webR offers.",
    "crumbs": [
      "Getting Started",
      "Exploring Interactive Code Cells"
    ]
  },
  {
    "objectID": "qwebr-code-cell-demos.html#fit-a-linear-regression-model",
    "href": "qwebr-code-cell-demos.html#fit-a-linear-regression-model",
    "title": "Exploring Interactive Code Cells",
    "section": "Fit a Linear Regression Model",
    "text": "Fit a Linear Regression Model\nWe begin by using the “Hello World” example of statistics: fitting and analyzing a linear regression.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Getting Started",
      "Exploring Interactive Code Cells"
    ]
  },
  {
    "objectID": "qwebr-code-cell-demos.html#line-by-line-execution",
    "href": "qwebr-code-cell-demos.html#line-by-line-execution",
    "title": "Exploring Interactive Code Cells",
    "section": "Line-by-line Execution",
    "text": "Line-by-line Execution\nIn this section, we’ll explore the built-in keyboard shortcuts for executing code within the interactive code cell. You can run either the selected code or specific lines or the entire cell with the following keyboard shortcuts:\n\nRun selected code:\n\nmacOS: ⌘ + ↩︎/Return\nWindows/Linux: Ctrl + ↩︎/Enter\n\nTo run the entire code cell, you can simply click the “Run code” button, or use the keyboard shortcut:\n\nShift + ↩︎\n\n\nFeel free to try it out in the following code cell:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nBy using these shortcuts, you can run code conveniently and efficiently. This practice can also help you become familiar with keyboard shortcuts when transitioning to integrated development environments (IDEs) like RStudio or Visual Studio Code with R.",
    "crumbs": [
      "Getting Started",
      "Exploring Interactive Code Cells"
    ]
  },
  {
    "objectID": "qwebr-code-cell-demos.html#preventing-modifications-to-code",
    "href": "qwebr-code-cell-demos.html#preventing-modifications-to-code",
    "title": "Exploring Interactive Code Cells",
    "section": "Preventing Modifications to Code",
    "text": "Preventing Modifications to Code\nCode cells can be locked to their initial state by specifying #| read-only: true. The next code cell has such a feature implemented. Try modifying the expression 1 + 1 to any other value.\n\n{quarto-webr} OutputCell code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| read-only: true\n1 + 1\n```\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis option can be paired with autorun: true to avoid having the user press the “Run code” button to see the output.",
    "crumbs": [
      "Getting Started",
      "Exploring Interactive Code Cells"
    ]
  },
  {
    "objectID": "qwebr-code-cell-demos.html#create-a-graph-with-base-r",
    "href": "qwebr-code-cell-demos.html#create-a-graph-with-base-r",
    "title": "Exploring Interactive Code Cells",
    "section": "Create a Graph with Base R",
    "text": "Create a Graph with Base R\nFor this example, webR empowers us to create and visualize data plots interactively. We can tweak labels, colors, or even the variables being used on an as-needed basis to explore “What if …” scenarios. For instance, what if we try changing the value blue to orange and run the code again.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Getting Started",
      "Exploring Interactive Code Cells"
    ]
  },
  {
    "objectID": "qwebr-code-cell-demos.html#fill-in-the-blanks",
    "href": "qwebr-code-cell-demos.html#fill-in-the-blanks",
    "title": "Exploring Interactive Code Cells",
    "section": "Fill in the Blanks",
    "text": "Fill in the Blanks\nAnother approach is to purposely leave out part of a command during an exercise to afford students structure in solving it. For example, we could have the question of:\n\nFill in the blank to have the following expression add up to 42.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Getting Started",
      "Exploring Interactive Code Cells"
    ]
  },
  {
    "objectID": "qwebr-code-cell-demos.html#data-wrangle-in-real-time",
    "href": "qwebr-code-cell-demos.html#data-wrangle-in-real-time",
    "title": "Exploring Interactive Code Cells",
    "section": "Data Wrangle in Real Time",
    "text": "Data Wrangle in Real Time\nData manipulation is a crucial part of data analysis. In this example, we’ll modify a data set in real-time and view the results. It’s like changing ingredients while cooking to get the perfect dish!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Getting Started",
      "Exploring Interactive Code Cells"
    ]
  },
  {
    "objectID": "qwebr-code-cell-demos.html#working-with-r-packages",
    "href": "qwebr-code-cell-demos.html#working-with-r-packages",
    "title": "Exploring Interactive Code Cells",
    "section": "Working with R Packages",
    "text": "Working with R Packages\nYou can incorporate R packages available in webR by installing them interactively using webr::install() within a {webr-r} code cell or by specifying them in the document’s YAML. Once you’ve installed a package, you can harness its power just as you would in a traditional R environment. For more details, please refer to Using R Packages.\n\n\n\n\n\n\nNote\n\n\n\nPlease note that installing certain packages, such as ggplot2, may take some time depending on the communication channel being used.\n\n\nLet’s take ggplot2 as an example:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWith ggplot2 now installed, let’s create a graph with it!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Getting Started",
      "Exploring Interactive Code Cells"
    ]
  },
  {
    "objectID": "qwebr-code-cell-demos.html#variable-definitions-and-reuse",
    "href": "qwebr-code-cell-demos.html#variable-definitions-and-reuse",
    "title": "Exploring Interactive Code Cells",
    "section": "Variable Definitions and Reuse",
    "text": "Variable Definitions and Reuse\nDefine variables in one code cell and reuse them in subsequent cells:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Getting Started",
      "Exploring Interactive Code Cells"
    ]
  },
  {
    "objectID": "qwebr-code-cell-demos.html#functions",
    "href": "qwebr-code-cell-demos.html#functions",
    "title": "Exploring Interactive Code Cells",
    "section": "Functions",
    "text": "Functions\nFunctions can similarly be defined and used in one code cell or multiple code cells.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nNote\n\n\n\nThe function definition must be run before calling the function. Otherwise, there will be an error that is generated.",
    "crumbs": [
      "Getting Started",
      "Exploring Interactive Code Cells"
    ]
  },
  {
    "objectID": "qwebr-code-cell-demos.html#handling-errors-and-warnings",
    "href": "qwebr-code-cell-demos.html#handling-errors-and-warnings",
    "title": "Exploring Interactive Code Cells",
    "section": "Handling Errors and Warnings",
    "text": "Handling Errors and Warnings\nWhen webR encounters an error while running R code, the error and warning messages are displayed to the user.\nFor example, if the routine has a hard stop, the execution immediately ends, and the message is shared.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSimilarly, if a variable is not found, then the code stops being evaluated and returns an error.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nUnlike errors, warning messages are allowed to propagate into the output without stopping the computation.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThis is even the case inside of complex functions.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Getting Started",
      "Exploring Interactive Code Cells"
    ]
  },
  {
    "objectID": "qwebr-code-cell-demos.html#escaping-characters-in-a-string",
    "href": "qwebr-code-cell-demos.html#escaping-characters-in-a-string",
    "title": "Exploring Interactive Code Cells",
    "section": "Escaping Characters in a String",
    "text": "Escaping Characters in a String\nHandle special characters in strings with ease:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Getting Started",
      "Exploring Interactive Code Cells"
    ]
  },
  {
    "objectID": "qwebr-code-cell-demos.html#anonymous-function-definition",
    "href": "qwebr-code-cell-demos.html#anonymous-function-definition",
    "title": "Exploring Interactive Code Cells",
    "section": "Anonymous Function Definition",
    "text": "Anonymous Function Definition\nDefine and use anonymous functions seamlessly:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Getting Started",
      "Exploring Interactive Code Cells"
    ]
  },
  {
    "objectID": "qwebr-code-cell-demos.html#empty-code-cell",
    "href": "qwebr-code-cell-demos.html#empty-code-cell",
    "title": "Exploring Interactive Code Cells",
    "section": "Empty Code Cell",
    "text": "Empty Code Cell\nDefine an empty code cell by simply leaving it blank.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Getting Started",
      "Exploring Interactive Code Cells"
    ]
  },
  {
    "objectID": "qwebr-code-cell-demos.html#pre-rendered-code-cell",
    "href": "qwebr-code-cell-demos.html#pre-rendered-code-cell",
    "title": "Exploring Interactive Code Cells",
    "section": "Pre-rendered Code Cell",
    "text": "Pre-rendered Code Cell\nAny code using the usual {r} tag will be executed, and its output saved, just as if you were rendering a Quarto document without the webR extension:\n\nmessage(\"Hello!\")\n\nHello!",
    "crumbs": [
      "Getting Started",
      "Exploring Interactive Code Cells"
    ]
  },
  {
    "objectID": "qwebr-internal-cell.html",
    "href": "qwebr-internal-cell.html",
    "title": "Hiding and Executing Code",
    "section": "",
    "text": "In quarto-webr, you have the ability to execute code cells without displaying the code or its output. This feature can be particularly useful for preloading variables, loading datasets, creating visualizations, or checking student solutions without revealing the code to end users.",
    "crumbs": [
      "Getting Started",
      "Hiding and Executing Code"
    ]
  },
  {
    "objectID": "qwebr-internal-cell.html#setup---hidden-evaluation-and-output",
    "href": "qwebr-internal-cell.html#setup---hidden-evaluation-and-output",
    "title": "Hiding and Executing Code",
    "section": "“setup” - Hidden Evaluation and Output",
    "text": "“setup” - Hidden Evaluation and Output\nYou can create hidden setup code cells within your document using the special comment #| context: setup. The code within these cells executes discreetly in the background without displaying the code or its output.\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: setup\nmeaning_of_life = 42\n```\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nOnce a context:setup is done running, the visual indicator will be removed from the document.\n\n\nIn the example above, we’ve pre-loaded the meaning_of_life variable with a value of 42. If you proceed to run the subsequent code cell, you’ll observe the value of meaning_of_life being displayed as 42.\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: interactive\n#| autorun: true\nmeaning_of_life\n```\n\n\n\nBy incorporating the setup hidden code cell for data loading and preprocessing, you enhance the user experience by providing them with an accessible and interactive environment for working with the data while maintaining a clutter-free and organized document structure.",
    "crumbs": [
      "Getting Started",
      "Hiding and Executing Code"
    ]
  },
  {
    "objectID": "qwebr-internal-cell.html#output---hidden-evaluation-with-results-shown",
    "href": "qwebr-internal-cell.html#output---hidden-evaluation-with-results-shown",
    "title": "Hiding and Executing Code",
    "section": "“output” - Hidden Evaluation with Results Shown",
    "text": "“output” - Hidden Evaluation with Results Shown\nYou also have the choice of crafting an output-only code cell within your quarto-webr document, achieved by incorporating the special comment #| context: output. The code inside this cell executes quietly in the background and reveals its output when the execution is complete. The output can take the form of either text or graphics.\nFor instance, the following code cell suppresses the creation of the matrix; but, displays the end result.\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: output\nmat2x2 &lt;- matrix(c(1, 2, 3, 4), nrow = 2)\nmat2x2\n```\n\n\n\nIn the next example, the code used to generate the graph is suppressed.\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: output\nplot(\n  mpg ~ wt,\n  data = mtcars,\n  col = \"blue\", \n  xlab = \"Miles/(US) gallon\",\n  ylab = \"Weight (1000 lbs)\",\n  main = \"Miles per Gallon and Weight of Cars\",\n  sub = \"Source: 1974 Motor Trend US magazine.\"\n)\n```\n\n\n\nBy using output code cells, you maintain a streamlined and comprehensible document, focusing on the outcome rather than the intricate data processing steps. This approach will enhance the readability and clarity of your content, making it more accessible and informative to your audience.",
    "crumbs": [
      "Getting Started",
      "Hiding and Executing Code"
    ]
  },
  {
    "objectID": "qwebr-internal-cell.html#hidden-loading-of-a-dataset",
    "href": "qwebr-internal-cell.html#hidden-loading-of-a-dataset",
    "title": "Hiding and Executing Code",
    "section": "Hidden Loading of a Dataset",
    "text": "Hidden Loading of a Dataset\nThe setup hidden code cell is a powerful tool for seamlessly pre-loading and preprocessing an entire dataset within your quarto-webr document. This capability enables users to work directly with the loaded data without any distracting code or output.\nIn the following example, we demonstrate the process of loading and preprocessing a dataset. First, we download the dataset from an external source and save it as 'penguins.csv' in the virtual webR file system. Next, we read the data into a data frame named df_penguins. All these operations occur silently in the background, ensuring that your document remains clean and focused on the data’s application.\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: setup\n\n# Download a dataset\ndownload.file(\n  'https://raw.githubusercontent.com/coatless/raw-data/main/penguins.csv',\n  'penguins.csv'\n)\n\ndf_penguins = read.csv(\"penguins.csv\")\n```\n\n\n\nNext, let’s setup an interactive cell that can be modified and run.\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: interactive\n# Display the head of the data\nhead(df_penguins)\n```\n\n\n\nIn this case, we may want to encourage the “Run code” functionality by having the interactive cell automatically run during document initialization by using #| autorun: true.\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: interactive\n#| autorun: true\n# Display the head of the data\nhead(df_penguins)\n```\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf the setup code relies on specific R packages, we strongly recommend specifying the required packages in the document’s YAML. This approach informs users that the webpage is not yet ready and communicates a clear status update at the top. For example:\n---\nwebr:\n  packages: ['ggplot2', 'dplyr']\n---\nLearn more on the Using R Packages documentation page.",
    "crumbs": [
      "Getting Started",
      "Hiding and Executing Code"
    ]
  },
  {
    "objectID": "qwebr-internal-cell.html#hidden-summarization",
    "href": "qwebr-internal-cell.html#hidden-summarization",
    "title": "Hiding and Executing Code",
    "section": "Hidden Summarization",
    "text": "Hidden Summarization\nYou can use the output hidden code cell to generate summarized information about retrieved or manipulated data. This powerful feature enables you to process and summarize data without displaying the intermediary steps or code, keeping your document clean and focused on the results.\nFor instance, in the code cell below, we transform the mtcars dataset, converting variables, and then promptly produce a summary of the modified data.\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: output\nmtcars2 &lt;- within(mtcars, {\n   vs &lt;- factor(vs, labels = c(\"V\", \"S\"))\n   am &lt;- factor(am, labels = c(\"automatic\", \"manual\"))\n   cyl  &lt;- ordered(cyl)\n   gear &lt;- ordered(gear)\n   carb &lt;- ordered(carb)\n})\nsummary(mtcars2)\n```",
    "crumbs": [
      "Getting Started",
      "Hiding and Executing Code"
    ]
  },
  {
    "objectID": "qwebr-internal-cell.html#hidden-solution-checking-of-student-work",
    "href": "qwebr-internal-cell.html#hidden-solution-checking-of-student-work",
    "title": "Hiding and Executing Code",
    "section": "Hidden Solution Checking of Student Work",
    "text": "Hidden Solution Checking of Student Work\n\n\n\n\n\n\nWarning\n\n\n\nPlease be aware that any solution written in a webR hidden code cell can be obtained by viewing the document’s HTML source code. It is not recommended for formal assessments such as exams, quizzes, or homework.\n\n\nIn webR, you can check student answers by providing an answer key and a comparison function within the document.\nFor instance, you can create a solution data frame like this:\n```{webr-r}\n#| context: setup\nanswer_frame &lt;- data.frame(\n  problem = c(\"1a\", \"1b\", \"2\"),\n  answer = c(10, 2, 3/16),\n  tol = c(0.001, 0, 1/32)\n)\n```\nNext, define an internal check function:\n```{webr-r}\n#| context: setup\ncheck &lt;- function(problem, answer) {\n  aframe &lt;- answer_frame\n  if(!problem %in% aframe$problem) {\n    error_msg &lt;- paste0(\"Please enter a valid problem. (\", paste0(aframe$problem, collapse = \",\"), \")\")\n    stop(error_msg)\n  }\n\n  solution &lt;- aframe[which(aframe$problem == problem), \"answer\"]\n\n  ifelse(\n    all.equal(answer, solution, tolerance = 0.001) == TRUE,\n    \"Correct! Well done.\",\n    \"Incorrect! Good attempt. Let's try again?\"\n  )\n}\n```\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nStudents can then compare their answers to the answer key using the check() function.\nFor example, consider the question:\n\nWhat is 9 + 1?\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Getting Started",
      "Hiding and Executing Code"
    ]
  },
  {
    "objectID": "demos/qwebr-long-running-execution-interactive-locking.html",
    "href": "demos/qwebr-long-running-execution-interactive-locking.html",
    "title": "Demo: Locking interactive code",
    "section": "",
    "text": "Important\n\n\n\nWe’ve slowed down each cell’s execution time by 5 seconds by adding Sys.sleep() to emphasize code cell locking.\n\n\n\nSay Hi\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nCalculate\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nHelp!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "demos/qwebr-setting-options-in-document-yaml.html",
    "href": "demos/qwebr-setting-options-in-document-yaml.html",
    "title": "Demo: Setting Options in Document Header",
    "section": "",
    "text": "Demo\nwebR-enabled code cells are established by using {webr-r} in a Quarto HTML document.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "demos/qwebr-auto-run.html",
    "href": "demos/qwebr-auto-run.html",
    "title": "Demo: Autorun Interactive Code Cells",
    "section": "",
    "text": "This demo showcases the functionality of automatically executing code within an interactive area, revealing output before any modifications can be made to the document.\n\n\nThe autorun option works in tandem with the interactive context, enabling a non-interactive execution of code within the editable code area before any changes can be made to the area.\nTo illustrate, let’s imagine a situation where you are prompted to modify the statement “Hello ___!” In the default view of an interactive cell, the results are not initially displayed.\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: interactive\n# Write your name here by replace ___\nname &lt;- \"_____\"\nprint(paste0(\"Hello, \", name, \"!\"))\n```\n\n\n\nBy including #| autorun: true, we enable the display of results when the document first loads. Revisiting the previous example, the editable code area now presents a distinct output, prompting the user to “Fill in the blanks”:\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: interactive\n#| autorun: true\n# Write your name here by replace ___\nname &lt;- \"_____\"\nprint(paste0(\"Hello, \", name, \"!\"))\n```\n\n\n\n\n\n\nOne key use of the non-interactive areas is to generate a targeted outcome and have iterative attempts to reach the desired output.\nFor example, consider the gapminder data set.\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: output\ndata(\"gapminder\", package = \"gapminder\")\nhead(gapminder)\n```\n\n\n\nHow can we use gapminder data to re-create the following ggplot2 graph?\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: output\n#| fig-width: 5\n#| fig-height: 3\n#| out-width: 500px\nggplot(gapminder, aes(lifeExp)) + \n geom_density(aes(fill=continent), alpha=1/4) + theme_bw() \n```\n\n\n\nWe’ve provided a code area for you to explore creating different kinds of graphs and have already run its contents!\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: interactive\n#| autorun: true\n#| fig-width: 5\n#| fig-height: 3\n#| out-width: 500px\nggplot(gapminder, aes(lifeExp)) + \n  theme_bw() \n```"
  },
  {
    "objectID": "demos/qwebr-auto-run.html#autorun-option",
    "href": "demos/qwebr-auto-run.html#autorun-option",
    "title": "Demo: Autorun Interactive Code Cells",
    "section": "",
    "text": "The autorun option works in tandem with the interactive context, enabling a non-interactive execution of code within the editable code area before any changes can be made to the area.\nTo illustrate, let’s imagine a situation where you are prompted to modify the statement “Hello ___!” In the default view of an interactive cell, the results are not initially displayed.\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: interactive\n# Write your name here by replace ___\nname &lt;- \"_____\"\nprint(paste0(\"Hello, \", name, \"!\"))\n```\n\n\n\nBy including #| autorun: true, we enable the display of results when the document first loads. Revisiting the previous example, the editable code area now presents a distinct output, prompting the user to “Fill in the blanks”:\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: interactive\n#| autorun: true\n# Write your name here by replace ___\nname &lt;- \"_____\"\nprint(paste0(\"Hello, \", name, \"!\"))\n```"
  },
  {
    "objectID": "demos/qwebr-auto-run.html#target-practice",
    "href": "demos/qwebr-auto-run.html#target-practice",
    "title": "Demo: Autorun Interactive Code Cells",
    "section": "",
    "text": "One key use of the non-interactive areas is to generate a targeted outcome and have iterative attempts to reach the desired output.\nFor example, consider the gapminder data set.\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: output\ndata(\"gapminder\", package = \"gapminder\")\nhead(gapminder)\n```\n\n\n\nHow can we use gapminder data to re-create the following ggplot2 graph?\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: output\n#| fig-width: 5\n#| fig-height: 3\n#| out-width: 500px\nggplot(gapminder, aes(lifeExp)) + \n geom_density(aes(fill=continent), alpha=1/4) + theme_bw() \n```\n\n\n\nWe’ve provided a code area for you to explore creating different kinds of graphs and have already run its contents!\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: interactive\n#| autorun: true\n#| fig-width: 5\n#| fig-height: 3\n#| out-width: 500px\nggplot(gapminder, aes(lifeExp)) + \n  theme_bw() \n```"
  },
  {
    "objectID": "demos/qwebr-custom-repository.html",
    "href": "demos/qwebr-custom-repository.html",
    "title": "Demo: Custom R WASM Package Repository",
    "section": "",
    "text": "In this example, we add a custom R WASM Package repository that contains demorwasmbinary R WASM package. The package is not available from the main webR repository.\nThe source of the custom repository can be viewed here and the rendered website using {pkgdown} can be viewed here. Another approach would be to use r-universe.dev to automatically build and supply R WASM package binaries.\n\n\nTo automatically have the package installed and loaded like normal, please specify the name of the package in packages and where the custom repository is in repos.\nFor this example, we would specify:\n---\nwebr:\n  packages: ['demorwasmbinary']\n  repos:\n    - https://tutorials.thecoatlessprofessor.com/webr-unified-gh-workflow/\n---\n\n\n\n\n\n\nNote\n\n\n\nThis version will ensure that any webr-r code cells inside of the document are not run prior to the package being present.\n\n\n\n\n\nAlternatively, we can avoid registering a repository and directly install from a custom repository by using webr::install(pkg, repos = \"...\").\nFor example, we can re-create the above statement using:\n```{webr-r}\n# context: setup\n# Install the binary from a custom repository\nwebr::install(\n  \"demorwasmbinary\", \n  repos = \"https://tutorials.thecoatlessprofessor.com/webr-unified-gh-workflow/\"\n)\n\nlibrary(\"demorwasmbinary\")\n```"
  },
  {
    "objectID": "demos/qwebr-custom-repository.html#specify-repos-key",
    "href": "demos/qwebr-custom-repository.html#specify-repos-key",
    "title": "Demo: Custom R WASM Package Repository",
    "section": "",
    "text": "To automatically have the package installed and loaded like normal, please specify the name of the package in packages and where the custom repository is in repos.\nFor this example, we would specify:\n---\nwebr:\n  packages: ['demorwasmbinary']\n  repos:\n    - https://tutorials.thecoatlessprofessor.com/webr-unified-gh-workflow/\n---\n\n\n\n\n\n\nNote\n\n\n\nThis version will ensure that any webr-r code cells inside of the document are not run prior to the package being present."
  },
  {
    "objectID": "demos/qwebr-custom-repository.html#specify-repos-in-webrinstall",
    "href": "demos/qwebr-custom-repository.html#specify-repos-in-webrinstall",
    "title": "Demo: Custom R WASM Package Repository",
    "section": "",
    "text": "Alternatively, we can avoid registering a repository and directly install from a custom repository by using webr::install(pkg, repos = \"...\").\nFor example, we can re-create the above statement using:\n```{webr-r}\n# context: setup\n# Install the binary from a custom repository\nwebr::install(\n  \"demorwasmbinary\", \n  repos = \"https://tutorials.thecoatlessprofessor.com/webr-unified-gh-workflow/\"\n)\n\nlibrary(\"demorwasmbinary\")\n```"
  },
  {
    "objectID": "demos/qwebr-code-cell-options.html",
    "href": "demos/qwebr-code-cell-options.html",
    "title": "Demo: Initial Code Cell Option Support",
    "section": "",
    "text": "In this document, we will explore and demonstrate the various cell options available in {webr-r} code blocks. These options allow you to customize the behavior and appearance of your code outputs. These options can only be set during the authoring stage of the document.\n\n\nThe context option specifies how the cell should operate on the page. Let’s use it to create an interactive code editor:\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: interactive\n\n# Write your name here by replace ___\nname &lt;- \"_____\"\nprint(paste0(\"Hello, \", name, \"!\"))\n```\n\n\n\nIn this code block, the context: interactive option is applied, allowing users to interactively input their name.\nNext, let’s use the context: setup option to create a data set that can be used by later cells.\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: setup\n \n# Generating a simple table\ndata &lt;- data.frame(\n  Name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  Age = c(25, 30, 22)\n)\n```\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nOnce a context:setup is done running, the visual indicator will be removed from the document.\n\n\nIn a later block, we’ll see a context: output that will only display the results.\n\n\n\nThe results option controls how text results are displayed. Let’s use it to display raw text output:\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: interactive\n#| results: asis\nknitr::kable(data, \"html\")\n```\n\n\n\nIn the above code block, the results: asis option is used to display the raw text output of the data dataframe.\nIf we use results: markup, then we’ll end up seeing the HTML output:\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: interactive\n#| results: markup\n\nknitr::kable(data, \"html\")\n```\n\n\n\n\n\n\nThe fig-width and fig-height options control the width and height of the plot generated in the code block. Let’s use it to create a plot with a specific width:\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: output\n#| fig-width: 6\n#| fig-height: 6\n\n# Generating a bar plot with a specific width\ntinyplot::tinyplot(\n  ~ Petal.Length | Species,\n  data = iris,\n  type = \"density\",\n  palette = \"dark\", fill = \"by\",\n  grid = TRUE,\n  main = \"Distribution of petal lengths by species\"\n)\n```\n\n\n\nHere, the fig-width: 6 and fig-height: 6 option is utilized to set the width of the bar plot.\nIn comparison, we have the default option of 7:\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: output\n\ntinyplot::tinyplot(\n  ~ Petal.Length | Species,\n  data = iris,\n  type = \"density\",\n  palette = \"dark\", fill = \"by\",\n  grid = TRUE,\n  main = \"Distribution of petal lengths by species\"\n)\n```\n\n\n\n\n\n\nThe out-width and out-height options control physical space the plot will reside in. Let’s revisit our previous example and constrain the output area by specifying out-width: 500px and out-height: 500px.\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: output\n#| fig-width: 5\n#| fig-height: 5\n#| out-width: 500px\n#| out-height: 400px\ntinyplot::tinyplot(\n  ~ Petal.Length | Species,\n  data = iris,\n  type = \"density\",\n  palette = \"dark\", fill = \"by\",\n  grid = TRUE,\n  main = \"Distribution of petal lengths by species\"\n)\n```\n\n\n\n\n\n\nThese examples demonstrate the versatility of {webr-r} cell options in customizing code block behavior and output. By incorporating these options into your documents, you can enhance the interactivity and visual presentation of your R code.\nFeel free to experiment with different combinations of these options to suit your specific needs!"
  },
  {
    "objectID": "demos/qwebr-code-cell-options.html#context-option",
    "href": "demos/qwebr-code-cell-options.html#context-option",
    "title": "Demo: Initial Code Cell Option Support",
    "section": "",
    "text": "The context option specifies how the cell should operate on the page. Let’s use it to create an interactive code editor:\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: interactive\n\n# Write your name here by replace ___\nname &lt;- \"_____\"\nprint(paste0(\"Hello, \", name, \"!\"))\n```\n\n\n\nIn this code block, the context: interactive option is applied, allowing users to interactively input their name.\nNext, let’s use the context: setup option to create a data set that can be used by later cells.\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: setup\n \n# Generating a simple table\ndata &lt;- data.frame(\n  Name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  Age = c(25, 30, 22)\n)\n```\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nOnce a context:setup is done running, the visual indicator will be removed from the document.\n\n\nIn a later block, we’ll see a context: output that will only display the results."
  },
  {
    "objectID": "demos/qwebr-code-cell-options.html#results-option",
    "href": "demos/qwebr-code-cell-options.html#results-option",
    "title": "Demo: Initial Code Cell Option Support",
    "section": "",
    "text": "The results option controls how text results are displayed. Let’s use it to display raw text output:\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: interactive\n#| results: asis\nknitr::kable(data, \"html\")\n```\n\n\n\nIn the above code block, the results: asis option is used to display the raw text output of the data dataframe.\nIf we use results: markup, then we’ll end up seeing the HTML output:\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: interactive\n#| results: markup\n\nknitr::kable(data, \"html\")\n```"
  },
  {
    "objectID": "demos/qwebr-code-cell-options.html#fig-width-and-fig-height-option",
    "href": "demos/qwebr-code-cell-options.html#fig-width-and-fig-height-option",
    "title": "Demo: Initial Code Cell Option Support",
    "section": "",
    "text": "The fig-width and fig-height options control the width and height of the plot generated in the code block. Let’s use it to create a plot with a specific width:\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: output\n#| fig-width: 6\n#| fig-height: 6\n\n# Generating a bar plot with a specific width\ntinyplot::tinyplot(\n  ~ Petal.Length | Species,\n  data = iris,\n  type = \"density\",\n  palette = \"dark\", fill = \"by\",\n  grid = TRUE,\n  main = \"Distribution of petal lengths by species\"\n)\n```\n\n\n\nHere, the fig-width: 6 and fig-height: 6 option is utilized to set the width of the bar plot.\nIn comparison, we have the default option of 7:\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: output\n\ntinyplot::tinyplot(\n  ~ Petal.Length | Species,\n  data = iris,\n  type = \"density\",\n  palette = \"dark\", fill = \"by\",\n  grid = TRUE,\n  main = \"Distribution of petal lengths by species\"\n)\n```"
  },
  {
    "objectID": "demos/qwebr-code-cell-options.html#out-width-and-out-height-option",
    "href": "demos/qwebr-code-cell-options.html#out-width-and-out-height-option",
    "title": "Demo: Initial Code Cell Option Support",
    "section": "",
    "text": "The out-width and out-height options control physical space the plot will reside in. Let’s revisit our previous example and constrain the output area by specifying out-width: 500px and out-height: 500px.\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: output\n#| fig-width: 5\n#| fig-height: 5\n#| out-width: 500px\n#| out-height: 400px\ntinyplot::tinyplot(\n  ~ Petal.Length | Species,\n  data = iris,\n  type = \"density\",\n  palette = \"dark\", fill = \"by\",\n  grid = TRUE,\n  main = \"Distribution of petal lengths by species\"\n)\n```"
  },
  {
    "objectID": "demos/qwebr-code-cell-options.html#conclusion",
    "href": "demos/qwebr-code-cell-options.html#conclusion",
    "title": "Demo: Initial Code Cell Option Support",
    "section": "",
    "text": "These examples demonstrate the versatility of {webr-r} cell options in customizing code block behavior and output. By incorporating these options into your documents, you can enhance the interactivity and visual presentation of your R code.\nFeel free to experiment with different combinations of these options to suit your specific needs!"
  },
  {
    "objectID": "qwebr-extension-website.html",
    "href": "qwebr-extension-website.html",
    "title": "Extension Website",
    "section": "",
    "text": "Initializing the Project\nTo get started, follow these steps to set up the Quarto extension website project:\n\nCreate a new directory named docs/ within your repository using the following command:\nmkdir docs && cd $_\nInitialize a Quarto website project by running the following command:\nquarto create project website .\n\n\n\nIncorporating the Extension\nTo seamlessly integrate the extension into your project, you’ll need to create a symbolic link to the _extensions folder containing the development version of the extension. This approach helps you avoid maintaining a duplicate copy of the extension in your Git repository history.\nFollow these steps:\n\nNavigate to the docs/ directory in your project.\nCreate a symbolic link to the _extensions folder using the following command:\nln -s ../_extensions _extensions",
    "crumbs": [
      "Extra Information",
      "Extension Website Notes"
    ]
  },
  {
    "objectID": "qwebr-meta-options.html",
    "href": "qwebr-meta-options.html",
    "title": "Customization Options",
    "section": "",
    "text": "The quarto-webr extension empowers you to tailor your webR environment to meet your unique requirements. By configuring various options in your document’s YAML header or _quarto.yml file, you can structure the webR experience on a per-page or per-project basis. Below, we explore these customization options and how to implement them.",
    "crumbs": [
      "Options Reference",
      "Document Options"
    ]
  },
  {
    "objectID": "qwebr-meta-options.html#document-yaml",
    "href": "qwebr-meta-options.html#document-yaml",
    "title": "Customization Options",
    "section": "Document YAML",
    "text": "Document YAML\nTo fine-tune webR to the specific needs of a document, place inside your document’s YAML header the webr key. Specifying options this way allows webR to be setup with unique options confined to only that document.\n---\ntitle: webR in Quarto HTML Documents\nformat: html\nengine: knitr\nwebr: \n  show-startup-message: false    # Disable displaying status of webR initialization\n  packages: ['ggplot2', 'dplyr'] # Install R packages on document open\nfilters:\n  - webr\n---",
    "crumbs": [
      "Options Reference",
      "Document Options"
    ]
  },
  {
    "objectID": "qwebr-meta-options.html#global-configuration",
    "href": "qwebr-meta-options.html#global-configuration",
    "title": "Customization Options",
    "section": "Global Configuration",
    "text": "Global Configuration\nIf you have multiple pages that use webR, we suggest setting global options inside of the _quarto.yml file. This option is appropriate for Websites, Blogs, or Books. For instance, if you have a book project, the _quarto.yml should look like:\nproject:\n  type: book\n\nbook:\n  title: \"Sample quarto-webr Book Project\"\n  # ... more options\n\n# Set default options for every bookpage that may or may not include webR.\nwebr: \n  show-startup-message: false    # Disable displaying status of webR initialization\n  packages: ['ggplot2', 'dplyr'] # Install R packages on document open\n\n# Attach webR extension for the project\nfilters:\n  - webr\n\n\n\n\n\n\nNote\n\n\n\nIf a webR code cell is not present on a website, blog, or book page, then the quarto-webr extension will not setup webR on the page.\n\n\nYou can see full examples of setting a global option under the Deployment Templates page.",
    "crumbs": [
      "Options Reference",
      "Document Options"
    ]
  },
  {
    "objectID": "qwebr-meta-options.html#webr-options",
    "href": "qwebr-meta-options.html#webr-options",
    "title": "Customization Options",
    "section": "webR options",
    "text": "webR options\nBy specifying various WebROptions options in the document YAML, you can create a personalized webR experience\n\nhome-dir\n\nDescription: Set the WebAssembly user’s home directory and initial working directory.\nDefault Value: '/home/web_user'\nDocumentation: homeDir\n\n\n\nbase-url\n\nDescription: Define the base URL for downloading R WebAssembly binaries.\nDefault Value: 'https://webr.r-wasm.org/[version]/'\nDocumentation: baseUrl\n\n\n\nchannel-type\n\nDescription: Specify the communication channel type to interact with webR.\nDefault Value: \"automatic\" (0)\nPossible Values: \"automatic\" (0), \"shared-array-buffer\" (1), \"service-worker\" (2), \"post-message\" (3).\nDocumentation: channelType\n\n\n\n\n\n\n\nNote\n\n\n\nWe recommend using the \"post-message\" channel when GitHub Pages or Quarto Pub serve the webR-enabled document. Note that this option prevents the interruption of running R code and the use of nested R REPLs (readline(), menu(), browser(), etc.). For more details, please see Communication Channels\n\n\n\n\nservice-worker-url\n\nDescription: Set the base URL for loading JavaScript worker scripts when using the ServiceWorker communication channel mode.\nDefault Value: ''\nDocumentation: serviceWorkerUrl",
    "crumbs": [
      "Options Reference",
      "Document Options"
    ]
  },
  {
    "objectID": "qwebr-meta-options.html#native-extension-options",
    "href": "qwebr-meta-options.html#native-extension-options",
    "title": "Customization Options",
    "section": "Native Extension Options",
    "text": "Native Extension Options\nThe extension also provides native options that affect its behavior:\n\nshow-startup-message\n\nDescription: Controls the display of the WebR initialization state in the document header.\nDefault Value: true\nDemo Document: Setting Options in Document Header\n\n\n\nshow-header-message\n\nDescription: Determines whether COOP and COEP headers are in use for faster page loads.\nDefault Value: false\nDemo Document: Setting Options in Document Header\n\n\n\ncell-options\n\nDescription: Modifies default cell options for {webr-r} cells.\nDefault Value: Please see Code Cell Options for individual cell option defaults.\nDemo Document: Set Global Cell Options\nExample:\n\nwebr:\n  cell-options:\n    autorun: true\n    fig-height: 400\n    fig-width: 300\nThis modifies the default cell options for autorun, fig-width, and fig-height for all cells in the document.\n\n\nrepos\n\nDescription: Specify the repository locations to search for R packages when trying to install them in array form. Regardless of values specified, we will always conclude by checking to see if the package is present in the main webR repository: https://repo.r-wasm.org/.\nDefault Value: ['https://repo.r-wasm.org/']\nDemo Document: Custom R WASM Package Repository\nExample: ['https://username.r-universe.dev', 'https://username.github.io/reponame'] will cause webR to first look for the package on r-universe.dev, then move to looking at the package on GitHub Pages, before finally landing on the official repository.\n\n\n\npackages\n\nDescription: Specifies R packages to install automatically when the document opens.\nDefault Value: []\nDemo Document: Setting Options in Document Header\nExample: ['ggplot2', 'dplyr'] will cause ggplot2 and dplyr to be installed.\n\n\n\nautoload-packages\n\nDescription: The autoload-packages option allows you to control whether R packages specified in the packages document option will be automatically loaded using library() calls when the document opens. By default, this option is set to true, meaning that packages listed in the packages option will be automatically loaded. If you set it to false, you will need to include a code cell with library(package) function calls for each package in packages.\nDefault Value: true\nDemo Document: Setting Options in Document Header",
    "crumbs": [
      "Options Reference",
      "Document Options"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Greetings from quarto-webr Wonderland!",
    "section": "",
    "text": "Welcome to the documentation portal for the quarto-webr extension – your key to unlocking the endless possibilities of webR within various Quarto formats, including HTML, RevealJS, Websites, Blogs, and Books.\nReady for an exciting journey into the world of webR’s interactive code cells? Click the “Run Code” button below to experience it firsthand:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAt its core, the quarto-webr extension is designed to empower you to run R code directly in your web browser using familiar reporting tools, all without the need for an external R server. Moreover, the extension abstracts away the need to know HTML or JavaScript to use webR. However, it’s worth noting that you can also choose to unlock the full potential of webR and create more complex applications independently by directly using webR’s JavaScript API, granting you unparalleled freedom to harness the power of R in innovative ways.\nWith this in mind, let’s dive in and kickstart your journey with interactive code cells by creating our very first webR-powered Quarto document or exploring some examples!\n\n\n\n\n\n\nImportant\n\n\n\nThis Quarto extension is open source software and is not affiliated with Posit, Quarto, or webR. The extension is at best a community effort to simplify the integration of webR inside of Quarto generated documents."
  },
  {
    "objectID": "qwebr-faq.html",
    "href": "qwebr-faq.html",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "Welcome to our Frequently Asked Questions (FAQ) page, your go-to resource for finding answers to common queries about the quarto-webr extension. If you can’t find the answer you’re looking for, don’t hesitate to reach out to our community for additional support by opening a question or a bug report on the issue tracker.\n\nStability and Long Term Support\n\nQ. Would you say the quarto-webr extension API is stable? Thinking about starting to convert course notes and wondering where the project is in terms of stability.\n\nYes, the quarto-webr extension API can be considered stable for most practical purposes. It has undergone significant development and testing to ensure that it functions reliably and consistently within the Quarto framework. You can confidently start converting your course notes and materials using this extension.\nHowever, it’s important to keep in mind a few considerations:\n\nDependency on Quarto and webR projects: The quarto-webr extension relies on the main webR project for its core functionality. While we actively maintain the quarto-webr extension and aim to keep it compatible with the latest versions of Quarto and webR, we cannot control what happens upstream at either project. Changes or updates to either project may occasionally require adjustments in the extension. For the most part, these adjustments will be largely hidden.\nVersion compatibility: It’s important to note that the version of the R client and R packages that is downloaded for webR execution may affect your materials. It’s advisable to periodically review and update your teaching materials, especially when major changes occur in R version or R package contents, just as before.\nStart with a small set: When converting your course materials, it’s a good practice to start with a small set of materials as a pilot. This allows you to familiarize yourself with the extension’s functionality and raise/address any specific issues that may arise during the conversion process. Once you are comfortable with the workflow and have tested your materials, you should proceed with converting the rest of your course content.\n\n\n\nImproving Performance\n\n\nWhat are your plans, if any, for scaling webR to handle complex content faster?\n\n\nFor handling complex content, we recommend setting the channel-type option to the 'shared-array-buffer', which can significantly speed up its execution. This environment requires the proper configuration of HTTP headers for Cross-Origin Embedder Policy (COEP) and Cross-Origin Opener Policy (COOP). By setting these headers correctly, you can already achieve notable speed improvements when working with webR.\nHowever, for further enhancements and speed optimizations beyond what the COEP and COOP headers provide, we recommend keeping an eye on the main webR project’s documentation. The core webR project continuously works on improving performance and scalability, so any future advancements in handling complex content faster will likely originate from their developments.\n\n\nwebR Limitations\n\nQ. I noticed that built in docs with ? don’t work in webR. Are there any other known issues? How long to feature parity?\n\nRegarding feature parity with the main webR project, it’s important to understand that quarto-webr inherits the same limitations and capabilities as the core webR technology. Efforts to address these limitations and bring feature parity will depend on the ongoing development of webR itself and the evolution of WebAssembly and web browser capabilities. While there may be progress in mitigating some of these limitations over time, achieving complete feature parity may be a complex and ongoing process. In the case of help documentation, we added support in quarto-webr v0.3.7.\nThe known limitations at this time are:\n\nPackage Installation: Installing packages from source within webR is not currently supported. This limitation is unlikely to change in the near future as it would require a complete C and Fortran compiler toolchain to run within the browser. As a result, the only supported way to install R packages in webR is by providing pre-compiled WebAssembly binaries.\nGraphics Device: The webr::canvas() graphics device relies on OffscreenCanvas support in the web browser or JavaScript engine running webR. This means that a modern and up-to-date browser is required for plotting with this device. Older browsers without OffscreenCanvas support can still create plots using the Cairo-based graphics devices, such as png().\nCommunication Channels: webR relies on communication channels for interaction. Without cross-origin isolation, it falls back to the ServiceWorker communication channel, which may result in reduced performance or require additional setup.\nInterruption of Running Code: Interruption of running R code and the use of nested R REPLs (such as readline(), menu(), browser(), etc.) are unsupported when using the PostMessage communication channel.\nSystem Command: The system() command is not implemented in webR, which means that executing system-level commands from within R code or packages is not possible.\n\n\n\nState of Accessibility\n\nQ. You mentioned there has been some work on accessibility. I’m curious what the current state of accessibility is? What are the known issues?\n\nAccessibility is an important aspect of webR, and we are committed to ensuring that the tool is usable by individuals with disabilities. To address accessibility concerns, we have engaged the expertise of JooYoung Seo, an Assistant Professor in the School of Information Sciences (iSchool) at the University of Illinois Urbana-Champaign. JooYoung specializes in accessibility within Data Science and has been instrumental in conducting periodic accessibility reviews of webR.\nOne of the primary areas of focus has been making sure that screen readers can easily identify and interact with code cells on the page. This ensures that individuals with visual impairments can effectively use webR. While we’ve made significant strides in improving accessibility, we continue to work on addressing any known issues and enhancing the overall accessibility of the tool. We are committed to providing an inclusive and user-friendly experience for all users, and JooYoung’s expertise has been invaluable in this regard.\n\n\nPackage Usage\n\nQ. Does the use of R packages cause any issues for you when teaching content with webR and Quarto?\n\nWhen teaching content with webR and Quarto, the use of R packages is certainly supported. However, it’s important to be aware of a few considerations that can help ensure a smooth teaching experience.\nIn a typical R environment, packages are installed once and are available for subsequent sessions using library() or require(). In webR, packages are installed on each session. This means that each webR session starts with a clean slate, and packages need to be installed again for that specific session.\nTo optimize this process and avoid unnecessary downloads, it’s recommended to use the webr::install() function instead of the standard install.packages() function. webr::install() checks if a package is already installed and does not re-download it if it’s already available. This can significantly speed up the package installation process when working with webR and Quarto.\nOne way to simplify the teaching process and prevent students from working while packages are being installed is to use the built-in packages option in the document’s header. This option hides the installation process from students and ensures that the required packages are pre-installed when they access the document.\nFinally, it’s worth noting that the R packages available to webR may not always be the latest versions that you can get from CRAN (the Comprehensive R Archive Network). Therefore, it’s a good practice to check the package versions and ensure compatibility with your teaching materials.\n\n\nDebugging\n\nQ. How are error messages, etc. communicated in webr’s interface? Would it be easy for a student to debug without the tools that are available in the RStudio?\n\nError messages, warnings, and other diagnostic information are presented in the output of a quarto-webr interface, just like in a standard R environment. These messages appear directly below the code cell that generated them. While quarto-webr provides a user-friendly interface for working with R in a web browser, it does not offer advanced debugging tools like debug(), debugonce(), debuggingState(), or setBreakpoint(). Therefore, debugging in quarto-webr is primarily reliant on interpreting the error messages and warnings displayed in the output. For students familiar with RStudio’s debugging tools, transitioning to quarto-webr may require an adjustment to debugging practices. However, the clear presentation of error messages in the output makes it relatively straightforward for students to identify and address issues in their code.\n\n\nStyling\n\nQ. Is it possible to style the UI elements the quarto-webr extension add to your document? Do they get affected by styling/theme changes so things look coherent?\n\nCertainly! You have the flexibility to style the UI elements added by the quarto-webr extension to your document. For more details, please see Theming Elements.",
    "crumbs": [
      "Support",
      "FAQ"
    ]
  },
  {
    "objectID": "qwebr-communication-channels.html",
    "href": "qwebr-communication-channels.html",
    "title": "Communication Channels",
    "section": "",
    "text": "As you dive deeper into using webR, it’s crucial to grasp how webR manages communication between R and your web browser. Think of it as a conversation between two active workers or “threads”:\nNow, here’s why this separation is so important: webR’s special version of R can tackle complicated and time-consuming calculations without causing your web browser to freeze or become unresponsive when you’re on a web page that uses webR.\nImagine trying to watch a video online while your computer is running a heavy software update. Without separating them, your video might start buffering, freeze, or even crash. But by putting the update in the background (on a separate worker, like webR), your video can continue to play smoothly. It’s the same concept with webR and your web browser – keeping things running smoothly without hiccups.\nFor more details, please see the official webR documentation on Worker Communication and Serving Web Pages with webR.",
    "crumbs": [
      "Deployment",
      "Communication Channels"
    ]
  },
  {
    "objectID": "qwebr-communication-channels.html#specifying-how-webr-communicates",
    "href": "qwebr-communication-channels.html#specifying-how-webr-communicates",
    "title": "Communication Channels",
    "section": "Specifying How webR Communicates",
    "text": "Specifying How webR Communicates\nIn a Quarto document’s YAML header, you can tell webR which communication channel to use by setting the channel-type option. It’s like telling webR how you want it to talk with your web browser. For example, if you want to use the \"post-message\" channel, you can do it like this:\n---\ntitle: \"Setting Up webR to use the PostMessage Channel\"\nformat: html\nwebr:\n  channel-type: \"post-message\"\nfilters:\n- webr\n---",
    "crumbs": [
      "Deployment",
      "Communication Channels"
    ]
  },
  {
    "objectID": "qwebr-communication-channels.html#sec-automatic",
    "href": "qwebr-communication-channels.html#sec-automatic",
    "title": "Communication Channels",
    "section": "Using “automatic” for Communication (Default)",
    "text": "Using “automatic” for Communication (Default)\nBy default, the quarto-webr extension guides webR to use the \"automatic\" option for channel-type, if you don’t specify the channel-type in your document’s YAML header. Let’s break down how this default setting works:\n\nCommunication Attempts: webR will try two different communication channels in order:\n\nFirst, it attempts to establish a communication channel using \"shared-array-buffer\".\nIf that doesn’t work, it will then try to use \"post-message\".\n\nFallback Behavior: If both of these attempts are unsuccessful, webR code cells in your document will be shown in a deactivated state. This means they won’t run or execute any R code.\n\n\n\n\n\n\n\nNote\n\n\n\nIt’s important to note that the \"automatic\" option doesn’t try to use the \"service-worker\" option for communication.\n\n\nIn summary, when you leave the channel-type unspecified, webR will follow the \"automatic\" option, attempting to use \"shared-array-buffer\" and then \"post-message\". If both attempts fail, your webR code cells will be inactive.",
    "crumbs": [
      "Deployment",
      "Communication Channels"
    ]
  },
  {
    "objectID": "qwebr-communication-channels.html#sec-shared-array-buffer",
    "href": "qwebr-communication-channels.html#sec-shared-array-buffer",
    "title": "Communication Channels",
    "section": "Using “shared-array-buffer” for Communication",
    "text": "Using “shared-array-buffer” for Communication\nNow, let’s explore the \"shared-array-buffer\" option for communication. When you specify channel-type as \"shared-array-buffer\", webR aims to use something called SharedArrayBuffer. This choice, however, comes with some specific requirements and benefits:\nRequirements:\n\nYour web server needs to send web pages with webR using specific HTTP headers. This is to ensure that the page is cross-origin isolated. In simple terms, your server must be set up to allow this kind of communication otherwise webR will not work.\n\nBenefits:\n\nThe benefit of using this approach is that webR runs notably faster. It’s like giving webR a high-speed lane for its operations.\n\n\n\n\n\n\n\nNote\n\n\n\nIt’s important to note that the \"shared-array-buffer\" option isn’t currently available on platforms like GitHub Pages or Quarto Pub. If you’re using these services, we recommend using the channel-type: \"post-message\" option instead. There’s a possibility that GitHub Pages may offer the option to set the necessary headers in the future, as discussed here.\n\n\nTo help you set up the necessary headers for cross-origin isolation, we provide some guidance for both Netlify and nginx web server administrators:\nFor Netlify Configuration:\nIf you’re hosting your website with Netlify, you can add the following code to your netlify.toml configuration file:\n[[headers]]\n  for = \"/directory/with/webr/content/*\"\n\n  [headers.values]\n    Cross-Origin-Opener-Policy = \"same-origin\"\n    Cross-Origin-Embedder-Policy = \"require-corp\"\nFor nginx Web Server Administrators:\nIf you’re managing a server with nginx, you can use the add_header directive in your server’s configuration file, which is usually found at /etc/nginx/nginx.conf. Here’s an example:\nserver {\n  # Enable headers for the webr directory\n  location ^~ /directory/with/webr/content {\n    add_header \"Cross-Origin-Opener-Policy\" \"same-origin\";\n    add_header \"Cross-Origin-Embedder-Policy\" \"require-corp\";\n  }\n}\nBy following these instructions, you’ll ensure that your web server is set up to display web pages with a cross-origin isolated status, allowing you to use the \"shared-array-buffer\" option effectively.",
    "crumbs": [
      "Deployment",
      "Communication Channels"
    ]
  },
  {
    "objectID": "qwebr-communication-channels.html#sec-service-worker",
    "href": "qwebr-communication-channels.html#sec-service-worker",
    "title": "Communication Channels",
    "section": "Using “service-worker” for Communication",
    "text": "Using “service-worker” for Communication\nHere, we’ll dive into the \"service-worker\" option for communication.\n\n\n\n\n\n\nWarning\n\n\n\nThe \"service-worker\" option doesn’t work with Quarto Pub. If you’re hosting documents with Quarto Pub, please use the channel-type: \"post-message\" option instead. There’s an ongoing effort to address the service worker upload issue with the Quarto team, which you can track here.\n\n\nWhen you set channel-type to \"service-worker\", webR changes its communication channel to use the Service Worker API. This means you need two worker scripts, webr-worker.js and webr-serviceworker.js, hosted on the same website as the page using webR.\nHere’s what you need to ensure:\n1. Worker Scripts: The quarto-webr extension will automatically create and register these workers when your Quarto document is rendered.\n2. Directory Structure: Your initial directory structure should include these files:\n.\n├── _extensions/coatless/webr\n└── demo-quarto-webr.qmd\nAfter rendering the Quarto document with the \"service-worker\" option, your directory will look like this:\n.\n├── _extensions/coatless/webr\n├── demo-quarto-webr.qmd\n├── demo-quarto-webr.html  # Rendered document\n├── webr-serviceworker.js  # Service workers\n└── webr-worker.js\n3. Hosting: When hosting your rendered document, you need to make sure the rendered HTML document and the service worker files (webr-serviceworker.js and webr-worker.js) are present on the server. This is important for everything to work correctly:\n.\n├── demo-quarto-webr.html  # Rendered document\n├── webr-serviceworker.js  # Service workers\n└── webr-worker.js\nIf you want to change where the service workers are located, you can set the service-worker-url option in the document YAML. By default, the rendered document will search for the service workers in its current directory.\nIn a nutshell, the “service-worker” option is a powerful choice for communication with webR, but you need to ensure the correct setup and hosting to make it work smoothly.",
    "crumbs": [
      "Deployment",
      "Communication Channels"
    ]
  },
  {
    "objectID": "qwebr-communication-channels.html#sec-post-message",
    "href": "qwebr-communication-channels.html#sec-post-message",
    "title": "Communication Channels",
    "section": "Using “post-message” for Communication",
    "text": "Using “post-message” for Communication\nNow, let’s delve into the \"post-message\" option. This sets up a communication channel using something called Post Message. It’s a good choice when you can’t use cross-isolation or service workers. This option is simpler to set up and works in more places, like RStudio’s preview pane or the built-in browser in VSCode.\nHowever, there are some trade-offs. While it’s easier to get started, certain R features that need to pause and wait for input (like readline(), menu(), browser(), etc.) won’t work as expected. Instead, they’ll return empty values like \"\" or c('', ''). Also, you won’t have the option to stop or interrupt long-running R code. In those cases, you’ll need to refresh the page to regain control.\nFeel free to experiment with the \"post-message\" interface in this webR code cell:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Deployment",
      "Communication Channels"
    ]
  },
  {
    "objectID": "qwebr-theming.html",
    "href": "qwebr-theming.html",
    "title": "Theming Elements",
    "section": "",
    "text": "Note\n\n\n\nThis section of the documentation is tailored to those with a deeper understanding of web design. If you’re new to these concepts, don’t worry; you can still create fantastic documents using the quarto-webr extension. This part is for those who want to take their styling to the next level and have knowledge of HTML and CSS.\nOn this page, we delve into the world of web design to enhance the visual aesthetics and styling of web-based documents created with the Quarto-WebR extension. While prior knowledge of these topics is not mandatory for using the extension, a good understanding can empower you to create documents that effectively convey valuable insights and captivate your audience with a visually appealing design tailored to your preferences. Whether you want to seamlessly integrate your document with your personal brand or align it with your organization’s style guidelines, this page serves as your expert guide, leading you through the process of crafting a visually captivating and cohesive user experience. The focus here is on explaining the HTML structure and predefined CSS classes that will help you achieve the visual results you desire.",
    "crumbs": [
      "Deployment",
      "Theming Elements"
    ]
  },
  {
    "objectID": "qwebr-theming.html#css-class-and-id-identifiers",
    "href": "qwebr-theming.html#css-class-and-id-identifiers",
    "title": "Theming Elements",
    "section": "CSS Class and ID Identifiers",
    "text": "CSS Class and ID Identifiers\nTo effectively style web-based documents created with the extension, you’ll need to understand the unique id and class attributes associated with different content areas. There are two key areas to every Quarto document that uses the quarto-webr extension: header and code cells. The header is where status and debug information can be found whereas the code cell portion is where R code is actively run using webR.\nLet’s turn our attention to the document’s header. By default, the webR initialization state is displayed in the header. This can be turned off by setting the show-startup-message: false meta option..\n\nStatus Area: This represents the area we dynamic add to the document using JavaScript and stores the Status Title and Status Message\n\nid: #qwebr-status-message-area\n\nStatus Title: This element contains the header of the status text.\n\nid: #qwebr-status-message-title\n\nStatus Message: This element is updated with the document status updates.\n\nid: #qwebr-status-message-body\n\n\nWith this in mind, we next focus on improving how content is being displayed through code cells. There are two primary context types where code content is displayed to users:\n\nInteractive Area: This area encompasses the Code Editor, Code Output, and the Graph Output Area under the interactive context.\n\nid: #qwebr-interactive-area-{{ID}}\nclass: .qwebr-interactive-area\n\nNon-Interactive Area: This includes the Code Output and the Graph Output Area under the output context.\n\nid: #qwebr-noninteractive-area-{{ID}}\nclass: .qwebr-noninteractive-area\n\n\nWithin the interactive section, you’ll find elements that are displayed when users request results:\n\nRun Button: This button triggers the execution of your R code.\n\nid: #qwebr-button-run-{{ID}}\nclass: .qwebr-button-run\n\nConsole Area: This area contains the Code Editor and Code Output.\n\nid: #qwebr-console-area-{{ID}}\nclass: .qwebr-console-area\n\nCode Editor: You use this area to input and edit your R code.\n\nid: #qwebr-editor-{{ID}}\nclass: .qwebr-editor\n\n\nAcross both contexts, you’ll find shared output element classes and names:\n\nCode Output Area: This is where the results and output of your R code are displayed.\n\nid: #qwebr-output-code-area-{{ID}}\nclass: .qwebr-output-code-area\n\nCode Output Standard Output: Results from standard output (STDOUT) are stored here.\n\nid: #qwebr-output-code-stdout-{{ID}}\nclass: .qwebr-output-code-stdout\n\nCode Output Standard Error: Each line of results from standard error (STDERR) when running your code is stored here.\n\nid: #qwebr-output-code-stderr-{{ID}}\nclass: .qwebr-output-code-stderr\n\nGraph Output Area: Any graphical output of your R code is displayed in this area.\n\nid: #qwebr-output-graph-area-{{ID}}\nclass: .qwebr-output-graph-area\n\n\nThe {ID} in these identifiers represents the instance of the element on the page, whether it’s the first, second, or nth occurrence. You can customize their appearance by targeting the specific id or class attributes in your document’s CSS, or you can include a separate CSS file to align with your design preferences.",
    "crumbs": [
      "Deployment",
      "Theming Elements"
    ]
  },
  {
    "objectID": "qwebr-theming.html#css-html-structure",
    "href": "qwebr-theming.html#css-html-structure",
    "title": "Theming Elements",
    "section": "CSS & HTML Structure",
    "text": "CSS & HTML Structure\n\nInteractive Area Structure\n&lt;div id=\"qwebr-interactive-area-{{ID}}\" class=\"qwebr-interactive-area\"&gt;\n  &lt;button class=\"btn btn-default qwebr-button-run\" disabled type=\"button\" id=\"qwebr-button-run-{{ID}}\"&gt;&lt;/button&gt;\n  &lt;div id=\"qwebr-console-area-{{ID}}\" class=\"qwebr-interactive-area\"&gt;\n    &lt;div id=\"qwebr-editor-{{ID}}\" class=\"qwebr-editor\"&gt;\n      &lt;div class=\"monaco-editor ...\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div id=\"qwebr-output-code-area-{{ID}}\" class=\"qwebr-output-code-area\" aria-live=\"assertive\"&gt;\n      &lt;pre style=\"visibility: hidden\"&gt;&lt;/pre&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div id=\"qwebr-output-graph-area-{{ID}}\" class=\"qwebr-output-graph-area\"&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\nNon-interactive Area Structure\n&lt;div id=\"qwebr-noninteractive-area-{{ID}}\" class=\"qwebr-noninteractive-area\"&gt;\n   &lt;div id=\"qwebr-output-code-area-{{ID}}\" class=\"qwebr-output-code-area\" aria-live=\"assertive\"&gt;\n   &lt;pre style=\"visibility: hidden\"&gt;&lt;/pre&gt;\n   &lt;/div&gt;\n  &lt;div id=\"qwebr-output-graph-area-{{ID}}\" class=\"qwebr-output-graph-area\" aria-live=\"assertive\"&gt;\n  &lt;/div&gt;\n&lt;/div&gt;",
    "crumbs": [
      "Deployment",
      "Theming Elements"
    ]
  },
  {
    "objectID": "qwebr-theming.html#custom-embedded-styles",
    "href": "qwebr-theming.html#custom-embedded-styles",
    "title": "Theming Elements",
    "section": "Custom Embedded Styles",
    "text": "Custom Embedded Styles\nFor instance, you can insert new CSS elements by using the following method:\n```{=html}\n&lt;style&gt;\n.qwebr-code-output-stdout {background-color: powderblue;}\n.qwebr-button-run   {color: blue;}\n&lt;/style&gt;\n```",
    "crumbs": [
      "Deployment",
      "Theming Elements"
    ]
  },
  {
    "objectID": "qwebr-theming.html#external-theme-support",
    "href": "qwebr-theming.html#external-theme-support",
    "title": "Theming Elements",
    "section": "External Theme Support",
    "text": "External Theme Support\nFurthermore, if you are using a Quarto theme, you can make use of theme-specific styling options to ensure that these UI elements align with the overall theme of your document.\n---\ntitle: My post\nformat:\n  html: \n    theme:\n      - cosmo\n      - custom.scss\n---",
    "crumbs": [
      "Deployment",
      "Theming Elements"
    ]
  },
  {
    "objectID": "qwebr-theming.html#light-and-dark-mode",
    "href": "qwebr-theming.html#light-and-dark-mode",
    "title": "Theming Elements",
    "section": "Light and Dark Mode",
    "text": "Light and Dark Mode\nThe Monaco editor used by {quarto-webr} to power interactive code cells respects Quarto’s light and dark theme modes. To apply light and dark themes on a Quarto website, specify the following settings in the _quarto.yml configuration file:\ntheme:\n  light: cosmo\n  dark: darkly\nOnce set, a clickable toggle will appear on the page that can switch between these modes. This toggle modifies CSS classes on the body HTML element, adding .quarto-light for light mode and .quarto-dark for dark mode.\n\n\n\n\n\n\nNote\n\n\n\nThe Monaco editor’s theme automatically adjusts based on the document’s theme. It uses a light theme (vs) in light mode and a dark theme (vs-dark) in dark mode.\n\n\n\nRevealJS\nFor RevealJS, please note you may only specify a single RevealJS theme at a time. We recommend specifying either default (for light mode) or dark (for dark mode).\nformat:\n  revealjs:\n    theme: default",
    "crumbs": [
      "Deployment",
      "Theming Elements"
    ]
  },
  {
    "objectID": "qwebr-loading-data.html",
    "href": "qwebr-loading-data.html",
    "title": "Accessing and Using Data in webR",
    "section": "",
    "text": "When working with webR in a web environment, there are some modifications and considerations required for using data. This documentation entry guides you through a few changes related to accessing data.\n\n\nGiven the browser-based nature of webR, accessing local files is restricted. To overcome this limitation, webR establishes a virtual file system inside of your browser that is separate from your local file system. Consequently, webR does not have awareness of local file system and its paths. Thus, to use data we need to download it into the virtual file system either through: an R package, a URL using HTTPS, or a Web API.\nBy default, the webR virtual file system’s home directory and initial working directory is /home/web_user. This can be changed using a built-in extension document-level option home-dir.\n\n\nWhile there are methods for mounting pre-built images using the webR’s Mounting Filesystem mechanic, the quarto-webr Extension does not support this option at the moment.\n\n\n\n\nThe quickest approach for accessing data is to store it inside of an R data package. This kind of R package consists solely of data in an R ready format with the added benefit of help documentation. If the data package is available on CRAN, there’s a good chance a version exists for webR on the main webR package repository (warning not a mobile data friendly link) and, thus, can be accessed using install.packages(\"pkg\") or added to the documents packages key.\nIf the R package is not available on CRAN, then it will need to be compiled for webR, deployed, and accessed through GitHub Pages or r-universe.dev by following the advice on creating a custom webR/R WASM package repository.\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nBefore proceeding, take note of the following considerations when working with remote data:\n\nSecurity Protocol: webR necessitates data retrieval via the HyperText Transfer Protocol Secure (HTTPS) protocol to ensure secure connections and the Cross-Origin Resource Sharing (CORS) being enabled on the server where the data is being served.\nPackage Compatibility: In the absence of websockets within webR, packages reliant on {curl} methods may require adaptation or alternative solutions.\n\n\n\n\n\n\n\nWe suggest creating a GitHub repository that uses GitHub Pages to host the data. By default, GitHub Pages serves data files using the CORS protocol and can quickly be setup to enforce HTTPS URLs by checking a box.\nYou can see an example raw data repository here:\nhttps://github.com/coatless/raw-data\nThe corresponding site deployment of the main branch can be seen here:\nhttps://coatless.github.io/raw-data/\n\n\n\nThere may be times when it is not feasible to create a standalone repository to host the data. In cases like this, you may wish to host the data alongside of the document through Quarto’s publishing system. In this case, please add the resources key to the top of the HTML document or inside the project’s _quarto.yml.\nFor my-document.qmd, this would be:\n---\ntitle: \"quarto-webr document with data\"\nformat: \n  html:\n    resources:\n      - my-data.csv         # Include just the CSV\n      - my-data-directory/* # Include all files\nengine: knitr\nfilters:\n  - webr\n---\nFor _quarto.yml, this would be:\n---\nproject:\n  type: website\n  resources:\n    - my-data.csv         # Include just the CSV\n    - my-data-directory/* # Include all files\n---\nSubsequently, reference the data using the URL to where the document is located. For example, if the document is at:\nhttps://example.com/folder/my-document.html\nThen, the data should be accessed using:\nhttps://example.com/folder/my-data.csv\n\n\n\n\n\n\nNote\n\n\n\nYou may need to publish the document before using the URL. Also, be mindful of data version mismatches, as the data will be fetched from the HTTPS URL instead of being available locally.\n\n\n\n\n\n\nWe can retrieve data at a URL with HTTPS through using the download.file() function and, subsequently, reading it into R using a relative path. The later can be done using either Base R or Tidyverse functions.\nFor example, if we wanted to work with flights.csv from the nycflights13 R package (Details), we would specify:\nurl &lt;- \"https://coatless.github.io/raw-data/flights.csv\"\ndownload.file(url, \"flights.csv\")\nThis action saves the file into webR’s virtual file system to be read into R’s analysis environment. Replace \"https://coatless.github.io/raw-data/flights.csv\" and \"flights.csv\" with the actual URL of your desired data source and desired local file name.\n\n\n\nFor optimized performance, leverage base R’s read.*() functions, as they do not necessitate additional package dependencies.\ndata &lt;- read.csv(\"flights.csv\")\n\n\n\nAlternatively, you can use tidyverse-based functions like readr::read_*().\n\n\n\n\n\n\nNote\n\n\n\nNote that employing tidyverse or readr functions entails additional package downloads at the session’s outset or immediately preceeding the function usage.\n\n\ninstall.packages(\"readr\")\ndata &lt;- readr::read_csv(\"data.csv\")\n\n\n\nWe’ve setup the above example inside of an interactive cell for your to explore below.\n\n{quarto-webr}Code cell\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| autorun: true\n# See where we are in the file system:\ncat(\"We're currently at:\\n\")\ngetwd()\n\n# View a list of files for the working directory.\ncat(\"We have the following files present:\\n\")\nlist.files()\n\n# Specify the data URL using HTTPS\nurl &lt;- \"https://coatless.github.io/raw-data/flights.csv\"\n\n# Download the data file from the HTTPS URL and save it as\n# flights.csv\ncat(\"Download the data ...\\n\")\ndownload.file(url, \"flights.csv\")\n\n# Check for the data.\ncat(\"After downloading the data, we now have:\\n\")\nlist.files()\n\n# Read the flights data into R\nflights_from_csv &lt;- read.csv(\"flights.csv\")\n\n# See the first few rows of the flights_from_csv data frame.\ncat(\"Let's view the first 6 observations of data:\\n\")\nhead(flights_from_csv)\n```",
    "crumbs": [
      "Getting Started",
      "Loading Data"
    ]
  },
  {
    "objectID": "qwebr-loading-data.html#background-virtual-file-system",
    "href": "qwebr-loading-data.html#background-virtual-file-system",
    "title": "Accessing and Using Data in webR",
    "section": "",
    "text": "Given the browser-based nature of webR, accessing local files is restricted. To overcome this limitation, webR establishes a virtual file system inside of your browser that is separate from your local file system. Consequently, webR does not have awareness of local file system and its paths. Thus, to use data we need to download it into the virtual file system either through: an R package, a URL using HTTPS, or a Web API.\nBy default, the webR virtual file system’s home directory and initial working directory is /home/web_user. This can be changed using a built-in extension document-level option home-dir.\n\n\nWhile there are methods for mounting pre-built images using the webR’s Mounting Filesystem mechanic, the quarto-webr Extension does not support this option at the moment.",
    "crumbs": [
      "Getting Started",
      "Loading Data"
    ]
  },
  {
    "objectID": "qwebr-loading-data.html#accessing-data-through-r-data-packages",
    "href": "qwebr-loading-data.html#accessing-data-through-r-data-packages",
    "title": "Accessing and Using Data in webR",
    "section": "",
    "text": "The quickest approach for accessing data is to store it inside of an R data package. This kind of R package consists solely of data in an R ready format with the added benefit of help documentation. If the data package is available on CRAN, there’s a good chance a version exists for webR on the main webR package repository (warning not a mobile data friendly link) and, thus, can be accessed using install.packages(\"pkg\") or added to the documents packages key.\nIf the R package is not available on CRAN, then it will need to be compiled for webR, deployed, and accessed through GitHub Pages or r-universe.dev by following the advice on creating a custom webR/R WASM package repository.",
    "crumbs": [
      "Getting Started",
      "Loading Data"
    ]
  },
  {
    "objectID": "qwebr-loading-data.html#retrieving-data-from-the-web",
    "href": "qwebr-loading-data.html#retrieving-data-from-the-web",
    "title": "Accessing and Using Data in webR",
    "section": "",
    "text": "Important\n\n\n\nBefore proceeding, take note of the following considerations when working with remote data:\n\nSecurity Protocol: webR necessitates data retrieval via the HyperText Transfer Protocol Secure (HTTPS) protocol to ensure secure connections and the Cross-Origin Resource Sharing (CORS) being enabled on the server where the data is being served.\nPackage Compatibility: In the absence of websockets within webR, packages reliant on {curl} methods may require adaptation or alternative solutions.\n\n\n\n\n\n\n\nWe suggest creating a GitHub repository that uses GitHub Pages to host the data. By default, GitHub Pages serves data files using the CORS protocol and can quickly be setup to enforce HTTPS URLs by checking a box.\nYou can see an example raw data repository here:\nhttps://github.com/coatless/raw-data\nThe corresponding site deployment of the main branch can be seen here:\nhttps://coatless.github.io/raw-data/\n\n\n\nThere may be times when it is not feasible to create a standalone repository to host the data. In cases like this, you may wish to host the data alongside of the document through Quarto’s publishing system. In this case, please add the resources key to the top of the HTML document or inside the project’s _quarto.yml.\nFor my-document.qmd, this would be:\n---\ntitle: \"quarto-webr document with data\"\nformat: \n  html:\n    resources:\n      - my-data.csv         # Include just the CSV\n      - my-data-directory/* # Include all files\nengine: knitr\nfilters:\n  - webr\n---\nFor _quarto.yml, this would be:\n---\nproject:\n  type: website\n  resources:\n    - my-data.csv         # Include just the CSV\n    - my-data-directory/* # Include all files\n---\nSubsequently, reference the data using the URL to where the document is located. For example, if the document is at:\nhttps://example.com/folder/my-document.html\nThen, the data should be accessed using:\nhttps://example.com/folder/my-data.csv\n\n\n\n\n\n\nNote\n\n\n\nYou may need to publish the document before using the URL. Also, be mindful of data version mismatches, as the data will be fetched from the HTTPS URL instead of being available locally.\n\n\n\n\n\n\nWe can retrieve data at a URL with HTTPS through using the download.file() function and, subsequently, reading it into R using a relative path. The later can be done using either Base R or Tidyverse functions.\nFor example, if we wanted to work with flights.csv from the nycflights13 R package (Details), we would specify:\nurl &lt;- \"https://coatless.github.io/raw-data/flights.csv\"\ndownload.file(url, \"flights.csv\")\nThis action saves the file into webR’s virtual file system to be read into R’s analysis environment. Replace \"https://coatless.github.io/raw-data/flights.csv\" and \"flights.csv\" with the actual URL of your desired data source and desired local file name.\n\n\n\nFor optimized performance, leverage base R’s read.*() functions, as they do not necessitate additional package dependencies.\ndata &lt;- read.csv(\"flights.csv\")\n\n\n\nAlternatively, you can use tidyverse-based functions like readr::read_*().\n\n\n\n\n\n\nNote\n\n\n\nNote that employing tidyverse or readr functions entails additional package downloads at the session’s outset or immediately preceeding the function usage.\n\n\ninstall.packages(\"readr\")\ndata &lt;- readr::read_csv(\"data.csv\")\n\n\n\nWe’ve setup the above example inside of an interactive cell for your to explore below.\n\n{quarto-webr}Code cell\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| autorun: true\n# See where we are in the file system:\ncat(\"We're currently at:\\n\")\ngetwd()\n\n# View a list of files for the working directory.\ncat(\"We have the following files present:\\n\")\nlist.files()\n\n# Specify the data URL using HTTPS\nurl &lt;- \"https://coatless.github.io/raw-data/flights.csv\"\n\n# Download the data file from the HTTPS URL and save it as\n# flights.csv\ncat(\"Download the data ...\\n\")\ndownload.file(url, \"flights.csv\")\n\n# Check for the data.\ncat(\"After downloading the data, we now have:\\n\")\nlist.files()\n\n# Read the flights data into R\nflights_from_csv &lt;- read.csv(\"flights.csv\")\n\n# See the first few rows of the flights_from_csv data frame.\ncat(\"Let's view the first 6 observations of data:\\n\")\nhead(flights_from_csv)\n```",
    "crumbs": [
      "Getting Started",
      "Loading Data"
    ]
  },
  {
    "objectID": "qwebr-developer-resources.html",
    "href": "qwebr-developer-resources.html",
    "title": "Developer Resources",
    "section": "",
    "text": "Are you eager to contribute to the development of the quarto-webr extension or explore ways to modify it to suit your needs? This resource page is your guide to invaluable tools and references that will empower you on your development journey.",
    "crumbs": [
      "Extra Information",
      "Developer Resources"
    ]
  },
  {
    "objectID": "qwebr-developer-resources.html#mastering-webr",
    "href": "qwebr-developer-resources.html#mastering-webr",
    "title": "Developer Resources",
    "section": "Mastering webR",
    "text": "Mastering webR\nBefore diving into extension development, it’s essential to understand the core of what powers the quarto-webr extension: webR. These webR resources will be your trusty companions:\n\nwebR Documentation: This comprehensive documentation is your gateway to a deep understanding of webR. It provides profound insights into webR’s features, usage, and capabilities. Dive into practical examples, comprehensive guides, and everything you need to become a webR expert.\nwebR Source Code: For the technically curious, webR’s GitHub source code repository offers transparency into the development of webR. Here, you can review, contribute, and engage with the vibrant webR community to enhance its capabilities.\nBob Rudis’ Experiments with webR: Many different projects that explore a variety of use cases for webR. These experiments make use of the underlying webR JavaScript API.\n\nThese resources empower you to master webR, whether you’re just starting out or you’re a seasoned developer eager to contribute. Remember, webR is a versatile tool that can be used independently or alongside the Quarto extension to unlock the magic of interactive code cells in HTML documents.",
    "crumbs": [
      "Extra Information",
      "Developer Resources"
    ]
  },
  {
    "objectID": "qwebr-developer-resources.html#quarto-development-ecosystem",
    "href": "qwebr-developer-resources.html#quarto-development-ecosystem",
    "title": "Developer Resources",
    "section": "Quarto Development Ecosystem",
    "text": "Quarto Development Ecosystem\nFor those interested in extending the quarto-webr extension or exploring broader extension development within the Quarto ecosystem, we recommend exploring the following supplementary resources.\n\nQuarto Documentation\nGet acquainted with Quarto’s official extension documentation to deepen your understanding.\n\nFilters Documentation: Learn the art of creating filters for Quarto documents, enabling you to customize content generation.\nLua Development Tips: Access development tips specific to Lua scripting within Quarto extensions.\nLua API: Explore the Lua API documentation to understand how to interact with Quarto’s core functionality programmatically.\n\n\n\nRelated Extensions\nFor those intrigued by the broader world of extension development, we suggest the following Quarto extensions that can inspire your journey into extension development and functionality:\n\nquarto-ext/shinylive: Explore the shinylive extension’s codebase to understand how interactive content is implemented within Quarto documents.\nmcanouil/quarto-elevator: Delve into the quarto-elevator extension to gain insights into adding new features to Quarto documents.\nshafayetShafee/downloadthis: Investigate the downloadthis extension to see how it facilitates downloads within Quarto documents.\n\nThere are many more Quarto extensions to explore and learn from. For an up-to-date list, visit: https://quarto.org/docs/extensions/\n\n\nPandoc Essentials\nPandoc plays a pivotal role in Quarto’s document conversion process. To deepen your knowledge of Quarto, consider these Pandoc resources:\n\nExample Filters: Draw inspiration from Pandoc’s example filters to see how custom filters can be applied to your Quarto documents.\nCodeBlock: Understand the significance of the CodeBlock element in Pandoc, often used for implementing extensions and custom functionality.",
    "crumbs": [
      "Extra Information",
      "Developer Resources"
    ]
  },
  {
    "objectID": "qwebr-community-examples.html",
    "href": "qwebr-community-examples.html",
    "title": "Community Examples",
    "section": "",
    "text": "Welcome to the Community Examples page for the quarto-webr extension. This section celebrates the diverse and innovative ways that members of our community are harnessing the power of the quarto-webr extension. These examples showcase real-world use cases, highlighting the extension’s adaptability and functionality across various fields. You may also find references to examples from the main webR project here as well.\nExplore the projects, applications, educational materials, and more created by fellow users. Gain inspiration from the community’s contributions and discover how you can leverage the full potential of quarto-webr in your own work. Whether your interests lie in data analysis, interactive reports, or educational resources, you’ll find valuable insights and ideas within the community’s projects.\nDo you have your own project or example that incorporates quarto-webr? We invite you to contribute to this growing collection of community-driven projects by submitting a pull request or creating an issue. Your experiences and creativity can inspire others and promote collaboration within our community. Together, we can continue to expand the possibilities of quarto-webr.\n\nVideos\n\nquarto-webr: Your first webR-powered Quarto Document (RStudio)\nEli E. Holmes’ coverage of webR + Quarto on her EEHolmes-DataScience YouTube channel\n\nDemo of webR quarto extension along with Codespaces on Mar 14, 2023 and her test repository\nWebR + Quarto Demo: Running R right in the browser! on Mar 10, 2023 (Note: This uses an earlier Proof of Concept document. Not the quarto extension!)\n\n\n\n\nTeaching Materials / Workshops\nEnglish\n\nE.D. Gennatas’s tech demo with progressive reveal tutorials. Spring 2024.\nFaculty of Medicine, University of Oslo’s MF9130E - Introductory Course in Statistics. Spring 2024.\n\nSample Lab and source repo announced on Linkedin\n\nJerid Francom’s course LIN 380/680: Quantitative Text Analysis for Linguistics. Spring 2024.\n\nSample lecture and source repo\n\nKevin Middleton’s guided practice Quantitative Exercises in Genetics. Spring 2024.\n\nCourse repo\n\nJason Hilton’s part of the course RESM3002: Advanced Social Data Science. Spring 2024.\n\nLecture: Introduction to R and course repo.\n\nMartine Jansen’s workshop talk on Creating slides with Quarto by Slides (PDF). Feb 24th, 2024. VVSOR.\n\nSource\n\nBruno Rodrigues’ use of the extension in his notes for Building Reproducible Analytical Pipelines.\n\nSource repository\n\nDavid Brocker’s conversion of his PY 3600: Statistical Methods course materials. Oct 23rd, 2023.\n\nSource repository\n\nMine Çetinkaya-Rundel’s Teaching Data Science Masterclass: Organizing, publishing, and sharing of course materials. Sept 18, 2023 @ posit::conf(2023)\n\nEx 1.1: UN Votes, Page Source\nFull workshop materials at source repository and deployed website example’s source repository\n\nLMU Open Science Center (OSC)’s Quarto Workshop. Summer 2023.\n\nDemo page and source\n\nEthan White’s experimental interactive version of Data Carpentry for Biologists. Mar 13th, 2023.\n\nSpanish\n\nJavier Arántegui’s course Calidad 2023-24 contained short R Tutorials with examples using quarto-webr\n\nLecture: Introduction to R (Spanish), Lecture: Acceptance Sampling, and mastodon tweet.\n\n\n\n\nTalks\n\nNicola Rennie’s talk on Teaching statistics interactively with webR. Nov 22th, 2023 @ RSS/RoSE UK Statistics Education Meeting 2023\n\nSlides and Source code\n\nMickaël CANOUIL, Ph.D.’s talk on Quarto: A Not So Gentle Introduction uses the quarto-webr extension as an example extension for Quarto. Oct 19th, 2023.\n\nSource\n\nGeorge Stagg’s talk on Shiny Without a Server: webR & Shinylive brief mention of quarto-webr as a quick onboarding option. Oct 18, 2023 @ Jumping Rivers Shiny in Production 2023 Conference\n\nVideo (38:07)\n\nGeorge Stagg’s talk on the Magic with WebAssembly and webR mentioning quarto-webr as an easy onboarding option. Sep 20, 2023 @ posit::conf(2023)\n\nVideo (19:22)\n\nJames Balamuta’s talk on Dynamic Interactions:Empowering Educators and Researchers with Interactive Quarto Documents Using webR. Sep 19, 2023 @ posit::conf(2023)\n\nVideo (20:35)\n\nGeorge Stagg’s talk on the Introduction to webR mentioning quarto-webr as an easy onboarding option. Sep 18, 2023 @ posit::conf(2023)\nNicola Rennie’s talk on Teaching statistics interactively with webR. Sept 7th, 2023 @ RSS International Conference 2023\n\nSlides and Source code\n\nbob Rudis’ talk on 🕸️ Into the WebR-Verse incorporating a demo of the quarto-webr extension. Jul 13th, 2023 @ New York R Conference 2023\n\nVideo (21:01) and Source code\nboB used a cool trick to embed the demo in his revealjs slides.\n\nMaria Tackett’s talk on Using Quarto for Making and Organizing Teaching Materials during the Teaching (with) Quarto Session. Aug 7, 2023 @ JSM 2023\n\nSlides and Source code\nWebR Demo on Quarto Pub\n\n\nTurkish\n\nAlper Yilmaz’s lecture notes for MBG1032 Biyoistatistik. Spring 2024.\n\nSource\n\n\n\n\nTextbooks\nEnglish\n\nDaniel Kaplan’s book Lessons in Statistical Thinking\n\nBook source. Spring 2024.\n\nDylan Spicker’s course note book STAT 1793: Course Notes. Spring 2024.\n\nBook source\n\nDmitry Kondrashov’s notes on Quantifying Life. Spring 2024.\n\nBook source\n\nDaniel E. Weeks incorporated webR exercises into various parts of the HuGen2071. Fall 2023.\n\nBook source\n\nDaren Eiri uses interctive code cells in Condition Handling with Logging chapter.\n\nBook Source and Chapter Source\n\n\nJapanese\n\nSocihi Matsuura incorporated quarto-webr as part of R for Accounting Research’s practice problems. Spring 2024.\n\nBook source\n\n\nKorean\n\n이광춘 (Kwangchun Lee)’s book ChatGPT Data Science\n\nBook source\n\n\n\n\nNotebooks\n\nGeorge Stagg’s notebook example showing tidymodels workflow using webR\n\ntidymodels starter article without webR Preprocess your data with recipes\n\n\n\n\nSocial media posts\nEnglish\n\nAlberto Caimo’s post on Twitter (also known as X) showing an example exploring Beta-binomial distributions.\nJohn Hill‘s’ post on BlueSky discussing the potential for using quarto-webr in UK social science quant methods courses.\nJeffrey Perkel post on Mastodon with a quick ggplot2 demo. Dec 14th, 2023\nNien Xiang Tou post on LinkedIn and Mastodon\nLinh Nguyen’s post on LinkedIn and Twitter describing how she used knowledge at posit::conf(2023) to convert existing R notes to use the quarto-webr extension. Sept 22, 2023\nJoe Chelladurai mentioning a similiar integration on mastodon for his newly developed The School of Data. Jul 11th, 2023\nNicola Rennie’s tweet showing live coding with webR. May 5th, 2023\nbob Rudis’ kind praise of the extension. Apr 2nd, 2023\n\nJapanese\n\nst4tditt0 post on Twitter (also known as X) with a quick favorite package deni. Apr 20, 2024.\n\nSpanish\n\nAlejandro Romero’s post on Twitter (also known as X) showing Implementación de los Autómatas Celulares de @stephen_wolfram en R. Jan 23, 2024.\n\nFrench\n\nLino Galiana in Infolettre n°17 for the Service Statistique Publique (SSP) regarding quarto-webr for Quarto. Discussed on LinkedIn.\n\nSource\n\n\n\n\nBlog posts\nEnglish\n\nRodolfo Lourenzutti’s tutorial post on A/B Testing. Apr 3rd, 2024.\n\nSource\n\nClaudiu Papasteri’s post on Hugo blogdown posts with in-browser interactive code chunks using webR and Quarto?. Feb 5th, 2024.\n\nSource\n\nCara Thompson’s post on A quick experiment with WebR: how much can I do in under an hour?. Feb 2nd, 2024.\nMatt Dray’s post on Pseudo-apps in the browser with WebR and Quarto?. Jan 20th, 2024.\n\nSource\n\nJames Goldie’s post on Your new R package? Write a WebR blog post for it. Jan 19th, 2024.\n\nSource\n\nIsabella Velásquez’s post on Six not-so-basic base R functions. Jan 16th, 2024.\n\nSource\n\nWolfgang Huber’s post on Horseshoes in multi-dimensional scaling. Jan 6th, 2024.\n\nSource\n\nAlex Hayes’s post on the accumulation of small risks. Dec 23rd, 2023.\n\nSource\n\nThomas Sandmann’s post on Embedding R into Quarto documents with quarto-webr. Nov 18th, 2023.\n\nExample document: Intersecting Differential expression results.\nSource\n\nPedro Aphalo’s website called Using R for Photobiology. Nov 11th, 2023.\n\nDemo: Linear Models Introduction and website source\n\nChi Zhang’s post Use WebR in your existing quarto website. Oct 1st, 2023.\nJavier Orraca-Deatcu’s post titled webR via Quarto Extensions. Aug 23rd, 2023.\nGeorge Stagg’s mention of the extension in his webR 0.2.0 announcement. Aug 8th, 2023.\nEthan White’s use to create a portal for Tidy Tuesday. May 2nd, 2023\nMatt Dray’s post on Playgrounds with WebR and Quarto. Mar 16th, 2023\n\nA Parsing Playground for R Code on Netlify and the repository powering it.\nSource\n\nEthan White’s post on Playgrounds with WebR and Quarto. Mar 13th, 2023.\n\nChinese\n\nShixiang Wang’s post on Combining quarto publishing system and webr technology.\n\nSource\n\n\n\n\nPress\n\nBriefly mentioned in the Nature Technology Feature No installation required: how WebAssembly is changing scientific computing by Jeffrey M. Perkel (Technology editor, Springer Nature).\nR Weekly podcast included a reference to the Proof of Concept document/extension during episode 115, which was dedicated to the webR 0.1.0 announcement.\n\nR weekly 115 (2023-W11)",
    "crumbs": [
      "Demos",
      "Community Examples"
    ]
  },
  {
    "objectID": "qwebr-troubleshooting.html",
    "href": "qwebr-troubleshooting.html",
    "title": "Troubleshooting",
    "section": "",
    "text": "As this is an exciting new frontier, we’re learning as we go. Or as my friend Lawrence says, “I like to build airplanes in the air-”. In the spirit of learning, let’s address some common issues you may come across…\n\nStuck at Loading webR…\nProblem: If you encounter the message Loading webR... above your code cell instead of Run code, it’s likely due to missing worker files (webr-worker.js and webr-serviceworker.js) in the document’s root or a relative directory.\nSolution: To resolve this issue, make sure that these worker files are located in the same directory as your Quarto document. Here’s the recommended directory structure:\n.\n├── demo-quarto-webr.qmd\n├── webr-serviceworker.js\n└── webr-worker.js\nIf you still encounter the error after confirming the file placement, check the output of the preview command in either the Terminal or RStudio’s Background Jobs tab. The output might resemble the following:\nquarto preview --no-browser --no-watch-inputs\n\nWatching files for changes \nGET: /website/posts/index.html\n /website/posts/webr-serviceworker.js (404: Not Found)\n /website/posts/webr-worker.js (404: Not Found)\nThis indicates that the webr-serviceworker.js and webr-worker.js files are missing during the rendering stage of your document. To fix this, add the resources key to your document header, explicitly specifying these two JavaScript files like so:\n---\ntitle: \"My Post\"\nresources:\n  - webr-serviceworker.js\n  - webr-worker.js\nfilters:\n  - webr\n---\n\n\n\n\n\n\nNote\n\n\n\nWe’ve informed the Quarto team about this issue regarding automatic inclusion of extension registered dependencies.\n\n\nIf the problem persists, you can specify the location of the worker files using the service-worker-url option in the document’s YAML header or set the channel-type option to \"post-message\". You can see an example of the later here.\n\n\nUnable to Render the Quarto File\nProblem: When I add the webr value to the filter section, my Quarto document fails to render and displays a lengthy error message.\nSolution: Quarto extensions are project-specific, which means you must install the extension for each new project you create. To resolve this issue, ensure that your project directory structure includes an _extensions directory with the appropriate extension files, as shown below:\n.\n├── _extensions\n│   └── coatless\n│       └── webr\n│           ├── _extension.yml\n│           ├── ...\n│           └── webr.lua\n└── test-document.qmd\nIf your directory is missing the _extensions/ folder, please install the webr extension by following the instructions in Install the quarto-webr extension video.\nStarting from Quarto v1.4, you will receive an improved error message that emphasizes the extension’s absence from your current working directory.\n\n\nMissing extension error for Quarto v1.4 and later\nFATAL (/Applications/quarto/share/filters/main.lua:129) An error occurred:\nCould not run /Users/jjb/github/demo-webr/webr as a JSON filter.\nPlease make sure the file exists and is executable.\n\nDid you intend 'webr' as a Lua filter in an extension?\nIf so, make sure you've spelled the name of the extension correctly.\n\nThe original Pandoc error follows below.\nError running filter /Users/jjb/github/demo-webr/webr:\nCould not find executable /Users/jjb/github/demo-webr/webr\n\n\nIn versions prior to Quarto v1.4, including v1.3 and earlier, the error message may differ, but it typically signals that the extension is either missing or not executable.\n\n\nMissing extension error for Quarto v1.3 and earlier\nError running filter /Applications/quarto/share/filters/main.lua:\nError running filter /Users/jjb/github/demo-webr/webr:\nCould not find executable /Users/jjb/github/demo-webr/webr\nstack traceback:\n        /Applications/quarto/share/filters/main.lua:4030: in function &lt;/Applications/quarto/share/filters/main.lua:4009&gt;\n        [C]: in ?\n        [C]: in method 'walk'\n        /Applications/quarto/share/filters/main.lua:171: in function 'run_emulated_filter'\n        /Applications/quarto/share/filters/main.lua:449: in local 'callback'\n        /Applications/quarto/share/filters/main.lua:454: in upvalue 'run_emulated_filter_chain'\n        /Applications/quarto/share/filters/main.lua:495: in function &lt;/Applications/quarto/share/filters/main.lua:476&gt;\nstack traceback:\n        /Applications/quarto/share/filters/main.lua:171: in function 'run_emulated_filter'\n        /Applications/quarto/share/filters/main.lua:449: in local 'callback'\n        /Applications/quarto/share/filters/main.lua:454: in upvalue 'run_emulated_filter_chain'\n        /Applications/quarto/share/filters/main.lua:495: in function &lt;/Applications/quarto/share/filters/main.lua:476&gt;\n\n\n\n\nDirectly Accessing Rendered HTML\nProblem: When I directly open the rendered HTML document in a web browser, webR components are not loaded due to security reasons.\nSolution: When you use quarto preview or quarto render, the rendered HTML document is served by mimicking a server running under https://localhost/. In this context, everything usually works fine if you follow the directory structure mentioned above.\nHowever, if you directly open the rendered HTML document (e.g., demo-quarto-web.html) in a web browser, you may encounter issues with WebR components not loading due to security restrictions. This behavior is explained further in this StackOverflow answer.\nTo address this problem and avoid the need for a local Quarto installation to open the rendered file directly, you have a few options:\n\nUse Chrome’s --allow-file-access-from-files access: You can modify your Chrome shortcut to include the --allow-file-access-from-files flag. This allows local files to access other local files, potentially resolving the issue.\nUse the WebServer for Chrome Extension: Install the WebServer for Chrome extension to serve your HTML files. This extension sets up a local web server that doesn’t have the same security restrictions as directly opening files.\nUse NPM to Obtain local-web-server: Install the local-web-server package from npm, which is a lightweight, no-configuration-required HTTP server. You can use it to serve your HTML files without encountering security restrictions.\n\n\n\nSpeed Up webR\nProblem: WebR documents are not performing as efficiently as expected.\nSolution: To optimize the performance of webR documents, it’s essential to set appropriate HTTP headers for COOP and COEP. These headers help speed up the process and ensure a smoother user experience.\nHere are the recommended COOP and COEP headers to use:\nCross-Origin-Opener-Policy: same-origin\nCross-Origin-Embedder-Policy: require-corp\nBy configuring these headers, you enforce a same-origin policy for cross-origin windows and ensure that cross-origin iframes are required to have a COEP policy that allows cross-origin embedding. For more detailed instructions on setting up these headers, please refer to the \"shared-array-buffer\" channel type documentation.\n\n\nEngine Registration\nProblem: When using the knitr engine instead of the jupyter engine and the original tag {webr} instead of {webr-r}, a warning message may appear in the render processing output:\nWarning message:\nIn get_engine(options$engine) :\n  Unknown language engine 'webr' (must be registered via knit_engines$set()).\nSolution: The warning message about the unknown language engine ‘webr’ is purely cosmetic and does not affect the functionality of the webr filter. It is merely an aesthetic issue and does not impact the execution of code cells.\nThis warning occurs because the knitr engine is not initially aware of the webr engine. However, this lack of awareness does not cause any functional problems. The webr filter will operate as expected despite this warning.\nWhile the warning is not critical, it may be addressed in future updates for aesthetic reasons. Nevertheless, you can safely disregard this warning message as it does not interfere with the functionality of your webR documents.",
    "crumbs": [
      "Support",
      "Troubleshooting"
    ]
  },
  {
    "objectID": "qwebr-cell-options.html",
    "href": "qwebr-cell-options.html",
    "title": "Code Cell Options",
    "section": "",
    "text": "This article provides an in-depth overview of cell options supported in {webr-r} code blocks. These options play a crucial role in influencing the execution and output of executable code blocks. It’s important to note that these cell options are specified within comments at the top of a code block by using a hashpipe #| option: value.\nHere’s an example of how you can use these options:\nIn this example, the cell options results is set to 'asis', and fig-width is set to 5 inches.\nThese options can be customized to tailor the behavior of the code block based on your specific requirements. Understanding and using these options effectively can enhance the overall control and presentation of your code outputs.",
    "crumbs": [
      "Options Reference",
      "Code Cell Options"
    ]
  },
  {
    "objectID": "qwebr-cell-options.html#quarto-webr",
    "href": "qwebr-cell-options.html#quarto-webr",
    "title": "Code Cell Options",
    "section": "quarto-webr",
    "text": "quarto-webr\n\n\n\n\n\n\nNote\n\n\n\nOptions listed here are unique to the {quarto-webr} extension and do not have a Quarto equivalent.\n\n\n\nRun Options\n\n\n\n\n\n\n\n\nOption\nDefault Value\nDescription\n\n\n\n\ncontext\ninteractive\nDescribe how the cell should operate on the page through either interactive (Runnable code editor), output (Output only of executed at runtime), or setup (execute code without seeing output at runtime).\n\n\nautorun\nfalse\nAllow interactive cells to be run during document initialization without a user pressing run code.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nFor details regarding run options, please see Hiding and Executing Code.\n\n\n\n\nMonaco Editor Options\n\n\n\n\n\n\n\n\nOption\nDefault Value\nDescription\n\n\n\n\nread-only\nfalse\nPrevent code in interactive cells from being modified by disallowing code input.\n\n\neditor-max-height\n0\nSet a threshold to prevent infinite growth of the editor window.\n\n\neditor-quick-suggestions\nfalse\nShow a list of autocomplete variables and/or functions based on what was typed.\n\n\neditor-font-scale\n1\nModify the size of code cell and output relative to the page font size. Values less than 1 shrink the text size and values greater than 1 increase the text size.",
    "crumbs": [
      "Options Reference",
      "Code Cell Options"
    ]
  },
  {
    "objectID": "qwebr-cell-options.html#attributes",
    "href": "qwebr-cell-options.html#attributes",
    "title": "Code Cell Options",
    "section": "Attributes",
    "text": "Attributes\n\n\n\n\n\n\n\n\nOption\nDefault Value\nDescription\n\n\n\n\nlabel\n''\nUnique label for code cell. Useful for debugging.\n\n\nclasses\n''\nClasses to apply to cell container",
    "crumbs": [
      "Options Reference",
      "Code Cell Options"
    ]
  },
  {
    "objectID": "qwebr-cell-options.html#cell-output",
    "href": "qwebr-cell-options.html#cell-output",
    "title": "Code Cell Options",
    "section": "Cell Output",
    "text": "Cell Output\n\n\n\n\n\n\n\n\nOption\nDefault Value\nDescription\n\n\n\n\nresults\nmarkup\nControls how to display the text results through either: markup (Mark up text output with appropriate environments), asis (Write text output as-is, raw text results directly into the output document), or hide (Hide text output).\n\n\noutput\ntrue\nControls inclusion of results: true (all results), false (no results), or 'asis' (output as-is, raw text results directly into the output document).\n\n\nwarning\ntrue\nPreserve standard error output (warning(), message(), or stop()) in the output.\n\n\nmessage\ntrue\nSee prior entry.\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nAt the present time, we cannot differentiate between the type of condition being sent to standard error. Thus, if either warning or message is set to false, the output for both will be surpressed.",
    "crumbs": [
      "Options Reference",
      "Code Cell Options"
    ]
  },
  {
    "objectID": "qwebr-cell-options.html#figures",
    "href": "qwebr-cell-options.html#figures",
    "title": "Code Cell Options",
    "section": "Figures",
    "text": "Figures\n\n\n\n\n\n\n\n\nOption\nDefault Value\nDescription\n\n\n\n\nfig-cap\n\"\"\nFigure caption that should appear under the canvas\n\n\ndpi\n72\nDots per inch to use in calculating pixel values for fig-height and fig-width, e.g. dpi * inches = pixels.\n\n\nfig-width\n7\nWidth of the plot (in inches)\n\n\nfig-height\n5\nHeight of the plot (in inches)\n\n\nout-width\n700px\nWidth of the plot in the output document, which can be different from its physical fig-width such as \"100%\" or \"250px\".\n\n\nout-height\n\"\"\nHeight of the plot in the output document, similar to out-width.",
    "crumbs": [
      "Options Reference",
      "Code Cell Options"
    ]
  },
  {
    "objectID": "demos/qwebr-global-cell-defaults.html",
    "href": "demos/qwebr-global-cell-defaults.html",
    "title": "Demo: Set Global Cell Options",
    "section": "",
    "text": "Important\n\n\n\nThis feature is currently experimental and is included in 0.4.2-dev.1 build of {quarto-webr}."
  },
  {
    "objectID": "demos/qwebr-global-cell-defaults.html#cell-options-document-key",
    "href": "demos/qwebr-global-cell-defaults.html#cell-options-document-key",
    "title": "Demo: Set Global Cell Options",
    "section": "cell-options Document Key",
    "text": "cell-options Document Key\nTo establish default cell behavior, you can utilize the cell-options subkey in webr. For instance, consider the following structure:\nwebr:\n  cell-options:\n    &lt;cell-option&gt;: &lt;value&gt;\nHere, &lt;cell-option&gt; and &lt;value&gt; represent one of the supported cell options."
  },
  {
    "objectID": "demos/qwebr-global-cell-defaults.html#restricting-access",
    "href": "demos/qwebr-global-cell-defaults.html#restricting-access",
    "title": "Demo: Set Global Cell Options",
    "section": "Restricting Access",
    "text": "Restricting Access\nAn example use case is to prevent modifications to interactive code cells while ensuring their content is executed. In this document, we’ve defined the global behavior with:\n---\ntitle: \"Demo: Set Global Cell Options\"\nengine: knitr\nwebr:\n  cell-options:\n    out-width: \"100%\"\n    autorun: true\n    read-only: true\nfilters:\n  - webr\n---\nLet’s observe the outcome with a cell like this:\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\nfit = lm(mpg ~ am, data = mtcars)\nsummary(fit)\n```\n\n\n\nAttempting to modify the cell will be ineffective. However, in the subsequent cell, we’ve specified a local option that overrides the document’s default, allowing modification. Feel free to try modifying the cell below.\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| read-only: false\nplot(fit)\n```"
  },
  {
    "objectID": "demos/qwebr-editor-options.html",
    "href": "demos/qwebr-editor-options.html",
    "title": "Demo: Editor Options",
    "section": "",
    "text": "Important\n\n\n\nThese features are currently experimental and are included in the 0.4.2-dev.2 build of {quarto-webr}."
  },
  {
    "objectID": "demos/qwebr-editor-options.html#editor-font-scale-option",
    "href": "demos/qwebr-editor-options.html#editor-font-scale-option",
    "title": "Demo: Editor Options",
    "section": "editor-font-scale Option",
    "text": "editor-font-scale Option\nThe editor area now inherits font size from Quarto’s fontsize theme option, ensuring consistency with other elements on the page. You can adjust the font size for the editor relative to Quarto’s output by setting the editor-font-scale option. When editor-font-scale is:\n\nEqual to 1 (= 1), the editor’s font size matches the fontsize value.\nLess than 1 (&lt; 1), the editor’s font size is smaller than the fontsize value.\nGreater than 1 (&gt; 1), the editor’s font size is larger than the fontsize value.\n\n\nDefault Size\nBy default, we set editor-font-scale to 1, aligning the editor font size with the fontsize value.\nLet’s consider a standard code cell that fits a linear model and obtains the confidence intervals for one or more parameters in a fitted model:\n\nfit = lm(mpg ~ am, data = mtcars)\n\nconfint(fit)\n\n               2.5 %   97.5 %\n(Intercept) 14.85062 19.44411\nam           3.64151 10.84837\n\n\nNow, let’s observe the effect with editor-font-scale: 1:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotice the consistency in font sizes.\n\n\nReducing Editor Size\nTo decrease the font size, we set a value between 0 &lt; editor-font-size &lt; 1. For example, let’s set editor-font-scale to 0.5:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nIncreasing Editor Size\nTo increase the font size, we set a value between editor-font-size &gt; 1. For example, let’s set editor-font-scale to 2:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nScaling Content Areas\nIn this example, we create a custom area using a Div block in Quarto and set the div’s font size to 150%. Consequently, the editor inherits the font size within the area.\n\n{quarto-webr} OutputCell Code\n\n\n\n\nQuarto code cell for R\n\nfit = lm(mpg ~ am, data = mtcars)\n\nconfint(fit)\n\n               2.5 %   97.5 %\n(Intercept) 14.85062 19.44411\nam           3.64151 10.84837\n\n\n\n\nwebR code cell under quarto-webr\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n::: {#big-text style=\"font-size: 150%\"}\n\nQuarto code cell for R\n\n::: {.cell}\n\n```{.r .cell-code}\nfit = lm(mpg ~ am, data = mtcars)\n\nconfint(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               2.5 %   97.5 %\n(Intercept) 14.85062 19.44411\nam           3.64151 10.84837\n```\n\n\n:::\n:::\n\nwebR code cell under quarto-webr\n\n```{webr-r}\n#| autorun: true\nfit = lm(mpg ~ am, data = mtcars)\n\nconfint(fit)\n```\n:::"
  },
  {
    "objectID": "demos/qwebr-non-interactive-areas.html",
    "href": "demos/qwebr-non-interactive-areas.html",
    "title": "Demo: Revamped Noninteractive Areas",
    "section": "",
    "text": "Important\n\n\n\nWe’ve slowed down each cell’s execution time by about 1/2 of a second to show how the document is responding.\n\n\n\nPackage dependencies\nThe quarto-webr extension is set to automatically install and load the ggplot2 and dplyr packages by specifying a packages key in the document’s header.\n\n\nSetup a hidden ggplot2 object\nFrom there, we’re going to use the context: setup hidden cell to create a ggplot2 object that uses the mtcars data set with the aesthetic mappings of x = wt and y = mpg called g.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nGenerate a graph\nLet’s move from setup to generating and displaying results by using g object created in setup within an output context:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nRe-use prior graph object\nLet’s also re-use the base g but change the aesthetics so that colour is now present.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nWork with a hidden setup object\nFinally, let’s make sure we can do some interesting things with the interactive session.\n\n\n\n\n\n\nNote\n\n\n\nChanges inside of interactive cells do not propagate backwards in the document.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "demos/qwebr-read-only.html",
    "href": "demos/qwebr-read-only.html",
    "title": "Demo: Read-Only Code Cells",
    "section": "",
    "text": "This demo shows how a code cell can be placed into a read-only mode.\n\n\nThe read-only option modifies the interactive context such that changes to the cell’s code is not possible.\nFor example, try modifying the value associated with age in the following cell.\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: interactive\n#| read-only: true\n# Try modifying age\nage &lt;- 42\ncat(\"Your age is: \", age, fill = TRUE)\n```\n\n\n\n\n\n\nWe can pair read-only with autorun to create a constrained example allowing us to focus on a single piece of the code.\nFor example, let’s say we want to understand what happens when we increase the number of observations randomly sampled from a normal distribution. We could define two interactive cells:\n\none cell exposing changes to the number of samples, e.g. n; and,\na second cell containing graphing code that is restricted from being modified.\n\n\n{quarto-webr} OutputCell Code\n\n\nTry different values for n by modifying the assignment statement.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThen, press “Run Code” to recreate the graph and see how the distribution changed:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: interactive\n#| autorun: true\n# Experiment with different sample sizes by\n# changing the n value and re-running the code\n# cell.\nn &lt;- 100\n```\n```{webr-r}\n#| context: interactive\n#| autorun: true\n#| read-only: true\nsamples = rnorm(n)\nhist(samples,\n  main = \"Randomly Sampled Normal Distribution\",\n  sub = paste(\"Based on\", n, \"samples\"),\n  xlab = \"Sample Value\"\n)\n```"
  },
  {
    "objectID": "demos/qwebr-read-only.html#read-only-option",
    "href": "demos/qwebr-read-only.html#read-only-option",
    "title": "Demo: Read-Only Code Cells",
    "section": "",
    "text": "The read-only option modifies the interactive context such that changes to the cell’s code is not possible.\nFor example, try modifying the value associated with age in the following cell.\n\n{quarto-webr} OutputCell Code\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: interactive\n#| read-only: true\n# Try modifying age\nage &lt;- 42\ncat(\"Your age is: \", age, fill = TRUE)\n```"
  },
  {
    "objectID": "demos/qwebr-read-only.html#constraining-modifications",
    "href": "demos/qwebr-read-only.html#constraining-modifications",
    "title": "Demo: Read-Only Code Cells",
    "section": "",
    "text": "We can pair read-only with autorun to create a constrained example allowing us to focus on a single piece of the code.\nFor example, let’s say we want to understand what happens when we increase the number of observations randomly sampled from a normal distribution. We could define two interactive cells:\n\none cell exposing changes to the number of samples, e.g. n; and,\na second cell containing graphing code that is restricted from being modified.\n\n\n{quarto-webr} OutputCell Code\n\n\nTry different values for n by modifying the assignment statement.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThen, press “Run Code” to recreate the graph and see how the distribution changed:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n```{webr-r}\n#| context: interactive\n#| autorun: true\n# Experiment with different sample sizes by\n# changing the n value and re-running the code\n# cell.\nn &lt;- 100\n```\n```{webr-r}\n#| context: interactive\n#| autorun: true\n#| read-only: true\nsamples = rnorm(n)\nhist(samples,\n  main = \"Randomly Sampled Normal Distribution\",\n  sub = paste(\"Based on\", n, \"samples\"),\n  xlab = \"Sample Value\"\n)\n```"
  },
  {
    "objectID": "demos/qwebr-feature-demos.html",
    "href": "demos/qwebr-feature-demos.html",
    "title": "Feature Demonstrations",
    "section": "",
    "text": "Below is a list of different demonstrations of the extensions features. These demos were created to showcase different feature releases.\n\nEditor Options\nSet Global Cell Options\nRead-only Interactive Code Cells\nAutorun Interactive Code Cells\nInitial Code Cell Option Support\nUsing Custom Repositories for R WASM Package binaries\nRevamped Noninteractive Areas\nwebR in RevealJS\nLocking interactive areas when long runtime is present\nSetting Options in Document Header\nwebR in Quarto HTML Documents",
    "crumbs": [
      "Demos",
      "Feature Demos"
    ]
  },
  {
    "objectID": "qwebr-deployment-templates.html",
    "href": "qwebr-deployment-templates.html",
    "title": "Deployment Templates",
    "section": "",
    "text": "Discover a range of sample deployment templates for the quarto-webr extension at our GitHub repository here. These templates serve as convenient starting points for various web-based projects that harness the power of the quarto-webr extension, enabling interactive data analysis inside of a web browser. Whether you’re embarking on an individual report, creating an interactive website, or compiling a digital book, these templates simplify the process, making it effortless to kickstart your own projects.\n\nHTML Document Template\nThis template is designed for creating standalone HTML documents with interactive webR functionality. It’s suitable for individual reports or interactive documents.\n\nExample: You can find an example of an HTML document template here.\nSource Code: Access the source code for this template here.\n\n\n\nRevealJS Presentation Template\nThis template is designed for creating standalone RevealJS presentations with interactive webR functionality. It’s suitable for creating lecture slides.\n\n\n\n\n\n\nImportant\n\n\n\nThis template requires a pre-release version of Quarto that is 1.4.502 or greater that contains an updated copy of pandoc. For more details, please see Issue #14.\n\n\n\nExample: You can find an example of a RevealJS presentation template here.\nSource Code: Access the source code for this template here.\n\n\n\nWebsite Template\nThis template is meant for building interactive websites with multiple webR-powered pages. It’s ideal for websites that have multiple piece of web content that requires interactive data analysis at the “top-level”.\n\nExample: Explore an example of a website template here.\nSource Code: Access the source code for this template here.\n\n\n\nBlog Template\nFor users who want to periodically use webR on their Quarto blog, please use the following template.\n\nExample: Explore an example of a blog website template here.\nSource Code: Access the source code for this template here.\n\n\n\nBook Template\nThe book template is designed for creating interactive web-based books or documentation. It allows you to compile a collection of chapters, sections, and interactive content into a cohesive digital book.\n\nExample: You can view an example of a book template here.\nSource Code: Access the source code for this template here.",
    "crumbs": [
      "Deployment",
      "Templates"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html",
    "href": "qwebr-release-notes.html",
    "title": "Release Notes",
    "section": "",
    "text": "Note\n\n\n\nFeatures listed under the -dev version have not yet been solidified and may change at any point.\n\n\n\n\n\nWe’ve update the minimum Quarto requirement to 1.4.554.\n\nThis version of Quarto is apart of the latest RStudio IDE (Version: 2024.04.0, Date: 2024-04-29).\n\n\n\n\n\n\nUpgraded to webR v0.3.3 (#196)\nUpgraded to webR v0.3.2 (#187)\nIncrease the minimum Quarto version requirement to 1.4.554. (#198).\nAdded cell-options document-level option to specify global defaults for {webr-r} options (#173, thanks ute!)\nAdded editor-max-height cell option to limit growth of the editor window. (#177, thanks ute!)\nAdded editor-font-scale cell option to scale the code cell size relative to the page font size. Default is 1 for HTML Documents, Books, and Websites and 0.5 for Revealjs Slides. (#172 & #209, thanks ute!)\nAdded editor-quick-suggestions cell option to enable autocomplete menu suggestions. (#182, thanks egenn!)\nAdded the ability to have the monaco editor switch between Quarto’s light and dark theme modes. (#176)\nEnabled non-graphical computation within a webr-r cell when OffScreenCanvas is not available. (#155, thanks for raising it @mccarthy-m-g)\n\nIf OffScreenCanvas is not available, we now display a Quarto warning callout at the start of the document that emphasizes only non-graphical computation is available and a gentle nudge to upgrade the web browser being used.\nThe majority of modern browsers now have support for OffScreenCanvas. This previously effected users still on iOS 16 (Safari 16 and earlier).\n\n\n\n\n\n\nAdded Lua type annotations and function documentation into the Quarto extensions’ Lua filter. (#190)\nUpdated the version of the FontAwesome from 6.5.1 to 6.5.2. (#191)\n\n\n\n\n\nPrevented vertical scroll bars from always being present by modifying the adaptive container of the editor to always be at least 2 pixels greater than the editor’s content instead of being the exact amount. (#164)\n\n\n\n\n\nUpdated community examples covering quarto-webr uses in 2024 Q1 (#193).\nImprove the data loading documentation page by clarifying the virtual file system usage (#201).",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#breaking-changes",
    "href": "qwebr-release-notes.html#breaking-changes",
    "title": "Release Notes",
    "section": "",
    "text": "We’ve update the minimum Quarto requirement to 1.4.554.\n\nThis version of Quarto is apart of the latest RStudio IDE (Version: 2024.04.0, Date: 2024-04-29).",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#features",
    "href": "qwebr-release-notes.html#features",
    "title": "Release Notes",
    "section": "",
    "text": "Upgraded to webR v0.3.3 (#196)\nUpgraded to webR v0.3.2 (#187)\nIncrease the minimum Quarto version requirement to 1.4.554. (#198).\nAdded cell-options document-level option to specify global defaults for {webr-r} options (#173, thanks ute!)\nAdded editor-max-height cell option to limit growth of the editor window. (#177, thanks ute!)\nAdded editor-font-scale cell option to scale the code cell size relative to the page font size. Default is 1 for HTML Documents, Books, and Websites and 0.5 for Revealjs Slides. (#172 & #209, thanks ute!)\nAdded editor-quick-suggestions cell option to enable autocomplete menu suggestions. (#182, thanks egenn!)\nAdded the ability to have the monaco editor switch between Quarto’s light and dark theme modes. (#176)\nEnabled non-graphical computation within a webr-r cell when OffScreenCanvas is not available. (#155, thanks for raising it @mccarthy-m-g)\n\nIf OffScreenCanvas is not available, we now display a Quarto warning callout at the start of the document that emphasizes only non-graphical computation is available and a gentle nudge to upgrade the web browser being used.\nThe majority of modern browsers now have support for OffScreenCanvas. This previously effected users still on iOS 16 (Safari 16 and earlier).",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#changes",
    "href": "qwebr-release-notes.html#changes",
    "title": "Release Notes",
    "section": "",
    "text": "Added Lua type annotations and function documentation into the Quarto extensions’ Lua filter. (#190)\nUpdated the version of the FontAwesome from 6.5.1 to 6.5.2. (#191)",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#bug-fixes",
    "href": "qwebr-release-notes.html#bug-fixes",
    "title": "Release Notes",
    "section": "",
    "text": "Prevented vertical scroll bars from always being present by modifying the adaptive container of the editor to always be at least 2 pixels greater than the editor’s content instead of being the exact amount. (#164)",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#documentation",
    "href": "qwebr-release-notes.html#documentation",
    "title": "Release Notes",
    "section": "",
    "text": "Updated community examples covering quarto-webr uses in 2024 Q1 (#193).\nImprove the data loading documentation page by clarifying the virtual file system usage (#201).",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#features-1",
    "href": "qwebr-release-notes.html#features-1",
    "title": "Release Notes",
    "section": "Features",
    "text": "Features\n\nUpgraded the embedded version of webR to v0.3.1. (#165)\nread-only is a new code cell option that prevents changes to code inside of an interactive context.",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#bug-fixes-1",
    "href": "qwebr-release-notes.html#bug-fixes-1",
    "title": "Release Notes",
    "section": "Bug fixes",
    "text": "Bug fixes\n\nFixed FontAwesome icons not appearing if embed-resources: true was set. (#95)\n\n\n\n\n\n\n\nNote\n\n\n\nThe embed-resources option only works if the communication channel is either \"automatic\" (default), \"post-message\", or \"shared-array-buffer\". Do not attempt to use it with \"service-workers\".",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#changes-1",
    "href": "qwebr-release-notes.html#changes-1",
    "title": "Release Notes",
    "section": "Changes",
    "text": "Changes\n\nUpgrade monaco-editor from 0.45.0 to 0.47.0 (#170)",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#documentation-1",
    "href": "qwebr-release-notes.html#documentation-1",
    "title": "Release Notes",
    "section": "Documentation",
    "text": "Documentation\n\nUpdated documentation using plot2 to tinyplot due to a name change upstream.\nAdded a new section on using data within {webr-r} code blocks.",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#breaking-changes-1",
    "href": "qwebr-release-notes.html#breaking-changes-1",
    "title": "Release Notes",
    "section": "Breaking changes",
    "text": "Breaking changes\n\nInternal JavaScript functions used by the extension have been significantly changed.\nJavaScript initialization procedure has been further refined.",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#features-2",
    "href": "qwebr-release-notes.html#features-2",
    "title": "Release Notes",
    "section": "Features",
    "text": "Features\n\nOptimized the underlying code handling insertion and execution of R code. (#118)\nImplemented a custom JSON format for code cell data and option sharing between Quarto and webR. (#120)\nRedesigned non-interactive cells to provide improved reliability and visual cues. (#120)\nInteractive cells now have a toolbar above them that provides three actions: Run Code, Start Over, and Copy. (#91)\nInitial code cell option support (#104, #117, #125, #151):\n\nquarto-webR: context and autorun.\nAttributes: label and classes.\nFigures: fig-cap, dpi, fig-width, fig-height, out-width, & out-height.\nCell output: warning/message, results, and output\n\nAdded repos document meta option key to specify custom package repositories containing compiled R WASM Packages not found in the main webR repository (#124, #132).",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#changes-2",
    "href": "qwebr-release-notes.html#changes-2",
    "title": "Release Notes",
    "section": "Changes",
    "text": "Changes\n\nAdded new CSS IDs governing the webR initialization state. (#110)\nAdded shim that overrides install.packages() with webr::install() through webr::shim_install() this requires webR v0.2.2 to be in use. (#122)\nAdded the keyboard shortcut for Run Code – Shift + Enter – to mouseover text for the Run Code button. (#91)\nAllow {webr-r} code cell to propagate into Quarto markdown formats for hugo-md. (#150, h/t @ClaudiuPapasteri)\nUpdated the version of the MonacoEditor from 0.43.0 to 0.45.0. (#130)\nUpdated the version of the FontAwesome from 6.4.2 to 6.5.1. (#131)",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#bugfixes",
    "href": "qwebr-release-notes.html#bugfixes",
    "title": "Release Notes",
    "section": "Bugfixes",
    "text": "Bugfixes\n\nPrevented HTML output being shown as HTML by replacing HTML characters like &lt;, &gt;, &, etc., with their corresponding HTML entities. (#115, h/t @gvelasq)\nFixed display of text found after a code cell in RevealJS appearing off the page. (#102, #106)\nFixed setup and output contexts not syncing with values found in packages. (#114, #105, #88)\nFixed unexpected input error appearing spuriously on Windows machines by enforcing the end-of-line (EOL) character to be LF (\\n) and, thus preventing CRLF (\\r\\n) from entering the picture. (#94 huge thank you and h/t to @ute. Thanks also to @alexCardazzi for initial reporting).",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#documentation-2",
    "href": "qwebr-release-notes.html#documentation-2",
    "title": "Release Notes",
    "section": "Documentation",
    "text": "Documentation\n\nNew section discussing code cell options in {webr-r} cells.\nNew section with demos of the Quarto extension’s features. (#128)\nAdded a demo on non-interactive code cells. (#128)\nAdded a demo on using custom repositories to install R WASM package binaries. (#128)\nAdded a demo for showing initial code cell option support. (#141)\nAdded a demo for showing autorunning interactive code cells.\nModified the RevealJS presentation YAML to include an option to disable the webR status message header (#110)\nUpdated blog posts on community examples page (#135)\nUpdated Hiding and Executing Code to use panel sets when displaying output from {quarto-webr} and showing the underlying code.\nMinor documentation tweaks.",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#deployment",
    "href": "qwebr-release-notes.html#deployment",
    "title": "Release Notes",
    "section": "Deployment",
    "text": "Deployment\n\nAdded an instructive error message regarding whether template files are missing. (#107)",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#breaking-changes-2",
    "href": "qwebr-release-notes.html#breaking-changes-2",
    "title": "Release Notes",
    "section": "Breaking changes",
    "text": "Breaking changes\n\nWith the update to webR v0.2.2, the webr-worker.js and webr-serviceworker.js files are no longer required to be present with the document under default options.",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#features-3",
    "href": "qwebr-release-notes.html#features-3",
    "title": "Release Notes",
    "section": "Features",
    "text": "Features\n\nUpgraded the embedded version of webR to v0.2.2. (#96)",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#bugfixes-1",
    "href": "qwebr-release-notes.html#bugfixes-1",
    "title": "Release Notes",
    "section": "Bugfixes",
    "text": "Bugfixes\n\nFix line breaks inside of code output area inside of RevealJS.\nFix height and presentation of the webR cell within RevealJS. (#98)\nFix code output class styling in RevealJS. (#100)",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#documentation-3",
    "href": "qwebr-release-notes.html#documentation-3",
    "title": "Release Notes",
    "section": "Documentation",
    "text": "Documentation\n\nUpdated documentation to reflect the removal of webr-worker.js and webr-serviceworker.js scripts. (#59)\nAdded a section on setting global extension settings using _quarto.yml to the meta options (#46)\nAdded slide embedding CSS class alongside examples.\nUpdated GIF on the README to show the UI improvements.\nMinor documentation tweaks.",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#features-4",
    "href": "qwebr-release-notes.html#features-4",
    "title": "Release Notes",
    "section": "Features",
    "text": "Features\n\nAdded autoload-packages document meta option key that will automatically load packages specified in the packages key. The default value is true. (#75)\n\nThis feature simplifies the use of packages, eliminating the need to call library() in interactive code cells or setup code cells, as the specified packages will be loaded automatically.\n\nAdded new output classes to differentiate between STDOUT and STDERR text. (#60, #89)\n\nError and warning messages will now appear red and regular output will appear black.",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#bugfixes-2",
    "href": "qwebr-release-notes.html#bugfixes-2",
    "title": "Release Notes",
    "section": "Bugfixes",
    "text": "Bugfixes\n\nFix placement of the “WebR Status” indicator when in the revealjs presentation format. (#84)",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#documentation-4",
    "href": "qwebr-release-notes.html#documentation-4",
    "title": "Release Notes",
    "section": "Documentation",
    "text": "Documentation\n\nAdded a subsection to using two keyboard shortcuts into the interactive code cell demo.\nEmphasized the extension must be in the same directory or contained within a Quarto project as the Quarto document being used. (#79, #26)\nAdded an RevealJS presentation example. (#83)\nAdded examples of embedding a RevealJS presentation inside of a website and book project. (#83)\nAdded an example of using the extension with a Blog website. (#81)\nAdded documentation on theming quarto elements. (#89)\nMiscellaneous documentation typo fixes.",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#deployment-1",
    "href": "qwebr-release-notes.html#deployment-1",
    "title": "Release Notes",
    "section": "Deployment",
    "text": "Deployment\n\nAdded a tests/ directory that contains Quarto documents used across multiple browsers before triggering a point release. (#76)\nAdded the open-in-html-browser extension to devcontainer for better previewing options of HTML results.\nGitHub codespaces now automatically open the README example when the devcontainer is launched.",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#features-5",
    "href": "qwebr-release-notes.html#features-5",
    "title": "Release Notes",
    "section": "Features",
    "text": "Features\n\nAdded a Global Interpreter Lock (GIL) to ensures that only one code cell runs at a time, preventing simultaneous execution conflicts.\n\nWith this enhancement, you can now enjoy smoother and more predictable execution of your code, without interference from concurrently running code cells.\n\nAdded a visual spinning indicator to emphasize what code cell is currently running. (#64, #17)\nImproved status updates about installing R packages specified in the document’s package key. (#68)\nFully supported pager event types. (#58)\n\nWith this update, looking at R help documentation for a function is now possible.",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#bugfixes-3",
    "href": "qwebr-release-notes.html#bugfixes-3",
    "title": "Release Notes",
    "section": "Bugfixes",
    "text": "Bugfixes\n\nFixed base-url to allow for a localized version of webR away. (#54)\nFixed document-level packages meta option not installing packages if the status bar was not present (#69)\nFixed service workers not being placed if user explicitly set channel-type: 'automatic' (#74)",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#documentation-5",
    "href": "qwebr-release-notes.html#documentation-5",
    "title": "Release Notes",
    "section": "Documentation",
    "text": "Documentation\n\nAdded an examples/ directory containing examples for HTML Documents, Books, and Websites. (#53)\nAdded a documentation page that contains the extension updates and release dates.\nAdded an FAQ page covering questions from posit::conf(2023). (#56)",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#deployment-2",
    "href": "qwebr-release-notes.html#deployment-2",
    "title": "Release Notes",
    "section": "Deployment",
    "text": "Deployment\n\nSwitched from Quarto’s publishing action to individually rendering projects, merging output, and, then, publishing. (#73)\n\nBy using a custom publish action, we can retain a single repository with nested quarto projects (e.g. A website project that also contains a book.)",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#feature",
    "href": "qwebr-release-notes.html#feature",
    "title": "Release Notes",
    "section": "Feature",
    "text": "Feature\n\nImproved the run selected code shortcut to now also run the current line if no selection is present and advance to the next. (#43)\n\nUse: Cmd + Enter on macOS or Ctrl + Enter on Windows",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#bugfixes-4",
    "href": "qwebr-release-notes.html#bugfixes-4",
    "title": "Release Notes",
    "section": "Bugfixes",
    "text": "Bugfixes\n\nFixed space not being preserved (h/t @nguyenllpsych, #39)\nFixed webR not initializing if a document lacked a title (h/t @jimhester, #40)",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#documentation-6",
    "href": "qwebr-release-notes.html#documentation-6",
    "title": "Release Notes",
    "section": "Documentation",
    "text": "Documentation\n\nAdded a walkthrough video to the getting started page.\nAdded a new page containing community examples of the quarto-webr extension in the wild.\nAdded an example on fill-in-the-blank usage.\nClarified how interactive code cells could be used to explore what-if scenarios.\nMinor documentation fixes.",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#deployment-3",
    "href": "qwebr-release-notes.html#deployment-3",
    "title": "Release Notes",
    "section": "Deployment",
    "text": "Deployment\n\nAdd new issue templates for questions and examples.\nImproved GitHub repo issue template formatting.",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#features-6",
    "href": "qwebr-release-notes.html#features-6",
    "title": "Release Notes",
    "section": "Features",
    "text": "Features\n\nNew documentation website is available at: https://quarto-webr.thecoatlessprofessor.com\nDocument option channel-type sets the communication channel webR uses.\n\nchannel-type: automatic (default): Communicates using either shared-array-buffer or service-worker.\nchannel-type: shared-buffer-array: Fastest communication option, but requires setting up HTTP headers.\nchannel-type: service-worker: Slower communication option and requires worker scripts to be next to the rendered document.\nchannel-type: post-message: Easiest setup option at the expense of being unable to interrupt the R process or accept user-input.\n\nCode cell option context controls whether the code and output are shown or suppressed.\n\ncontext: interactive(default) shows both code and output.\ncontext: setup suppresses both code and output.\ncontext: output suppresses code but shows its output.\nTo use the new hidden code cell feature, the code cell needs #| context: &lt;value&gt; like so:\n\n\n```{webr-r}\n#| context: setup\n\nmy_hidden_variable = 11\n```",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#bugfixes-5",
    "href": "qwebr-release-notes.html#bugfixes-5",
    "title": "Release Notes",
    "section": "Bugfixes",
    "text": "Bugfixes\n\nFixed webR status indicator appearing outside of the header. (#33)\nFixed button styling difference between standalone documents and website-based documents.",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#documentation-7",
    "href": "qwebr-release-notes.html#documentation-7",
    "title": "Release Notes",
    "section": "Documentation",
    "text": "Documentation\n\nCreated the docs folder inside the repository to host the documentation website.\nMoved documentation from the README.md file onto separate web pages.\n\nAcknowledgements now has a dedicated page thanking contributors and collaborators.\nDeveloper resources expands on the reference resources.\nUsing R packages describes the best practices for using R’s ecosystem of extensions\nCustomization Options describes the document level options available to be set in document’s YAML field.\n\nAdded new documentation entries for hidden code cell evaluation and communication channels.\nAdded a rendered version of the README example to the website.\nIncorporated additional examples into the “Exploring Interactive Code Cells” demo document.",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#deployment-4",
    "href": "qwebr-release-notes.html#deployment-4",
    "title": "Release Notes",
    "section": "Deployment",
    "text": "Deployment\n\nAdded a Quarto action to render and publish the documentation website.\nAdded issue templates for feature requests and bug fixes.\nSymlink the _extension directory into docs to avoid needing to add the extension on each render.",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#feature-1",
    "href": "qwebr-release-notes.html#feature-1",
    "title": "Release Notes",
    "section": "Feature",
    "text": "Feature\n\nUpgraded the MonacoEditor version to v0.43.0 from v0.31.0",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#bugfixes-6",
    "href": "qwebr-release-notes.html#bugfixes-6",
    "title": "Release Notes",
    "section": "Bugfixes",
    "text": "Bugfixes\n\nFixed quarto-webr documents requiring a reload in Safari to see/interact with code cells (#21)\nFixed keyboard shortcuts not re-initializing correctly on multiple Monaco Editors by re-registering shortcuts on code cell focus (#28)",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#feature-2",
    "href": "qwebr-release-notes.html#feature-2",
    "title": "Release Notes",
    "section": "Feature",
    "text": "Feature\n\nUpgrades the extension to use webR v0.2.1",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#feature-3",
    "href": "qwebr-release-notes.html#feature-3",
    "title": "Release Notes",
    "section": "Feature",
    "text": "Feature\n\nImplements changes required to run webR v0.2.0",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#bug-fix",
    "href": "qwebr-release-notes.html#bug-fix",
    "title": "Release Notes",
    "section": "Bug fix",
    "text": "Bug fix\n\nAttempted to resolve missing service workers for published Quarto webR enabled documents on https://quarto.pub",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#deployment-5",
    "href": "qwebr-release-notes.html#deployment-5",
    "title": "Release Notes",
    "section": "Deployment",
    "text": "Deployment\n\nAdded a GitHub actions website deployment workflow to generate sample pages.\nAdded a devcontainer.json for development on GitHub\nAdded a script to update the version of Quarto used inside of the devcontainer.json.",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#breaking-changes-3",
    "href": "qwebr-release-notes.html#breaking-changes-3",
    "title": "Release Notes",
    "section": "Breaking Changes",
    "text": "Breaking Changes\n\nWe’ve transitioned the code editor used in the quarto-webr extension to Monaco Editor from CodeMirror for improved accessibility.\n\nSpecial thanks go out to JooYoung Seo (Website) for identifying the accessibility issue and submitting a pull request to incorporate the editor.",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#features-7",
    "href": "qwebr-release-notes.html#features-7",
    "title": "Release Notes",
    "section": "Features",
    "text": "Features\n\nCode editing areas on the Quarto document now use the Monaco Editor for improved accessibility.\nExecute code using keyboard shortcuts:\n\nRun selected code using: [Cmd + Enter] on macOS or [Ctrl+Enter] on Windows\nRun the entire code area using: [Shift+Enter]\n\nDynamically growing code editor as new lines are added.\nAnnouncing the status changes of webR initialization states through arias.",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#features-8",
    "href": "qwebr-release-notes.html#features-8",
    "title": "Release Notes",
    "section": "Features",
    "text": "Features\n\nUpgraded the version of webR to use v0.1.1.\nSet options directly inside the document’s YAML header to control webR:\n\nSupport is available for setting the following WebR.WebROptions options:\n\nhome-dir: The WebAssembly user’s home directory and initial working directory (Documentation). Default: '/home/web_user'.\nbase-url: The base URL used for downloading R WebAssembly binaries. (Documentation). Default: 'https://webr.r-wasm.org/[version]/'.\nservice-worker-url: The base URL from where to load JavaScript worker scripts when loading webR with the ServiceWorker communication channel mode (Documentation). Default: ''.\n\n\nwebR initialization status stages are now described and shown as stoplights (inspired by Bob Rudis)\n\nshow-startup-message: Display in the document header the state of WebR initialization. Default: true\nshow-header-message: Display in the document header whether COOP and COEP headers are in use for faster page loads. Default: false\n\n\n\n\n\nNew status lighting",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#breaking-changes-4",
    "href": "qwebr-release-notes.html#breaking-changes-4",
    "title": "Release Notes",
    "section": "Breaking Changes",
    "text": "Breaking Changes\n\nWe’ve transitioned to using the {webr-r} code cell designation from our original {webr} designation.\n\nThe {webr-r} tag allows for code cell evaluation prior to rendering the document\nMoreover, the {webr-r} component does not need to be registered under the knitr compute engine.",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#bugfix",
    "href": "qwebr-release-notes.html#bugfix",
    "title": "Release Notes",
    "section": "Bugfix",
    "text": "Bugfix\n\nEscape characters \\ are further escaped.\n\n```{webr}\nadd_one &lt;- \\(x) x + 1\nadd_one(2)\n```\nShould now appear in a webR code cell as:\nadd_one &lt;- \\(x) x + 1\nadd_one(2)",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#documentation-8",
    "href": "qwebr-release-notes.html#documentation-8",
    "title": "Release Notes",
    "section": "Documentation",
    "text": "Documentation\n\nAdded details on how to host webR content\nAdded additional examples and details in the webr-demo.qmd file.",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#bug-fixes-2",
    "href": "qwebr-release-notes.html#bug-fixes-2",
    "title": "Release Notes",
    "section": "Bug Fixes",
    "text": "Bug Fixes\n\nFixed the error of figure margins too large due to canvas sizing issues.\nRemoved the attempt to switch between / and '' if COOP and COEP are not present. Defaults to relative directory.",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-release-notes.html#features-9",
    "href": "qwebr-release-notes.html#features-9",
    "title": "Release Notes",
    "section": "Features",
    "text": "Features\n\nEnable webR code cells inside of a Quarto document.\n\n\n\n\nquarto-webr Filter in Action",
    "crumbs": [
      "Extra Information",
      "Release Notes"
    ]
  },
  {
    "objectID": "qwebr-first-steps.html",
    "href": "qwebr-first-steps.html",
    "title": "Making your first webR-powered Quarto document",
    "section": "",
    "text": "To get started, we highly recommend watching our walkthrough video. This video provides an in-depth breakdown of how to use a Quarto extension like quarto-webr within a Quarto document. Following that, delve into the subsequent sections that highlight crucial workflow changes for incorporating webR functionality into your Quarto HTML documents. We strongly encourage you to bookmark this page, as it serves as an invaluable reference for users of all expertise levels.",
    "crumbs": [
      "Getting Started",
      "Your first webR-powered Quarto document"
    ]
  },
  {
    "objectID": "qwebr-first-steps.html#workflow-video",
    "href": "qwebr-first-steps.html#workflow-video",
    "title": "Making your first webR-powered Quarto document",
    "section": "Workflow Video",
    "text": "Workflow Video",
    "crumbs": [
      "Getting Started",
      "Your first webR-powered Quarto document"
    ]
  },
  {
    "objectID": "qwebr-first-steps.html#installation",
    "href": "qwebr-first-steps.html#installation",
    "title": "Making your first webR-powered Quarto document",
    "section": "Installation",
    "text": "Installation\nTo use this extension in a Quarto project, install it from within the project’s working directory by typing into Terminal:\nquarto add coatless/quarto-webr\n\n\n\nDemonstration of using the Terminal tab to install the extension.\n\n\n\n\n\n\n\n\nNote\n\n\n\nQuarto extensions are project-specific installations and are not stored in a global library, unlike R packages. This means that for every new Quarto project or directory where you create a Quarto Document, you’ll need to install the extension again.",
    "crumbs": [
      "Getting Started",
      "Your first webR-powered Quarto document"
    ]
  },
  {
    "objectID": "qwebr-first-steps.html#usage",
    "href": "qwebr-first-steps.html#usage",
    "title": "Making your first webR-powered Quarto document",
    "section": "Usage",
    "text": "Usage\nOnce the extension is successfully installed, you can begin utilizing it in your Quarto documents located within the same working directory as the _extensions folder. To activate the webR functionality in those documents, follow these steps:\n\nAdd webr Filter: In the header of your Quarto document, add the webr filter to the list of filters:\n\nfilters:\n  - webr\n\nUse {webr-r} Code Blocks: Write your R code within code blocks marked with {webr-r}. Here’s an example:\n\n---\ntitle: webR in Quarto HTML Documents\nformat: html\nengine: knitr\nfilters:\n  - webr\n---\n\nThis is a webr-enabled code cell in a Quarto HTML document.\n\n```{webr-r}\nfit = lm(mpg ~ am, data = mtcars)\nsummary(fit)\n```\n\nRender Your Document: You can now render your Quarto document by clicking on  Render (or use the keyboard shortcut ⇧⌘K on macOS or Ctrl+Shift+K on Windows/Linux). The document will execute under engine: knitr by default, but you can specify a different engine if needed.\n\n\n\n\n\n\n\nNote\n\n\n\nIf an engine is not specified, Quarto will attempt to use the jupyter compute engine by default. This may cause an error if jupyter is not installed on your computer.",
    "crumbs": [
      "Getting Started",
      "Your first webR-powered Quarto document"
    ]
  }
]