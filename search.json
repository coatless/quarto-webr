[
  {
    "objectID": "qwebr-developer-resources.html",
    "href": "qwebr-developer-resources.html",
    "title": "Developer Resources",
    "section": "",
    "text": "Are you eager to contribute to the development of the quarto-webr extension or explore ways to modify it to suit your needs? This resource page is your guide to invaluable tools and references that will empower you on your development journey."
  },
  {
    "objectID": "qwebr-developer-resources.html#mastering-webr",
    "href": "qwebr-developer-resources.html#mastering-webr",
    "title": "Developer Resources",
    "section": "Mastering webR",
    "text": "Mastering webR\nBefore diving into extension development, it‚Äôs essential to understand the core of what powers the quarto-webr extension: webR. These webR resources will be your trusty companions:\n\nwebR Documentation: This comprehensive documentation is your gateway to a deep understanding of webR. It provides profound insights into webR‚Äôs features, usage, and capabilities. Dive into practical examples, comprehensive guides, and everything you need to become a webR expert.\nwebR Source Code: For the technically curious, webR‚Äôs GitHub source code repository offers transparency into the development of webR. Here, you can review, contribute, and engage with the vibrant webR community to enhance its capabilities.\nBob Rudis‚Äô Experiments with webR: Many different projects that explore a variety of use cases for webR. These experiments make use of the underlying webR JavaScript API.\n\nThese resources empower you to master webR, whether you‚Äôre just starting out or you‚Äôre a seasoned developer eager to contribute. Remember, webR is a versatile tool that can be used independently or alongside the Quarto extension to unlock the magic of interactive code cells in HTML documents."
  },
  {
    "objectID": "qwebr-developer-resources.html#quarto-development-ecosystem",
    "href": "qwebr-developer-resources.html#quarto-development-ecosystem",
    "title": "Developer Resources",
    "section": "Quarto Development Ecosystem",
    "text": "Quarto Development Ecosystem\nFor those interested in extending the quarto-webr extension or exploring broader extension development within the Quarto ecosystem, we recommend exploring the following supplementary resources.\n\nQuarto Documentation\nGet acquainted with Quarto‚Äôs official extension documentation to deepen your understanding.\n\nFilters Documentation: Learn the art of creating filters for Quarto documents, enabling you to customize content generation.\nLua Development Tips: Access development tips specific to Lua scripting within Quarto extensions.\nLua API: Explore the Lua API documentation to understand how to interact with Quarto‚Äôs core functionality programmatically.\n\n\n\nRelated Extensions\nFor those intrigued by the broader world of extension development, we suggest the following Quarto extensions that can inspire your journey into extension development and functionality:\n\nquarto-ext/shinylive: Explore the shinylive extension‚Äôs codebase to understand how interactive content is implemented within Quarto documents.\nmcanouil/quarto-elevator: Delve into the quarto-elevator extension to gain insights into adding new features to Quarto documents.\nshafayetShafee/downloadthis: Investigate the downloadthis extension to see how it facilitates downloads within Quarto documents.\n\nThere are many more Quarto extensions to explore and learn from. For an up-to-date list, visit: https://quarto.org/docs/extensions/\n\n\nPandoc Essentials\nPandoc plays a pivotal role in Quarto‚Äôs document conversion process. To deepen your knowledge of Quarto, consider these Pandoc resources:\n\nExample Filters: Draw inspiration from Pandoc‚Äôs example filters to see how custom filters can be applied to your Quarto documents.\nCodeBlock: Understand the significance of the CodeBlock element in Pandoc, often used for implementing extensions and custom functionality."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Greetings from quarto-webr Wonderland!",
    "section": "",
    "text": "Welcome to the documentation portal for the quarto-webr extension ‚Äì your key to unlocking the endless possibilities of webR within various Quarto formats, including HTML, Websites, and Books.\nReady for an exciting journey into the world of webR‚Äôs interactive code cells? Click the ‚ÄúRun Code‚Äù button below to experience it firsthand:\nüü° Loading\n  webR...\n\n\n  \n\n\nAt its core, the quarto-webr extension is designed to empower you to run R code directly in your web browser using familiar reporting tools, all without the need for an external R server. Moreover, the extension abstracts away the need to know HTML or JavaScript to use webR. However, it‚Äôs worth noting that you can also choose to unlock the full potential of webR and create more complex applications independently by directly using webR‚Äôs JavaScript API, granting you unparalleled freedom to harness the power of R in innovative ways.\nWith this in mind, let‚Äôs dive in and kickstart your journey with interactive code cells by creating our very first webR-powered Quarto document or exploring some examples!"
  },
  {
    "objectID": "qwebr-troubleshooting.html",
    "href": "qwebr-troubleshooting.html",
    "title": "Troubleshooting",
    "section": "",
    "text": "As this is an exciting new frontier, we‚Äôre learning as we go. Or as my friend Lawrence says, ‚ÄúI like to build airplanes in the air-‚Äù. In the spirit of learning, let‚Äôs address some common issues you may come across‚Ä¶\n\nStuck at Loading webR‚Ä¶\nProblem: If you encounter the message Loading webR... above your code cell instead of Run code, it‚Äôs likely due to missing worker files (webr-worker.js and webr-serviceworker.js) in the document‚Äôs root or a relative directory.\nSolution: To resolve this issue, make sure that these worker files are located in the same directory as your Quarto document. Here‚Äôs the recommended directory structure:\n.\n‚îú‚îÄ‚îÄ demo-quarto-webr.qmd\n‚îú‚îÄ‚îÄ webr-serviceworker.js\n‚îî‚îÄ‚îÄ webr-worker.js\nIf you still encounter the error after confirming the file placement, check the output of the preview command in either the Terminal or RStudio‚Äôs Background Jobs tab. The output might resemble the following:\nquarto preview --no-browser --no-watch-inputs\n\nWatching files for changes \nGET: /website/posts/index.html\n /website/posts/webr-serviceworker.js (404: Not Found)\n /website/posts/webr-worker.js (404: Not Found)\nThis indicates that the webr-serviceworker.js and webr-worker.js files are missing during the rendering stage of your document. To fix this, add the resources key to your document header, explicitly specifying these two JavaScript files like so:\n---\ntitle: \"My Post\"\nresources:\n  - webr-serviceworker.js\n  - webr-worker.js\nfilters:\n  - webr\n---\n\n\n\n\n\n\nNote\n\n\n\nWe‚Äôve informed the Quarto team about this issue regarding automatic inclusion of extension registered dependencies.\n\n\nIf the problem persists, you can specify the location of the worker files using the service-worker-url option in the document‚Äôs YAML header or set the channel-type option to \"post-message\". You can see an example of the later here.\n\n\nUnable to Render the Quarto File\nProblem: When I add the webr value to the filter section, my Quarto document fails to render and displays a lengthy error message.\nSolution: Quarto extensions are project-specific, which means you must install the extension for each new project you create. To resolve this issue, ensure that your project directory structure includes an _extensions directory with the appropriate extension files, as shown below:\n.\n‚îú‚îÄ‚îÄ _extensions\n‚îÇ   ‚îî‚îÄ‚îÄ coatless\n‚îÇ       ‚îî‚îÄ‚îÄ webr\n‚îÇ           ‚îú‚îÄ‚îÄ _extension.yml\n‚îÇ           ‚îú‚îÄ‚îÄ ...\n‚îÇ           ‚îî‚îÄ‚îÄ webr.lua\n‚îî‚îÄ‚îÄ test-document.qmd\nIf your directory is missing the _extensions/ folder, please install the webr extension by following the instructions in Install the quarto-webr extension.\nStarting from Quarto v1.4, you will receive an improved error message that emphasizes the extension‚Äôs absence from your current working directory.\n\n\nMissing extension error for Quarto v1.4 and later\nFATAL (/Applications/quarto/share/filters/main.lua:129) An error occurred:\nCould not run /Users/jjb/github/demo-webr/webr as a JSON filter.\nPlease make sure the file exists and is executable.\n\nDid you intend 'webr' as a Lua filter in an extension?\nIf so, make sure you've spelled the name of the extension correctly.\n\nThe original Pandoc error follows below.\nError running filter /Users/jjb/github/demo-webr/webr:\nCould not find executable /Users/jjb/github/demo-webr/webr\n\n\nIn versions prior to Quarto v1.4, including v1.3 and earlier, the error message may differ, but it typically signals that the extension is either missing or not executable.\n\n\nMissing extension error for Quarto v1.3 and earlier\nError running filter /Applications/quarto/share/filters/main.lua:\nError running filter /Users/jjb/github/demo-webr/webr:\nCould not find executable /Users/jjb/github/demo-webr/webr\nstack traceback:\n        /Applications/quarto/share/filters/main.lua:4030: in function &lt;/Applications/quarto/share/filters/main.lua:4009&gt;\n        [C]: in ?\n        [C]: in method 'walk'\n        /Applications/quarto/share/filters/main.lua:171: in function 'run_emulated_filter'\n        /Applications/quarto/share/filters/main.lua:449: in local 'callback'\n        /Applications/quarto/share/filters/main.lua:454: in upvalue 'run_emulated_filter_chain'\n        /Applications/quarto/share/filters/main.lua:495: in function &lt;/Applications/quarto/share/filters/main.lua:476&gt;\nstack traceback:\n        /Applications/quarto/share/filters/main.lua:171: in function 'run_emulated_filter'\n        /Applications/quarto/share/filters/main.lua:449: in local 'callback'\n        /Applications/quarto/share/filters/main.lua:454: in upvalue 'run_emulated_filter_chain'\n        /Applications/quarto/share/filters/main.lua:495: in function &lt;/Applications/quarto/share/filters/main.lua:476&gt;\n\n\n\n\nDirectly Accessing Rendered HTML\nProblem: When I directly open the rendered HTML document in a web browser, webR components are not loaded due to security reasons.\nSolution: When you use quarto preview or quarto render, the rendered HTML document is served by mimicking a server running under https://localhost/. In this context, everything usually works fine if you follow the directory structure mentioned above.\nHowever, if you directly open the rendered HTML document (e.g., demo-quarto-web.html) in a web browser, you may encounter issues with WebR components not loading due to security restrictions. This behavior is explained further in this StackOverflow answer.\nTo address this problem and avoid the need for a local Quarto installation to open the rendered file directly, you have a few options:\n\nUse Chrome‚Äôs --allow-file-access-from-files access: You can modify your Chrome shortcut to include the --allow-file-access-from-files flag. This allows local files to access other local files, potentially resolving the issue.\nUse the WebServer for Chrome Extension: Install the WebServer for Chrome extension to serve your HTML files. This extension sets up a local web server that doesn‚Äôt have the same security restrictions as directly opening files.\nUse NPM to Obtain local-web-server: Install the local-web-server package from npm, which is a lightweight, no-configuration-required HTTP server. You can use it to serve your HTML files without encountering security restrictions.\n\n\n\nSpeed Up webR\nProblem: WebR documents are not performing as efficiently as expected.\nSolution: To optimize the performance of webR documents, it‚Äôs essential to set appropriate HTTP headers for COOP and COEP. These headers help speed up the process and ensure a smoother user experience.\nHere are the recommended COOP and COEP headers to use:\nCross-Origin-Opener-Policy: same-origin\nCross-Origin-Embedder-Policy: require-corp\nBy configuring these headers, you enforce a same-origin policy for cross-origin windows and ensure that cross-origin iframes are required to have a COEP policy that allows cross-origin embedding. For more detailed instructions on setting up these headers, please refer to the \"shared-array-buffer\" channel type documentation.\n\n\nEngine Registration\nProblem: When using the knitr engine instead of the jupyter engine and the original tag {webr} instead of {webr-r}, a warning message may appear in the render processing output:\nWarning message:\nIn get_engine(options$engine) :\n  Unknown language engine 'webr' (must be registered via knit_engines$set()).\nSolution: The warning message about the unknown language engine ‚Äòwebr‚Äô is purely cosmetic and does not affect the functionality of the webr filter. It is merely an aesthetic issue and does not impact the execution of code cells.\nThis warning occurs because the knitr engine is not initially aware of the webr engine. However, this lack of awareness does not cause any functional problems. The webr filter will operate as expected despite this warning.\nWhile the warning is not critical, it may be addressed in future updates for aesthetic reasons. Nevertheless, you can safely disregard this warning message as it does not interfere with the functionality of your webR documents."
  },
  {
    "objectID": "qwebr-communication-channels.html",
    "href": "qwebr-communication-channels.html",
    "title": "Communication Channels",
    "section": "",
    "text": "As you dive deeper into using webR, it‚Äôs crucial to grasp how webR manages communication between R and your web browser. Think of it as a conversation between two active workers or ‚Äúthreads‚Äù:\nNow, here‚Äôs why this separation is so important: webR‚Äôs special version of R can tackle complicated and time-consuming calculations without causing your web browser to freeze or become unresponsive when you‚Äôre on a web page that uses webR.\nImagine trying to watch a video online while your computer is running a heavy software update. Without separating them, your video might start buffering, freeze, or even crash. But by putting the update in the background (on a separate worker, like webR), your video can continue to play smoothly. It‚Äôs the same concept with webR and your web browser ‚Äì keeping things running smoothly without hiccups.\nFor more details, please see the official webR documentation on Worker Communication and Serving Web Pages with webR."
  },
  {
    "objectID": "qwebr-communication-channels.html#specifying-how-webr-communicates",
    "href": "qwebr-communication-channels.html#specifying-how-webr-communicates",
    "title": "Communication Channels",
    "section": "Specifying How webR Communicates",
    "text": "Specifying How webR Communicates\nIn a Quarto document‚Äôs YAML header, you can tell webR which communication channel to use by setting the channel-type option. It‚Äôs like telling webR how you want it to talk with your web browser. For example, if you want to use the \"post-message\" channel, you can do it like this:\n---\ntitle: \"Setting Up webR to use the PostMessage Channel\"\nformat: html\nwebr:\n  channel-type: \"post-message\"\nfilters:\n- webr\n---"
  },
  {
    "objectID": "qwebr-communication-channels.html#sec-automatic",
    "href": "qwebr-communication-channels.html#sec-automatic",
    "title": "Communication Channels",
    "section": "Using ‚Äúautomatic‚Äù for Communication (Default)",
    "text": "Using ‚Äúautomatic‚Äù for Communication (Default)\nBy default, the quarto-webr extension guides webR to use the \"automatic\" option for channel-type, if you don‚Äôt specify the channel-type in your document‚Äôs YAML header. Let‚Äôs break down how this default setting works:\n\nCommunication Attempts: webR will try two different communication channels in order:\n\nFirst, it attempts to establish a communication channel using \"shared-array-buffer\".\nIf that doesn‚Äôt work, it will then try to use \"service-worker\".\n\nFallback Behavior: If both of these attempts are unsuccessful, webR code cells in your document will be shown in a deactivated state. This means they won‚Äôt run or execute any R code.\n\n\n\n\n\n\n\nNote\n\n\n\nIt‚Äôs important to note that the \"automatic\" option doesn‚Äôt try to use the \"post-message\" option for communication.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nOne thing to be aware of is that when the \"automatic\" option is used, it adds two additional files, webr-serviceworker.js and webr-worker.js, into the output directory. These files must be present alongside the rendered HTML document if you intend to use the \"service-worker\" option. For more details on this, please refer to the Section¬†2.3 section of the documentation.\n\n\nIn summary, when you leave the channel-type unspecified, webR will follow the \"automatic\" option, attempting to use \"shared-array-buffer\" and then \"service-worker\". If both attempts fail, your webR code cells will be inactive."
  },
  {
    "objectID": "qwebr-communication-channels.html#sec-shared-array-buffer",
    "href": "qwebr-communication-channels.html#sec-shared-array-buffer",
    "title": "Communication Channels",
    "section": "Using ‚Äúshared-array-buffer‚Äù for Communication",
    "text": "Using ‚Äúshared-array-buffer‚Äù for Communication\nNow, let‚Äôs explore the \"shared-array-buffer\" option for communication. When you specify channel-type as \"shared-array-buffer\", webR aims to use something called SharedArrayBuffer. This choice, however, comes with some specific requirements and benefits:\nRequirements:\n\nYour web server needs to send web pages with webR using specific HTTP headers. This is to ensure that the page is cross-origin isolated. In simple terms, your server must be set up to allow this kind of communication otherwise webR will not work.\n\nBenefits:\n\nThe benefit of using this approach is that webR runs notably faster. It‚Äôs like giving webR a high-speed lane for its operations.\n\n\n\n\n\n\n\nNote\n\n\n\nIt‚Äôs important to note that the \"shared-array-buffer\" option isn‚Äôt currently available on platforms like GitHub Pages or Quarto Pub. If you‚Äôre using these services, we recommend using the channel-type: \"post-message\" option instead. There‚Äôs a possibility that GitHub Pages may offer the option to set the necessary headers in the future, as discussed here.\n\n\nTo help you set up the necessary headers for cross-origin isolation, we provide some guidance for both Netlify and nginx web server administrators:\nFor Netlify Configuration:\nIf you‚Äôre hosting your website with Netlify, you can add the following code to your netlify.toml configuration file:\n[[headers]]\n  for = \"/directory/with/webr/content/*\"\n\n  [headers.values]\n    Cross-Origin-Opener-Policy = \"same-origin\"\n    Cross-Origin-Embedder-Policy = \"require-corp\"\nFor nginx Web Server Administrators:\nIf you‚Äôre managing a server with nginx, you can use the add_header directive in your server‚Äôs configuration file, which is usually found at /etc/nginx/nginx.conf. Here‚Äôs an example:\nserver {\n  # Enable headers for the webr directory\n  location ^~ /directory/with/webr/content {\n    add_header \"Cross-Origin-Opener-Policy\" \"same-origin\";\n    add_header \"Cross-Origin-Embedder-Policy\" \"require-corp\";\n  }\n}\nBy following these instructions, you‚Äôll ensure that your web server is set up to display web pages with a cross-origin isolated status, allowing you to use the \"shared-array-buffer\" option effectively."
  },
  {
    "objectID": "qwebr-communication-channels.html#sec-service-worker",
    "href": "qwebr-communication-channels.html#sec-service-worker",
    "title": "Communication Channels",
    "section": "Using ‚Äúservice-worker‚Äù for Communication",
    "text": "Using ‚Äúservice-worker‚Äù for Communication\nHere, we‚Äôll dive into the \"service-worker\" option for communication.\n\n\n\n\n\n\nWarning\n\n\n\nThe \"service-worker\" option doesn‚Äôt work with Quarto Pub. If you‚Äôre hosting documents with Quarto Pub, please use the channel-type: \"post-message\" option instead. There‚Äôs an ongoing effort to address the service worker upload issue with the Quarto team, which you can track here.\n\n\nWhen you set channel-type to \"service-worker\", webR changes its communication channel to use the Service Worker API. This means you need two worker scripts, webr-worker.js and webr-serviceworker.js, hosted on the same website as the page using webR.\nHere‚Äôs what you need to ensure:\n1. Worker Scripts: The quarto-webr extension will automatically create and register these workers when your Quarto document is rendered.\n2. Directory Structure: Your initial directory structure should include these files:\n.\n‚îú‚îÄ‚îÄ _extensions/coatless/webr\n‚îî‚îÄ‚îÄ demo-quarto-webr.qmd\nAfter rendering the Quarto document with the \"service-worker\" option, your directory will look like this:\n.\n‚îú‚îÄ‚îÄ _extensions/coatless/webr\n‚îú‚îÄ‚îÄ demo-quarto-webr.qmd\n‚îú‚îÄ‚îÄ demo-quarto-webr.html  # Rendered document\n‚îú‚îÄ‚îÄ webr-serviceworker.js  # Service workers\n‚îî‚îÄ‚îÄ webr-worker.js\n3. Hosting: When hosting your rendered document, you need to make sure the rendered HTML document and the service worker files (webr-serviceworker.js and webr-worker.js) are present on the server. This is important for everything to work correctly:\n.\n‚îú‚îÄ‚îÄ demo-quarto-webr.html  # Rendered document\n‚îú‚îÄ‚îÄ webr-serviceworker.js  # Service workers\n‚îî‚îÄ‚îÄ webr-worker.js\nIf you want to change where the service workers are located, you can set the service-worker-url option in the document YAML. By default, the rendered document will search for the service workers in its current directory.\nIn a nutshell, the ‚Äúservice-worker‚Äù option is a powerful choice for communication with webR, but you need to ensure the correct setup and hosting to make it work smoothly."
  },
  {
    "objectID": "qwebr-communication-channels.html#sec-post-message",
    "href": "qwebr-communication-channels.html#sec-post-message",
    "title": "Communication Channels",
    "section": "Using ‚Äúpost-message‚Äù for Communication",
    "text": "Using ‚Äúpost-message‚Äù for Communication\nNow, let‚Äôs delve into the \"post-message\" option. This sets up a communication channel using something called Post Message. It‚Äôs a good choice when you can‚Äôt use cross-isolation or service workers. This option is simpler to set up and works in more places, like RStudio‚Äôs preview pane or the built-in browser in VSCode.\nHowever, there are some trade-offs. While it‚Äôs easier to get started, certain R features that need to pause and wait for input (like readline(), menu(), browser(), etc.) won‚Äôt work as expected. Instead, they‚Äôll return empty values like \"\" or c('', ''). Also, you won‚Äôt have the option to stop or interrupt long-running R code. In those cases, you‚Äôll need to refresh the page to regain control.\nFeel free to experiment with the \"post-message\" interface in this webR code cell:\nüü° Loading\n  webR..."
  },
  {
    "objectID": "examples/website/example-page.html",
    "href": "examples/website/example-page.html",
    "title": "Example page",
    "section": "",
    "text": "On this page, we set two options directly in the Quarto document. The rest of the options are coming from the _quarto.yml project file. These options are considered ‚Äúglobal‚Äù.\nThe local options that we enabled are to show the webR status bar and to pre-install the ggplot2 package.\nlibrary(ggplot2)\n\np &lt;- ggplot(mpg, aes(cyl, hwy))\np + geom_jitter(aes(colour = class))\n\n\n\n\n\n\nNote\n\n\n\nIf we did not specify the package dependency in the document header, then we would need to add to the code cell the installation command of webr::install('ggplot2') prior to using library(ggplot2)."
  },
  {
    "objectID": "examples/book/example-page.html",
    "href": "examples/book/example-page.html",
    "title": "Example page",
    "section": "",
    "text": "On this page, we set two options directly in the Quarto document. The rest of the options are coming from the _quarto.yml project file. These options are considered ‚Äúglobal‚Äù.\nThe local options that we enabled are to show the webR status bar and to pre-install the ggplot2 and dplyr packages. We create a hypothetical document that compares and constrasts Base R code with Tidyverse code.\n\nSorting\nConsider the need to find the highest or lowest values. In this case, we‚Äôre seeking to sort or modify the order of the data.\n\nBase Rtidyverse\n\n\nwithin(mtcars, {\n    mtcars[order(cyl, disp), , drop = FALSE]\n})\n\n\nlibrary(dplyr)\nmtcars |&gt; \n    arrange(cyl, disp)\n\n\n\n\n\nSummarize\nNext, let‚Äôs take a look at how summarization differs between Base R and the Tidyverse\n\nBase Rtidyverse\n\n\nmtcars_by &lt;- by(mtcars, mtcars$cyl, function(df) {\n  with(df, data.frame(cyl = cyl[[1]], mean = mean(disp), n = nrow(df)))\n})\ndo.call(rbind, mtcars_by)\n\n\nlibrary(dplyr)\n\nmtcars |&gt; \n  group_by(cyl) |&gt; \n  summarise(mean = mean(disp), n = n())\n\n\n\n\n\nGraphing\nNext, let‚Äôs take a look at how summarization differs between Base R and the Tidyverse\n\nBase Rtidyverse\n\n\nplot(mtcars$wt, mtcars$mpg,\n   main = \"Scatterplot in Base R\",\n   xlab = \"Car Weight\", ylab = \"MPG\", \n   col = \"blue\", lwd = 1)\nabline(lm(mtcars$mpg ~ mtcars$wt), col = \"red\")\n\n\nlibrary(ggplot2)\n\nggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_point(size=2, color=\"blue\", stroke=1) + \n  geom_smooth(method=lm, color=\"red\") +\n  ggtitle(\"Scatterplot in ggplot2\") +\n  xlab(\"Car Weight\")"
  },
  {
    "objectID": "qwebr-faq.html",
    "href": "qwebr-faq.html",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "Welcome to our Frequently Asked Questions (FAQ) page, your go-to resource for finding answers to common queries about the quarto-webr extension. If you can‚Äôt find the answer you‚Äôre looking for, don‚Äôt hesitate to reach out to our community for additional support by opening a question or a bug report on the issue tracker.\n\nStability and Long Term Support\n\nQ. Would you say the quarto-webr extension API is stable? Thinking about starting to convert course notes and wondering where the project is in terms of stability.\n\nYes, the quarto-webr extension API can be considered stable for most practical purposes. It has undergone significant development and testing to ensure that it functions reliably and consistently within the Quarto framework. You can confidently start converting your course notes and materials using this extension.\nHowever, it‚Äôs important to keep in mind a few considerations:\n\nDependency on Quarto and webR projects: The quarto-webr extension relies on the main webR project for its core functionality. While we actively maintain the quarto-webr extension and aim to keep it compatible with the latest versions of Quarto and webR, we cannot control what happens upstream at either project. Changes or updates to either project may occasionally require adjustments in the extension. For the most part, these adjustments will be largely hidden.\nVersion compatibility: It‚Äôs important to note that the version of the R client and R packages that is downloaded for webR execution may affect your materials. It‚Äôs advisable to periodically review and update your teaching materials, especially when major changes occur in R version or R package contents, just as before.\nStart with a small set: When converting your course materials, it‚Äôs a good practice to start with a small set of materials as a pilot. This allows you to familiarize yourself with the extension‚Äôs functionality and raise/address any specific issues that may arise during the conversion process. Once you are comfortable with the workflow and have tested your materials, you should proceed with converting the rest of your course content.\n\n\n\nImproving Performance\n\n\nWhat are your plans, if any, for scaling webR to handle complex content faster?\n\n\nFor handling complex content, we recommend setting the channel-type option to the 'shared-array-buffer', which can significantly speed up its execution. This environment requires the proper configuration of HTTP headers for Cross-Origin Embedder Policy (COEP) and Cross-Origin Opener Policy (COOP). By setting these headers correctly, you can already achieve notable speed improvements when working with webR.\nHowever, for further enhancements and speed optimizations beyond what the COEP and COOP headers provide, we recommend keeping an eye on the main webR project‚Äôs documentation. The core webR project continuously works on improving performance and scalability, so any future advancements in handling complex content faster will likely originate from their developments.\n\n\nwebR Limitations\n\nQ. I noticed that built in docs with ? don‚Äôt work in webR. Are there any other known issues? How long to feature parity?\n\nRegarding feature parity with the main webR project, it‚Äôs important to understand that quarto-webr inherits the same limitations and capabilities as the core webR technology. Efforts to address these limitations and bring feature parity will depend on the ongoing development of webR itself and the evolution of WebAssembly and web browser capabilities. While there may be progress in mitigating some of these limitations over time, achieving complete feature parity may be a complex and ongoing process. In the case of help documentation, we added support in quarto-webr v0.3.7.\nThe known limitations at this time are:\n\nPackage Installation: Installing packages from source within webR is not currently supported. This limitation is unlikely to change in the near future as it would require a complete C and Fortran compiler toolchain to run within the browser. As a result, the only supported way to install R packages in webR is by providing pre-compiled WebAssembly binaries.\nGraphics Device: The webr::canvas() graphics device relies on OffscreenCanvas support in the web browser or JavaScript engine running webR. This means that a modern and up-to-date browser is required for plotting with this device. Older browsers without OffscreenCanvas support can still create plots using the Cairo-based graphics devices, such as png().\nCommunication Channels: webR relies on communication channels for interaction. Without cross-origin isolation, it falls back to the ServiceWorker communication channel, which may result in reduced performance or require additional setup.\nInterruption of Running Code: Interruption of running R code and the use of nested R REPLs (such as readline(), menu(), browser(), etc.) are unsupported when using the PostMessage communication channel.\nSystem Command: The system() command is not implemented in webR, which means that executing system-level commands from within R code or packages is not possible.\n\n\n\nState of Accessibility\n\nQ. You mentioned there has been some work on accessibility. I‚Äôm curious what the current state of accessibility is? What are the known issues?\n\nAccessibility is an important aspect of webR, and we are committed to ensuring that the tool is usable by individuals with disabilities. To address accessibility concerns, we have engaged the expertise of JooYoung Seo, an Assistant Professor in the School of Information Sciences (iSchool) at the University of Illinois Urbana-Champaign. JooYoung specializes in accessibility within Data Science and has been instrumental in conducting periodic accessibility reviews of webR.\nOne of the primary areas of focus has been making sure that screen readers can easily identify and interact with code cells on the page. This ensures that individuals with visual impairments can effectively use webR. While we‚Äôve made significant strides in improving accessibility, we continue to work on addressing any known issues and enhancing the overall accessibility of the tool. We are committed to providing an inclusive and user-friendly experience for all users, and JooYoung‚Äôs expertise has been invaluable in this regard.\n\n\nPackage Usage\n\nQ. Does the use of R packages cause any issues for you when teaching content with webR and Quarto?\n\nWhen teaching content with webR and Quarto, the use of R packages is certainly supported. However, it‚Äôs important to be aware of a few considerations that can help ensure a smooth teaching experience.\nIn a typical R environment, packages are installed once and are available for subsequent sessions using library() or require(). In webR, packages are installed on each session. This means that each webR session starts with a clean slate, and packages need to be installed again for that specific session.\nTo optimize this process and avoid unnecessary downloads, it‚Äôs recommended to use the webr::install() function instead of the standard install.packages() function. webr::install() checks if a package is already installed and does not re-download it if it‚Äôs already available. This can significantly speed up the package installation process when working with webR and Quarto.\nOne way to simplify the teaching process and prevent students from working while packages are being installed is to use the built-in packages option in the document‚Äôs header. This option hides the installation process from students and ensures that the required packages are pre-installed when they access the document.\nFinally, it‚Äôs worth noting that the R packages available to webR may not always be the latest versions that you can get from CRAN (the Comprehensive R Archive Network). Therefore, it‚Äôs a good practice to check the package versions and ensure compatibility with your teaching materials.\n\n\nDebugging\n\nQ. How are error messages, etc. communicated in webr‚Äôs interface? Would it be easy for a student to debug without the tools that are available in the RStudio?\n\nError messages, warnings, and other diagnostic information are presented in the output of a quarto-webr interface, just like in a standard R environment. These messages appear directly below the code cell that generated them. While quarto-webr provides a user-friendly interface for working with R in a web browser, it does not offer advanced debugging tools like debug(), debugonce(), debuggingState(), or setBreakpoint(). Therefore, debugging in quarto-webr is primarily reliant on interpreting the error messages and warnings displayed in the output. For students familiar with RStudio‚Äôs debugging tools, transitioning to quarto-webr may require an adjustment to debugging practices. However, the clear presentation of error messages in the output makes it relatively straightforward for students to identify and address issues in their code.\n\n\nStyling\n\nQ. Is it possible to style the UI elements the quarto-webr extension add to your document? Do they get affected by styling/theme changes so things look coherent?\n\nCertainly! You have the flexibility to style the UI elements added by the quarto-webr extension to your document. These elements are categorized into three distinct areas, each of which can be styled individually. They are identifiable by their unique id and class attributes:\n\nInteractive Code Editor: This is where you input and edit your R code.\n\nid: #webr-editor-{{ID}}\nclass: .webr-editor\n\nOutput Area: This is where the results and output of your R code are displayed.\n\nid: #webr-code-stdout-{{ID}}\nclass: .webr-code-stdout\n\nRun Button: The button that triggers the execution of your R code.\n\nid: #webr-btn-run-{{ID}}\nclass: .webr-btn-run\n\n\nThe {{ID}} in these identifiers represents the instance of the element on the page, such as the first, second, or nth occurrence. By targeting the specific id or class attributes in your document‚Äôs CSS or by including a separate CSS file, you can control their appearance as per your design preferences.\nFor example, you can insert new CSS elements by using:\n```{=html}\n&lt;style&gt;\n.webr-code-stdout {background-color: powderblue;}\n.webr-btn-run   {color: blue;}\n&lt;/style&gt;\n```\nAdditionally, if you are using a Quarto theme, you can leverage theme-specific styling options to ensure that these UI elements align with the overall theme of your document.\n---\ntitle: My post\nformat:\n  html: \n    theme:\n      - cosmo\n      - custom.scss\n---"
  },
  {
    "objectID": "qwebr-internal-cell.html",
    "href": "qwebr-internal-cell.html",
    "title": "Hiding and Executing Code",
    "section": "",
    "text": "In quarto-webr, you have the ability to execute code cells without displaying the code or its output. This feature can be particularly useful for preloading variables, loading datasets, creating visualizations, or checking student solutions without revealing the code to end users."
  },
  {
    "objectID": "qwebr-internal-cell.html#setup---hidden-evaluation-and-output",
    "href": "qwebr-internal-cell.html#setup---hidden-evaluation-and-output",
    "title": "Hiding and Executing Code",
    "section": "‚Äúsetup‚Äù - Hidden Evaluation and Output",
    "text": "‚Äúsetup‚Äù - Hidden Evaluation and Output\nYou can create hidden setup code cells within your document using the special comment #| context: setup. The code within these cells executes discreetly in the background without displaying the code or its output.\n```{webr-r}\n#| context: setup\nmeaning_of_life = 42\n```\nIn the example above, we‚Äôve pre-loaded the meaning_of_life variable with a value of 42. If you proceed to run the subsequent code cell, you‚Äôll observe the value of meaning_of_life being displayed as 42.\n\t\nüü° Loading\n  webR...\n\n\n  \n\n\nBy incorporating the setup hidden code cell for data loading and preprocessing, you enhance the user experience by providing them with an accessible and interactive environment for working with the data while maintaining a clutter-free and organized document structure."
  },
  {
    "objectID": "qwebr-internal-cell.html#output---hidden-evaluation-with-results-shown",
    "href": "qwebr-internal-cell.html#output---hidden-evaluation-with-results-shown",
    "title": "Hiding and Executing Code",
    "section": "‚Äúoutput‚Äù - Hidden Evaluation with Results Shown",
    "text": "‚Äúoutput‚Äù - Hidden Evaluation with Results Shown\nYou also have the choice of crafting an output-only code cell within your quarto-webr document, achieved by incorporating the special comment #| context: output. The code inside this cell executes quietly in the background and reveals its output when the execution is complete. The output can take the form of either text or graphics.\nFor instance, the following code cell suppresses the creation of the matrix; but, displays the end result.\n```{webr-r}\n#| context: output\nmat2x2 &lt;- matrix(c(1, 2, 3, 4), nrow = 2)\nmat2x2\n```\n\n  \n\n\nIn the next example, the code used to generate the graph is suppressed.\n```{webr-r}\n#| context: output\nplot(\n  mpg ~ wt,\n  data = mtcars,\n  col = \"blue\", \n  xlab = \"Miles/(US) gallon\",\n  ylab = \"Weight (1000 lbs)\",\n  main = \"Miles per Gallon and Weight of Cars\",\n  sub = \"Source: 1974 Motor Trend US magazine.\"\n)\n```\n\n  \n\n\nBy using output code cells, you maintain a streamlined and comprehensible document, focusing on the outcome rather than the intricate data processing steps. This approach will enhance the readability and clarity of your content, making it more accessible and informative to your audience."
  },
  {
    "objectID": "qwebr-internal-cell.html#hidden-loading-of-a-dataset",
    "href": "qwebr-internal-cell.html#hidden-loading-of-a-dataset",
    "title": "Hiding and Executing Code",
    "section": "Hidden Loading of a Dataset",
    "text": "Hidden Loading of a Dataset\nThe setup hidden code cell is a powerful tool for seamlessly pre-loading and preprocessing an entire dataset within your quarto-webr document. This capability enables users to work directly with the loaded data without any distracting code or output.\nIn the following example, we demonstrate the process of loading and preprocessing a dataset. First, we download the dataset from an external source and save it as 'penguins.csv' in the virtual webR file system. Next, we read the data into a data frame named df_penguins. All these operations occur silently in the background, ensuring that your document remains clean and focused on the data‚Äôs application.\n```{webr-r}\n#| context: setup\n\n# Download a dataset\ndownload.file(\n  'https://raw.githubusercontent.com/coatless/raw-data/main/penguins.csv',\n  'penguins.csv'\n)\n\n# Read the data\ndf_penguins = read.csv(\"penguins.csv\")\n```\n\t\nüü° Loading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\nNote\n\n\n\nIf the setup code relies on specific R packages, we strongly recommend specifying the required packages in the document‚Äôs YAML. This approach informs users that the webpage is not yet ready and communicates a clear status update at the top. For example:\n---\nwebr:\n  packages: ['ggplot2', 'dplyr']\n---\nLearn more on the Using R Packages documentation page."
  },
  {
    "objectID": "qwebr-internal-cell.html#hidden-summarization",
    "href": "qwebr-internal-cell.html#hidden-summarization",
    "title": "Hiding and Executing Code",
    "section": "Hidden Summarization",
    "text": "Hidden Summarization\nYou can use the output hidden code cell to generate summarized information about retrieved or manipulated data. This powerful feature enables you to process and summarize data without displaying the intermediary steps or code, keeping your document clean and focused on the results.\nFor instance, in the code cell below, we transform the mtcars dataset, converting variables, and then promptly produce a summary of the modified data.\n```{webr-r}\n#| context: output\nmtcars2 &lt;- within(mtcars, {\n   vs &lt;- factor(vs, labels = c(\"V\", \"S\"))\n   am &lt;- factor(am, labels = c(\"automatic\", \"manual\"))\n   cyl  &lt;- ordered(cyl)\n   gear &lt;- ordered(gear)\n   carb &lt;- ordered(carb)\n})\nsummary(mtcars2)\n```"
  },
  {
    "objectID": "qwebr-internal-cell.html#hidden-solution-checking-of-student-work",
    "href": "qwebr-internal-cell.html#hidden-solution-checking-of-student-work",
    "title": "Hiding and Executing Code",
    "section": "Hidden Solution Checking of Student Work",
    "text": "Hidden Solution Checking of Student Work\n\n\n\n\n\n\nWarning\n\n\n\nPlease be aware that any solution written in a webR hidden code cell can be obtained by viewing the document‚Äôs HTML source code. It is not recommended for formal assessments such as exams, quizzes, or homework.\n\n\nIn webR, you can check student answers by providing an answer key and a comparison function within the document.\nFor instance, you can create a solution data frame like this:\n```{webr-r}\n#| context: setup\nanswer_frame &lt;- data.frame(\n  problem = c(\"1a\", \"1b\", \"2\"),\n  answer = c(10, 2, 3/16),\n  tol = c(0.001, 0, 1/32)\n)\n```\nNext, define an internal check function:\n```{webr-r}\n#| context: setup\ncheck &lt;- function(problem, answer) {\n  aframe &lt;- answer_frame\n  if(!problem %in% aframe$problem) {\n    error_msg &lt;- paste0(\"Please enter a valid problem. (\", paste0(aframe$problem, collapse = \",\"), \")\")\n    stop(error_msg)\n  }\n\n  solution &lt;- aframe[which(aframe$problem == problem), \"answer\"]\n\n  ifelse(\n    all.equal(answer, solution, tolerance = 0.001) == TRUE,\n    \"Correct! Well done.\",\n    \"Incorrect! Good attempt. Let's try again?\"\n  )\n}\n```\n\t\nStudents can then compare their answers to the answer key using the check() function.\nFor example, consider the question:\n\nWhat is 9 + 1?\n\nüü° Loading\n  webR..."
  },
  {
    "objectID": "qwebr-first-steps.html",
    "href": "qwebr-first-steps.html",
    "title": "Making your first webR-powered Quarto document",
    "section": "",
    "text": "To get started, we highly recommend watching our walkthrough video. This video provides an in-depth breakdown of how to use a Quarto extension like quarto-webr within a Quarto document. Following that, delve into the subsequent sections that highlight crucial workflow changes for incorporating webR functionality into your Quarto HTML documents. We strongly encourage you to bookmark this page, as it serves as an invaluable reference for users of all expertise levels."
  },
  {
    "objectID": "qwebr-first-steps.html#workflow-video",
    "href": "qwebr-first-steps.html#workflow-video",
    "title": "Making your first webR-powered Quarto document",
    "section": "Workflow Video",
    "text": "Workflow Video\n\n\n\nCreating your first webR-powered Quarto Document inside of RStudio"
  },
  {
    "objectID": "qwebr-first-steps.html#installation",
    "href": "qwebr-first-steps.html#installation",
    "title": "Making your first webR-powered Quarto document",
    "section": "Installation",
    "text": "Installation\nTo use this extension in a Quarto project, install it from within the project‚Äôs working directory by typing into Terminal:\nquarto add coatless/quarto-webr\n\n\n\nDemonstration of using the Terminal tab to install the extension.\n\n\n\n\n\n\n\n\nNote\n\n\n\nQuarto extensions are project-specific installations and are not stored in a global library, unlike R packages. This means that for every new Quarto project or directory where you create a Quarto Document, you‚Äôll need to install the extension again."
  },
  {
    "objectID": "qwebr-first-steps.html#usage",
    "href": "qwebr-first-steps.html#usage",
    "title": "Making your first webR-powered Quarto document",
    "section": "Usage",
    "text": "Usage\nOnce the extension is successfully installed, you can begin utilizing it in your Quarto documents located within the same working directory as the _extensions folder. To activate the webR functionality in those documents, follow these steps:\n\nAdd webr Filter: In the header of your Quarto document, add the webr filter to the list of filters:\n\nfilters:\n  - webr\n\nUse {webr-r} Code Blocks: Write your R code within code blocks marked with {webr-r}. Here‚Äôs an example:\n\n---\ntitle: webR in Quarto HTML Documents\nformat: html\nengine: knitr\nfilters:\n  - webr\n---\n\nThis is a webr-enabled code cell in a Quarto HTML document.\n\n```{webr-r}\nfit = lm(mpg ~ am, data = mtcars)\nsummary(fit)\n```\n\nRender Your Document: You can now render your Quarto document by clicking on  Render (or use the keyboard shortcut ‚áß‚åòK on macOS or Ctrl+Shift+K on Windows/Linux). The document will execute under engine: knitr by default, but you can specify a different engine if needed.\n\n\n\n\n\n\n\nNote\n\n\n\nIf an engine is not specified, Quarto will attempt to use the jupyter compute engine by default. This may cause an error if jupyter is not installed on your computer.\n\n\nDuring execution, the filter will generate two essential files, webr-worker.js and webr-serviceworker.js, in your working directory. These files are required for the webR session to function properly under the default options and must be present alongside your rendered output."
  },
  {
    "objectID": "qwebr-deployment-templates.html",
    "href": "qwebr-deployment-templates.html",
    "title": "Deployment Templates",
    "section": "",
    "text": "Discover a range of sample deployment templates for the quarto-webr extension at our GitHub repository here. These templates serve as convenient starting points for various web-based projects that harness the power of the quarto-webr extension, enabling interactive data analysis inside of a web browser. Whether you‚Äôre embarking on an individual report, creating an interactive website, or compiling a digital book, these templates simplify the process, making it effortless to kickstart your own projects.\n\nHTML Document Template\nThis template is designed for creating standalone HTML documents with interactive webR functionality. It‚Äôs suitable for individual reports or interactive documents.\n\nExample: You can find an example of an HTML document template here.\nSource Code: Access the source code for this template here.\n\n\n\nWebsite Template**\nThis template is meant for building interactive websites with multiple webR-powered pages. It‚Äôs ideal for creating blog posts, educational platforms, or any web content that requires interactive data analysis.\n\nExample: Explore an example of a website template here.\nSource Code: Access the source code for this template here.\n\n\n\nBook Template\nThe book template is designed for creating interactive web-based books or documentation. It allows you to compile a collection of chapters, sections, and interactive content into a cohesive digital book.\n\nExample: You can view an example of a book template here.\nSource Code: Access the source code for this template here."
  },
  {
    "objectID": "qwebr-readme-example.html",
    "href": "qwebr-readme-example.html",
    "title": "webR in Quarto HTML Documents",
    "section": "",
    "text": "This is a webr-enabled code cell in a Quarto HTML document.\nüü° Loading\n  webR..."
  },
  {
    "objectID": "qwebr-code-cell-demos.html",
    "href": "qwebr-code-cell-demos.html",
    "title": "Exploring Interactive Code Cells",
    "section": "",
    "text": "Welcome to the world of interactive code cells, unlocked by the quarto-webr extension. These cells allow you to run R code directly within your Quarto HTML documents, enabling real-time computations, dynamic visualizations, and more. Let‚Äôs explore the impressive capabilities webR offers."
  },
  {
    "objectID": "qwebr-code-cell-demos.html#fit-a-linear-regression-model",
    "href": "qwebr-code-cell-demos.html#fit-a-linear-regression-model",
    "title": "Exploring Interactive Code Cells",
    "section": "Fit a Linear Regression Model",
    "text": "Fit a Linear Regression Model\nWe begin by using the ‚ÄúHello World‚Äù example of statistics: fitting and analyzing a linear regression.\nüü° Loading\n  webR..."
  },
  {
    "objectID": "qwebr-code-cell-demos.html#create-a-graph-with-base-r",
    "href": "qwebr-code-cell-demos.html#create-a-graph-with-base-r",
    "title": "Exploring Interactive Code Cells",
    "section": "Create a Graph with Base R",
    "text": "Create a Graph with Base R\nFor this example, webR empowers us to create and visualize data plots interactively. We can tweak labels, colors, or even the variables being used on an as-needed basis to explore ‚ÄúWhat if ‚Ä¶‚Äù scenarios. For instance, what if we try changing the value blue to orange and run the code again.\nüü° Loading\n  webR..."
  },
  {
    "objectID": "qwebr-code-cell-demos.html#fill-in-the-blanks",
    "href": "qwebr-code-cell-demos.html#fill-in-the-blanks",
    "title": "Exploring Interactive Code Cells",
    "section": "Fill in the Blanks",
    "text": "Fill in the Blanks\nAnother approach is to purposely leave out part of a command during an exercise to afford students structure in solving it. For example, we could have the question of:\n\nFill in the blank to create an expression that adds up to 42.\n\nüü° Loading\n  webR..."
  },
  {
    "objectID": "qwebr-code-cell-demos.html#fill-in-the-blanks-1",
    "href": "qwebr-code-cell-demos.html#fill-in-the-blanks-1",
    "title": "Exploring Interactive Code Cells",
    "section": "Fill in the Blanks",
    "text": "Fill in the Blanks\nAnother approach is to purposely leave out part of a command during an exercise to afford students structure in solving it. For example, we could have the question of:\n\nFill in the blank to have the following expression add up to 42.\n\nüü° Loading\n  webR..."
  },
  {
    "objectID": "qwebr-code-cell-demos.html#data-wrangle-in-real-time",
    "href": "qwebr-code-cell-demos.html#data-wrangle-in-real-time",
    "title": "Exploring Interactive Code Cells",
    "section": "Data Wrangle in Real Time",
    "text": "Data Wrangle in Real Time\nData manipulation is a crucial part of data analysis. In this example, we‚Äôll modify a data set in real-time and view the results. It‚Äôs like changing ingredients while cooking to get the perfect dish!\nüü° Loading\n  webR..."
  },
  {
    "objectID": "qwebr-code-cell-demos.html#working-with-r-packages",
    "href": "qwebr-code-cell-demos.html#working-with-r-packages",
    "title": "Exploring Interactive Code Cells",
    "section": "Working with R Packages",
    "text": "Working with R Packages\nYou can incorporate R packages available in webR by installing them interactively using webr::install() within a {webr-r} code cell or by specifying them in the document‚Äôs YAML. Once you‚Äôve installed a package, you can harness its power just as you would in a traditional R environment. For more details, please refer to Using R Packages.\n\n\n\n\n\n\nNote\n\n\n\nPlease note that installing certain packages, such as ggplot2, may take some time depending on the communication channel being used.\n\n\nLet‚Äôs take ggplot2 as an example:\nüü° Loading\n  webR...\n\n\n  \n\n\nWith ggplot2 now installed, let‚Äôs create a graph with it!\nüü° Loading\n  webR..."
  },
  {
    "objectID": "qwebr-code-cell-demos.html#variable-definitions-and-reuse",
    "href": "qwebr-code-cell-demos.html#variable-definitions-and-reuse",
    "title": "Exploring Interactive Code Cells",
    "section": "Variable Definitions and Reuse",
    "text": "Variable Definitions and Reuse\nDefine variables in one code cell and reuse them in subsequent cells:\nüü° Loading\n  webR...\n\n\n  \n\n\nüü° Loading\n  webR..."
  },
  {
    "objectID": "qwebr-code-cell-demos.html#functions",
    "href": "qwebr-code-cell-demos.html#functions",
    "title": "Exploring Interactive Code Cells",
    "section": "Functions",
    "text": "Functions\nFunctions can similarly be defined and used in one code cell or multiple code cells.\nüü° Loading\n  webR...\n\n\n  \n\n\nüü° Loading\n  webR...\n\n\n  \n\n\n\n\n\n\n\n\nNote\n\n\n\nThe function definition must be run before calling the function. Otherwise, there will be an error that is generated."
  },
  {
    "objectID": "qwebr-code-cell-demos.html#handling-errors-and-warnings",
    "href": "qwebr-code-cell-demos.html#handling-errors-and-warnings",
    "title": "Exploring Interactive Code Cells",
    "section": "Handling Errors and Warnings",
    "text": "Handling Errors and Warnings\nWhen webR encounters an error while running R code, the error and warning messages are displayed to the user.\nFor example, if the routine has a hard stop, the execution immediately ends, and the message is shared.\nüü° Loading\n  webR...\n\n\n  \n\n\nSimilarly, if a variable is not found, then the code stops being evaluated and returns an error.\nüü° Loading\n  webR...\n\n\n  \n\n\nUnlike errors, warning messages are allowed to propagate into the output without stopping the computation.\nüü° Loading\n  webR...\n\n\n  \n\n\nThis is even the case inside of complex functions.\nüü° Loading\n  webR..."
  },
  {
    "objectID": "qwebr-code-cell-demos.html#escaping-characters-in-a-string",
    "href": "qwebr-code-cell-demos.html#escaping-characters-in-a-string",
    "title": "Exploring Interactive Code Cells",
    "section": "Escaping Characters in a String",
    "text": "Escaping Characters in a String\nHandle special characters in strings with ease:\nüü° Loading\n  webR..."
  },
  {
    "objectID": "qwebr-code-cell-demos.html#anonymous-function-definition",
    "href": "qwebr-code-cell-demos.html#anonymous-function-definition",
    "title": "Exploring Interactive Code Cells",
    "section": "Anonymous Function Definition",
    "text": "Anonymous Function Definition\nDefine and use anonymous functions seamlessly:\nüü° Loading\n  webR..."
  },
  {
    "objectID": "qwebr-code-cell-demos.html#empty-code-cell",
    "href": "qwebr-code-cell-demos.html#empty-code-cell",
    "title": "Exploring Interactive Code Cells",
    "section": "Empty Code Cell",
    "text": "Empty Code Cell\nDefine an empty code cell by simply leaving it blank.\nüü° Loading\n  webR..."
  },
  {
    "objectID": "qwebr-code-cell-demos.html#pre-rendered-code-cell",
    "href": "qwebr-code-cell-demos.html#pre-rendered-code-cell",
    "title": "Exploring Interactive Code Cells",
    "section": "Pre-rendered Code Cell",
    "text": "Pre-rendered Code Cell\nAny code using the usual {r} tag will be executed, and its output saved, just as if you were rendering a Quarto document without the webR extension:\n\nmessage(\"Hello!\")\n\nHello!"
  },
  {
    "objectID": "qwebr-extension-website.html",
    "href": "qwebr-extension-website.html",
    "title": "Extension Website",
    "section": "",
    "text": "Initializing the Project\nTo get started, follow these steps to set up the Quarto extension website project:\n\nCreate a new directory named docs/ within your repository using the following command:\nmkdir docs && cd $_\nInitialize a Quarto website project by running the following command:\nquarto create project website .\n\n\n\nIncorporating the Extension\nTo seamlessly integrate the extension into your project, you‚Äôll need to create a symbolic link to the _extensions folder containing the development version of the extension. This approach helps you avoid maintaining a duplicate copy of the extension in your Git repository history.\nFollow these steps:\n\nNavigate to the docs/ directory in your project.\nCreate a symbolic link to the _extensions folder using the following command:\nln -s ../_extensions _extensions"
  },
  {
    "objectID": "qwebr-release-notes.html",
    "href": "qwebr-release-notes.html",
    "title": "Release Notes",
    "section": "",
    "text": "Added a Global Interpreter Lock (GIL) to ensures that only one code cell runs at a time, preventing simultaneous execution conflicts.\n\nWith this enhancement, you can now enjoy smoother and more predictable execution of your code, without interference from concurrently running code cells.\n\nAdded a visual spinning indicator to emphasize what code cell is currently running. (#64)\nImproved status updates about installing R packages specified in the document‚Äôs package key. (#68)\nFully supported pager event types. (#58)\n\nWith this update, looking at R help documentation for a function is now possible.\n\n\n\n\n\n\nFixed base-url to allow for a localized version of webR away. (#54)\nFixed document-level packages meta option not installing packages if the status bar was not present (#69)\n\n\n\n\n\nAdded an examples/ directory containing examples for HTML Documents, Books, and Websites. (#53)\nAdded a documentation page that contains the extension updates and release dates.\nAdded an FAQ page covering questions from posit::conf(2023). (#56)"
  },
  {
    "objectID": "qwebr-release-notes.html#features",
    "href": "qwebr-release-notes.html#features",
    "title": "Release Notes",
    "section": "",
    "text": "Added a Global Interpreter Lock (GIL) to ensures that only one code cell runs at a time, preventing simultaneous execution conflicts.\n\nWith this enhancement, you can now enjoy smoother and more predictable execution of your code, without interference from concurrently running code cells.\n\nAdded a visual spinning indicator to emphasize what code cell is currently running. (#64)\nImproved status updates about installing R packages specified in the document‚Äôs package key. (#68)\nFully supported pager event types. (#58)\n\nWith this update, looking at R help documentation for a function is now possible."
  },
  {
    "objectID": "qwebr-release-notes.html#bugfixes",
    "href": "qwebr-release-notes.html#bugfixes",
    "title": "Release Notes",
    "section": "",
    "text": "Fixed base-url to allow for a localized version of webR away. (#54)\nFixed document-level packages meta option not installing packages if the status bar was not present (#69)"
  },
  {
    "objectID": "qwebr-release-notes.html#documentation",
    "href": "qwebr-release-notes.html#documentation",
    "title": "Release Notes",
    "section": "",
    "text": "Added an examples/ directory containing examples for HTML Documents, Books, and Websites. (#53)\nAdded a documentation page that contains the extension updates and release dates.\nAdded an FAQ page covering questions from posit::conf(2023). (#56)"
  },
  {
    "objectID": "qwebr-release-notes.html#feature",
    "href": "qwebr-release-notes.html#feature",
    "title": "Release Notes",
    "section": "Feature",
    "text": "Feature\n\nImproved the run selected code shortcut to now also run the current line if no selection is present and advance to the next. (#43)\n\nUse: Cmd + Enter on macOS or Ctrl + Enter on Windows"
  },
  {
    "objectID": "qwebr-release-notes.html#bugfixes-1",
    "href": "qwebr-release-notes.html#bugfixes-1",
    "title": "Release Notes",
    "section": "Bugfixes",
    "text": "Bugfixes\n\nFixed space not being preserved (h/t @nguyenllpsych, #39)\nFixed webR not initializing if a document lacked a title (h/t @jimhester, #40)"
  },
  {
    "objectID": "qwebr-release-notes.html#documentation-1",
    "href": "qwebr-release-notes.html#documentation-1",
    "title": "Release Notes",
    "section": "Documentation",
    "text": "Documentation\n\nAdded a walkthrough video to the getting started page.\nAdded a new page containing community examples of the quarto-webr extension in the wild.\nAdded an example on fill-in-the-blank usage.\nClarified how interactive code cells could be used to explore what-if scenarios.\nMinor documentation fixes."
  },
  {
    "objectID": "qwebr-release-notes.html#deployment",
    "href": "qwebr-release-notes.html#deployment",
    "title": "Release Notes",
    "section": "Deployment",
    "text": "Deployment\n\nAdd new issue templates for questions and examples.\nImproved GitHub repo issue template formatting."
  },
  {
    "objectID": "qwebr-release-notes.html#features-1",
    "href": "qwebr-release-notes.html#features-1",
    "title": "Release Notes",
    "section": "Features",
    "text": "Features\n\nNew documentation website is available at: https://quarto-webr.thecoatlessprofessor.com\nDocument option channel-type sets the communication channel webR uses.\n\nchannel-type: automatic (default): Communicates using either shared-array-buffer or service-worker.\nchannel-type: shared-buffer-array: Fastest communication option, but requires setting up HTTP headers.\nchannel-type: service-worker: Slower communication option and requires worker scripts to be next to the rendered document.\nchannel-type: post-message: Easiest setup option at the expense of being unable to interrupt the R process or accept user-input.\n\nCode cell option context controls whether the code and output are shown or suppressed.\n\ncontext: interactive(default) shows both code and output.\ncontext: setup suppresses both code and output.\ncontext: output suppresses code but shows its output.\nTo use the new hidden code cell feature, the code cell needs #| context: &lt;value&gt; like so:\n\n\n```{webr-r}\n#| context: setup\n\nmy_hidden_variable = 11\n```"
  },
  {
    "objectID": "qwebr-release-notes.html#bugfixes-2",
    "href": "qwebr-release-notes.html#bugfixes-2",
    "title": "Release Notes",
    "section": "Bugfixes",
    "text": "Bugfixes\n\nFixed webR status indicator appearing outside of the header. (#33)\nFixed button styling difference between standalone documents and website-based documents."
  },
  {
    "objectID": "qwebr-release-notes.html#documentation-2",
    "href": "qwebr-release-notes.html#documentation-2",
    "title": "Release Notes",
    "section": "Documentation",
    "text": "Documentation\n\nCreated the docs folder inside the repository to host the documentation website.\nMoved documentation from the README.md file onto separate web pages.\n\nAcknowledgements now has a dedicated page thanking contributors and collaborators.\nDeveloper resources expands on the reference resources.\nUsing R packages describes the best practices for using R‚Äôs ecosystem of extensions\nCustomization Options describes the document level options available to be set in document‚Äôs YAML field.\n\nAdded new documentation entries for hidden code cell evaluation and communication channels.\nAdded a rendered version of the README example to the website.\nIncorporated additional examples into the ‚ÄúExploring Interactive Code Cells‚Äù demo document."
  },
  {
    "objectID": "qwebr-release-notes.html#deployment-1",
    "href": "qwebr-release-notes.html#deployment-1",
    "title": "Release Notes",
    "section": "Deployment",
    "text": "Deployment\n\nAdded a Quarto action to render and publish the documentation website.\nAdded issue templates for feature requests and bug fixes.\nSymlink the _extension directory into docs to avoid needing to add the extension on each render."
  },
  {
    "objectID": "qwebr-release-notes.html#feature-1",
    "href": "qwebr-release-notes.html#feature-1",
    "title": "Release Notes",
    "section": "Feature",
    "text": "Feature\n\nUpgraded the MonacoEditor version to v0.43.0 from v0.31.0"
  },
  {
    "objectID": "qwebr-release-notes.html#bugfixes-3",
    "href": "qwebr-release-notes.html#bugfixes-3",
    "title": "Release Notes",
    "section": "Bugfixes",
    "text": "Bugfixes\n\nFixed quarto-webr documents requiring a reload in Safari to see/interact with code cells (#21)\nFixed keyboard shortcuts not re-initializing correctly on multiple Monaco Editors by re-registering shortcuts on code cell focus (#28)"
  },
  {
    "objectID": "qwebr-release-notes.html#feature-2",
    "href": "qwebr-release-notes.html#feature-2",
    "title": "Release Notes",
    "section": "Feature",
    "text": "Feature\n\nUpgrades the extension to use webR v0.2.1"
  },
  {
    "objectID": "qwebr-release-notes.html#feature-3",
    "href": "qwebr-release-notes.html#feature-3",
    "title": "Release Notes",
    "section": "Feature",
    "text": "Feature\n\nImplements changes required to run webR v0.2.0"
  },
  {
    "objectID": "qwebr-release-notes.html#bug-fix",
    "href": "qwebr-release-notes.html#bug-fix",
    "title": "Release Notes",
    "section": "Bug fix",
    "text": "Bug fix\n\nAttempted to resolve missing service workers for published Quarto webR enabled documents on https://quarto.pub"
  },
  {
    "objectID": "qwebr-release-notes.html#deployment-2",
    "href": "qwebr-release-notes.html#deployment-2",
    "title": "Release Notes",
    "section": "Deployment",
    "text": "Deployment\n\nAdded a GitHub actions website deployment workflow to generate sample pages.\nAdded a devcontainer.json for development on GitHub\nAdded a script to update the version of Quarto used inside of the devcontainer.json."
  },
  {
    "objectID": "qwebr-release-notes.html#breaking-changes",
    "href": "qwebr-release-notes.html#breaking-changes",
    "title": "Release Notes",
    "section": "Breaking Changes",
    "text": "Breaking Changes\n\nWe‚Äôve transitioned the code editor used in the quarto-webr extension to Monaco Editor from CodeMirror for improved accessibility.\n\nSpecial thanks go out to JooYoung Seo (Website) for identifying the accessibility issue and submitting a pull request to incorporate the editor."
  },
  {
    "objectID": "qwebr-release-notes.html#features-2",
    "href": "qwebr-release-notes.html#features-2",
    "title": "Release Notes",
    "section": "Features",
    "text": "Features\n\nCode editing areas on the Quarto document now use the Monaco Editor for improved accessibility.\nExecute code using keyboard shortcuts:\n\nRun selected code using: [Cmd + Enter] on macOS or [Ctrl+Enter] on Windows\nRun the entire code area using: [Shift+Enter]\n\nDynamically growing code editor as new lines are added.\nAnnouncing the status changes of webR initialization states through arias."
  },
  {
    "objectID": "qwebr-release-notes.html#features-3",
    "href": "qwebr-release-notes.html#features-3",
    "title": "Release Notes",
    "section": "Features",
    "text": "Features\n\nUpgraded the version of webR to use v0.1.1.\nSet options directly inside the document‚Äôs YAML header to control webR:\n\nSupport is available for setting the following WebR.WebROptions options:\n\nhome-dir: The WebAssembly user‚Äôs home directory and initial working directory (Documentation). Default: '/home/web_user'.\nbase-url: The base URL used for downloading R WebAssembly binaries. (Documentation). Default: 'https://webr.r-wasm.org/[version]/'.\nservice-worker-url: The base URL from where to load JavaScript worker scripts when loading webR with the ServiceWorker communication channel mode (Documentation). Default: ''.\n\n\nwebR initialization status stages are now described and shown as stoplights (inspired by Bob Rudis)\n\nshow-startup-message: Display in the document header the state of WebR initialization. Default: true\nshow-header-message: Display in the document header whether COOP and COEP headers are in use for faster page loads. Default: false\n\n\n\n\n\nNew status lighting"
  },
  {
    "objectID": "qwebr-release-notes.html#breaking-changes-1",
    "href": "qwebr-release-notes.html#breaking-changes-1",
    "title": "Release Notes",
    "section": "Breaking Changes",
    "text": "Breaking Changes\n\nWe‚Äôve transitioned to using the {webr-r} code cell designation from our original {webr} designation.\n\nThe {webr-r} tag allows for code cell evaluation prior to rendering the document\nMoreover, the {webr-r} component does not need to be registered under the knitr compute engine."
  },
  {
    "objectID": "qwebr-release-notes.html#bugfix",
    "href": "qwebr-release-notes.html#bugfix",
    "title": "Release Notes",
    "section": "Bugfix",
    "text": "Bugfix\n\nEscape characters \\ are further escaped.\n\n```{webr}\nadd_one &lt;- \\(x) x + 1\nadd_one(2)\n```\nShould now appear in a webR code cell as:\nadd_one &lt;- \\(x) x + 1\nadd_one(2)"
  },
  {
    "objectID": "qwebr-release-notes.html#documentation-3",
    "href": "qwebr-release-notes.html#documentation-3",
    "title": "Release Notes",
    "section": "Documentation",
    "text": "Documentation\n\nAdded details on how to host webR content\nAdded additional examples and details in the webr-demo.qmd file."
  },
  {
    "objectID": "qwebr-release-notes.html#bug-fixes",
    "href": "qwebr-release-notes.html#bug-fixes",
    "title": "Release Notes",
    "section": "Bug Fixes",
    "text": "Bug Fixes\n\nFixed the error of figure margins too large due to canvas sizing issues.\nRemoved the attempt to switch between / and '' if COOP and COEP are not present. Defaults to relative directory."
  },
  {
    "objectID": "qwebr-release-notes.html#features-4",
    "href": "qwebr-release-notes.html#features-4",
    "title": "Release Notes",
    "section": "Features",
    "text": "Features\n\nEnable webR code cells inside of a Quarto document.\n\n\n\n\nquarto-webr Filter in Action"
  },
  {
    "objectID": "qwebr-meta-options.html",
    "href": "qwebr-meta-options.html",
    "title": "Customization Options",
    "section": "",
    "text": "The quarto-webr extension empowers you to tailor your webR environment to meet your unique requirements. By configuring various options in your document‚Äôs YAML header, you can structure the webR experience on a per-page basis. Below, we explore these customization options and how to implement them."
  },
  {
    "objectID": "qwebr-meta-options.html#webr-options",
    "href": "qwebr-meta-options.html#webr-options",
    "title": "Customization Options",
    "section": "webR options",
    "text": "webR options\nBy specifying various WebROptions options in the document YAML, you can create a personalized webR experience\n\nhome-dir\n\nDescription: Set the WebAssembly user‚Äôs home directory and initial working directory.\nDefault Value: '/home/web_user'\nDocumentation: homeDir\n\n\n\nbase-url\n\nDescription: Define the base URL for downloading R WebAssembly binaries.\nDefault Value: 'https://webr.r-wasm.org/[version]/'\nDocumentation: baseUrl\n\n\n\nchannel-type\n\nDescription: Specify the communication channel type to interact with webR.\nDefault Value: \"automatic\" (0)\nPossible Values: \"automatic\" (0), \"shared-array-buffer\" (1), \"service-worker\" (2), \"post-message\" (3).\nDocumentation: channelType\n\n\n\n\n\n\n\nNote\n\n\n\nWe recommend using the \"post-message\" channel when GitHub Pages or Quarto Pub serve the webR-enabled document. Note that this option prevents the interruption of running R code and the use of nested R REPLs (readline(), menu(), browser(), etc.). For more details, please see Communication Channels\n\n\n\n\nservice-worker-url\n\nDescription: Set the base URL for loading JavaScript worker scripts when using the ServiceWorker communication channel mode.\nDefault Value: ''\nDocumentation: serviceWorkerUrl"
  },
  {
    "objectID": "qwebr-meta-options.html#native-extension-options",
    "href": "qwebr-meta-options.html#native-extension-options",
    "title": "Customization Options",
    "section": "Native Extension Options",
    "text": "Native Extension Options\nThe extension also provides native options that affect its behavior:\n\nshow-startup-message\n\nDescription: Controls the display of the WebR initialization state in the document header.\nDefault Value: true\n\n\n\nshow-header-message\n\nDescription: Determines whether COOP and COEP headers are in use for faster page loads.\nDefault Value: false\n\n\n\npackages\n\nDescription: Specifies R packages to install automatically when the document opens.\nDefault Value: []"
  },
  {
    "objectID": "examples/html-document/index.html",
    "href": "examples/html-document/index.html",
    "title": "Quarto Webr Demo HTML Document",
    "section": "",
    "text": "Welcome\nWelcome to a demo HTML Document that uses quarto-webr to generate interactive code cells using Quarto.\nüü° Loading\n  webR..."
  },
  {
    "objectID": "examples/book/index.html",
    "href": "examples/book/index.html",
    "title": "Quarto Webr Demo Book",
    "section": "",
    "text": "Welcome\nWelcome to a demo Book that uses quarto-webr to generate interactive code cells using Quarto.\nprint(\"Hello there! Welcome to a quarto-webR powered book!\")"
  },
  {
    "objectID": "examples/website/index.html",
    "href": "examples/website/index.html",
    "title": "Quarto Webr Demo Website",
    "section": "",
    "text": "Welcome\nWelcome to a demo website that uses quarto-webr to generate interactive code cells using Quarto.\nprint(\"Hello there! Welcome to a quarto-webR powered website!\")"
  },
  {
    "objectID": "qwebr-using-r-packages.html",
    "href": "qwebr-using-r-packages.html",
    "title": "Using R Packages",
    "section": "",
    "text": "Whether you need specialized statistical analysis, advanced visualization, or any other R-based functionality, you can harness the rich ecosystem of R packages directly within your documents. By default, quarto-webr avoids loading additional packages. However, you have two ways to incorporate packages into your document: one where packages are installed when the document opens, and the other where packages are installed interactively within specific code cells.\n\nAvailable R Packages\nBefore you use any R package with webR, it‚Äôs essential to check if it‚Äôs available. You can explore the available packages by executing the following R code, either with webR or just R:\nüü° Loading\n  webR...\n\n\n  \n\n\nAlternatively, you can navigate to the WebR repository here for package listings.\n\n\nInstall R Packages on Document Open\nTo automatically install packages when the document opens, add the packages key under webr in the YAML header, listing the packages in an array:\n---\nwebr:\n  packages: ['ggplot2', 'dplyr']\n---\nBy using this approach, you ensure that necessary packages are available right from the start when readers access your document. Moreover, the webR code cells do not become active until the packages are installed. This can be especially helpful when working with packages in multiple cells.\n\n\nInstalling an R Package Interactively\nIf you need to install a package interactively within specific code cells, you can do so using the webr::install() function. This method allows you to install packages on-the-fly when needed.\n\n\n\n\n\n\nNote\n\n\n\nPlease note that not all R packages are immediately available for use with webR due to the presence of compiled code routines. The installation process might also take some time depending on the communication channel being used.\n\n\nLet‚Äôs take ggplot2 as an example:\nüü° Loading\n  webR...\n\n\n  \n\n\nUsing this approach, you can install packages on a per-code cell basis, which can be more efficient when you only need specific packages for certain parts of your document."
  },
  {
    "objectID": "qwebr-community-examples.html",
    "href": "qwebr-community-examples.html",
    "title": "Community Examples",
    "section": "",
    "text": "Welcome to the Community Examples page for the quarto-webr extension. This section celebrates the diverse and innovative ways that members of our community are harnessing the power of the quarto-webr extension. These examples showcase real-world use cases, highlighting the extension‚Äôs adaptability and functionality across various fields. You may also find references to examples from the main webR project here as well.\nExplore the projects, applications, educational materials, and more created by fellow users. Gain inspiration from the community‚Äôs contributions and discover how you can leverage the full potential of quarto-webr in your own work. Whether your interests lie in data analysis, interactive reports, or educational resources, you‚Äôll find valuable insights and ideas within the community‚Äôs projects.\nDo you have your own project or example that incorporates quarto-webr? We invite you to contribute to this growing collection of community-driven projects by submitting a pull request or creating an issue. Your experiences and creativity can inspire others and promote collaboration within our community. Together, we can continue to expand the possibilities of quarto-webr.\n\nVideos\n\nquarto-webr: Your first webR-powered Quarto Document (RStudio)\nEli E. Holmes‚Äô coverage of webR + Quarto on her EEHolmes-DataScience YouTube channel\n\nDemo of webR quarto extension along with Codespaces on Mar 14, 2023 and her test repository\nWebR + Quarto Demo: Running R right in the browser! on Mar 10, 2023 (Note: This uses an earlier Proof of Concept document. Not the quarto extension!)\n\n\n\n\nTeaching Workshops\n\nMine √áetinkaya-Rundel‚Äôs Teaching Data Science Masterclass: Organizing, publishing, and sharing of course materials. Sept 18, 2023 @ posit::conf(2023)\n\nEx 1.1: UN Votes, Page Source\nFull workshop materials at source repository and deployed website example‚Äôs source repository\n\n\n\n\nTalks\n\nGeorge Stagg‚Äôs talk on the Magic with WebAssembly and webR mentioning quarto-webr as an easy onboarding option. Sep 20, 2023 @ posit::conf(2023)\nJames Balamuta‚Äôs talk on Dynamic Interactions:Empowering Educators and Researchers with Interactive Quarto Documents Using webR. Sep 19, 2023 @ posit::conf(2023)\nGeorge Stagg‚Äôs talk on the Introduction to webR mentioning quarto-webr as an easy onboarding option. Sep 18, 2023 @ posit::conf(2023)\nNicola Rennie‚Äôs talk on Teaching statistics interactively with webR. @ RSS International Conference 2023\n\nSlides and Source code\n\nbob Rudis‚Äô talk on üï∏Ô∏è Into the WebR-Verse incorporating a demo of the quarto-webr extension. Jul 13th, 2023 @ New York R Conference 2023\n\nVideo and Source code\nboB used a cool trick to embed the demo in his revealjs slides.\n\nMaria Tackett‚Äôs talk on Using Quarto for Making and Organizing Teaching Materials during the Teaching (with) Quarto Session. Aug 7, 2023 @ JSM 2023\n\nSlides and Source code\nWebR Demo on Quarto Pub\n\n\n\n\nTextbooks\n\nDaniel E. Weeks‚Äôs incorporated webR exercises into various parts of the HuGen2071. Fall 2023.\n\nBook source\n\n\n\n\nNotebooks\n\nGeorge Stagg‚Äôs notebook example showing tidymodels workflow using webR\n\ntidymodels starter article without webR Preprocess your data with recipes\n\n\n\n\nSocial media posts\n\nLinh Nguyen‚Äôs post on LinkedIn and Twitter describing how she used knowledge at posit::conf(2023) to convert existing R notes to use the quarto-webr extension. Sept 22, 2023\nJoe Chelladurai mentioning a similiar integration on mastodon for his newly developed The School of Data. Jul 11th, 2023\nNicola Rennie‚Äôs tweet showing live coding with webR. May 5th, 2023\nbob Rudis‚Äô kind praise of the extension. Apr 2nd, 2023\n\n\n\nBlog posts\n\nJavier Orraca-Deatcu‚Äôs post titled webR via Quarto Extensions. Aug 23rd, 2023.\nGeorge Stagg‚Äôs mention of the extension in his webR 0.2.0 announcement. Aug 8th, 2023.\nEthan White‚Äôs use to create a portal for Tidy Tuesday. May 2nd, 2023\nMatt Dray‚Äôs post on Playgrounds with WebR and Quarto. Mar 16th, 2023\n\nA Parsing Playground for R Code on Netlify and the repository powering it.\n\nEthan White‚Äôs post on Playgrounds with WebR and Quarto. Mar 13th, 2023.\n\nA Parsing Playground for R Code on Netlify and the repository powering it.\n\n\n\n\nPress\n\nR Weekly podcast included a reference to the Proof of Concept document/extension during episode 115, which was dedicated to the webR 0.1.0 announcement.\n\nR weekly 115 (2023-W11)"
  },
  {
    "objectID": "qwebr-acknowledgements.html",
    "href": "qwebr-acknowledgements.html",
    "title": "Acknowledgments and Collaborations",
    "section": "",
    "text": "We would like to express our heartfelt gratitude to several individuals and teams who played a pivotal role in bringing quarto-webR to life as an extension for Quarto. Without their dedication and contributions, this project would not have been possible."
  },
  {
    "objectID": "qwebr-acknowledgements.html#quarto-webr-extension-core-developers",
    "href": "qwebr-acknowledgements.html#quarto-webr-extension-core-developers",
    "title": "Acknowledgments and Collaborations",
    "section": "quarto-webr Extension Core Developers",
    "text": "quarto-webr Extension Core Developers\n\nJames Joseph Balamuta\nJooYoung Seo for accessibility improvements.\n\nTheir relentless dedication have played a pivotal role in shaping the development of this extension."
  },
  {
    "objectID": "qwebr-acknowledgements.html#webr-core-developers",
    "href": "qwebr-acknowledgements.html#webr-core-developers",
    "title": "Acknowledgments and Collaborations",
    "section": "webR Core Developers",
    "text": "webR Core Developers\n\nGeorge Stagg\nLionel Henry\n\nTheir tireless efforts and expertise in developing webR were instrumental in the development of this extension, and we are immensely grateful for their contributions."
  },
  {
    "objectID": "qwebr-acknowledgements.html#early-testing-feedback",
    "href": "qwebr-acknowledgements.html#early-testing-feedback",
    "title": "Acknowledgments and Collaborations",
    "section": "Early Testing Feedback",
    "text": "Early Testing Feedback\nWe extend our sincere appreciation to the following individuals for providing early testing feedback on the extension:\n\nEli E. Holmes\nBob Rudis\n\nTheir insightful feedback and suggestions have been invaluable in refining and enhancing the functionality of the extension."
  },
  {
    "objectID": "qwebr-acknowledgements.html#quarto-team-assistance",
    "href": "qwebr-acknowledgements.html#quarto-team-assistance",
    "title": "Acknowledgments and Collaborations",
    "section": "Quarto Team Assistance",
    "text": "Quarto Team Assistance\nWe would like to acknowledge the Quarto team for their assistance in setting up a new code cell type, which greatly improved the overall functionality of the extension. You can view the discussion here."
  },
  {
    "objectID": "qwebr-acknowledgements.html#inspirations",
    "href": "qwebr-acknowledgements.html#inspirations",
    "title": "Acknowledgments and Collaborations",
    "section": "Inspirations",
    "text": "Inspirations\nOur project built upon the initial proof of concept for a standalone Quarto HTML document, made possible by the work of the coatless-r-n-d/webR-quarto-demos repository.\nAdditionally, we were inspired by the following public-facing examples from the webR Core developers:\n\nSource of Tidyverse Blog Post and Minor fix\nwebR documentation landing page (Live page)"
  }
]