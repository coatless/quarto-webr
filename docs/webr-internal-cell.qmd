---
title: "Hiding and Executing Code"
subtitle: "Perform Stealthy Computations with webR"
author: "James Joseph Balamuta with contributions from [Adam Loy](https://aloy.rbind.io/)"
date: "09-14-2023"
date-modified: last-modified
format: 
  html:
    toc: true
engine: knitr
webr:
  channel-type: "post-message"
filters:
- webr
---

## Hidden Code Execution

In `quarto-webr`, you have the ability to execute code cells without displaying the code or its output. This feature can be particularly useful for preloading variables, loading datasets, or checking student solutions without revealing the code to end users. Unfortunately, this feature is native 

### Hidden Evaluation without Output

You can create a hidden setup code cell within the document by using the special comment `#| context: setup`. The code in this cell executes in the background without displaying the code or its output.

```{{webr-r}}
#| context: setup
meaning_of_life = 42
```

In the above example, we've pre-loaded the `meaning_of_life` variable. If we run the next code cell, you will see the value of `meaning_of_life` displayed as `42`.

```{webr-r}
#| context: setup
meaning_of_life = 42
```

```{webr-r}
meaning_of_life
```

::: {.callout-caution}
Please note that the contents of the hidden code cell can be viewed if the web page's source code is inspected.
:::

### Hidden Loading of a Dataset

You can use the setup hidden code cell to pre-load and manipulate an entire dataset. This allows users to directly interact with the loaded data.

```{webr-r}
#| context: hidden

# Download a dataset
download.file(
  'https://raw.githubusercontent.com/coatless/raw-data/main/penguins.csv',
  'penguins.csv'
)

# Read the data
df = read.csv("penguins.csv")
```

```{webr-r}
#| context: setup

# Download a dataset
download.file(
  'https://raw.githubusercontent.com/coatless/raw-data/main/penguins.csv',
  'penguins.csv'
)

# Read the data
df = read.csv("penguins.csv")
```

```{webr-r}
# Display the head of the data
head(df)
```

::: {.callout-note}
If the setup code relies on specific R packages, we recommend specifying the required packages in the document's YAML. This approach informs users that the webpage is not yet ready and communicates a clear status update at the top. For example:

```yaml
---
webr:
  packages: ['ggplot2', 'dplyr']
---
```
:::

### Hidden Solution Checking of Student Work

:::{.callout-warning}
Please be aware that any solution written in a webR hidden code cell can be obtained by viewing the document's HTML source code. It is not recommended for formal assessments such as exams, quizzes, or homework.
:::

In webR, you can check student answers by providing an answer key and a comparison function within the document.

For instance, you can create a solution data frame like this:

```{webr-r}
#| context: setup
answer_frame <- data.frame(
  problem = c("1a", "1b", "2"),
  answer = c(10, 2, 3/16),
  tol = c(0.001, 0, 1/32)
)
```

Next, define an internal check function:

```{webr-r}
#| context: setup
check <- function(problem, answer) {
  aframe <- answer_frame
  if(!problem %in% aframe$problem) stop(paste0("Please enter a valid problem. (", paste0(aframe$problem, collapse = ","), ")"))

  solution <- aframe[which(aframe$problem == problem), "answer"]

  ifelse(
    all.equal(answer, solution, tolerance = 0.001) == TRUE,
    "Correct! Well done.",
    "Incorrect! Good attempt. Let's try again?"
  )
}
```

Students can then compare their answers to the answer key using the `check()` function.

For example, consider the question: 

> What is 9 + 1?

```{webr-r}
student_solution = 11

check(problem = "1a", answer = student_solution)
```

With hidden code execution and solution checking, webR provides a powerful tool for creating interactive and educational content within your Quarto HTML documents.