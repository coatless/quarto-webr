---
title: "Exploring Interactive Code Cells"
subtitle: "Unleash the Power of Interactive R Code in Your Quarto Documents"
author: "James Joseph Balamuta"
date: "03-14-2023"
date-modified: last-modified
format: 
  html:
    toc: true
engine: knitr
filters:
- webr
aliases:
  - webr-code-cell-demos.html
---

Welcome to the world of interactive code cells, unlocked by the community `quarto-webr` extension. These cells allow you to run R code directly within your Quarto HTML documents, enabling real-time computations, dynamic visualizations, and more. Let's explore the impressive capabilities webR offers.

# Creating webR-Enabled Code Cells

To create a webR-enabled code cell, simply use the `{webr-r}` tag in your Quarto HTML document, like this:

```{webr-r}
1 + 1
```

For example, the code cell above, powered by `webr`, was generated by entering the following into the Quarto document:

```{{webr-r}}
1 + 1
```

# Sample Use Cases

Now, let's delve into some practical scenarios where interactive code cells shine.

## Fit a Linear Regression Model

We begin by using the "Hello World" example of statistics: fitting and analyzing a linear regression.

```{webr-r}
fit <- lm(mpg ~ vs, data = mtcars)

summary(fit)
```

## Line-by-line Execution

In this section, we'll explore the built-in keyboard shortcuts for executing code within the interactive code cell. You can run either the selected code or specific lines or the entire cell with the following keyboard shortcuts:

- Run selected code:
  - macOS: <kbd>⌘</kbd> + <kbd>↩/Return</kbd>
  - Windows/Linux: <kbd>Ctrl</kbd> + <kbd>↩/Enter</kbd>

- To run the entire code cell, you can simply click the "Run code" button, or use the keyboard shortcut:
  - <kbd>Shift</kbd> + <kbd>↩</kbd>

Feel free to try it out in the following code cell:

```{webr-r}
# Try running selected code at the start of the line
print("Hello quarto-webr World!")

# Try highlight only -3 or 5 and pressing the keys required
# for the "selected code" approach
-3 + 5

# Finally, try running the entire code cell by using Shift + ↩
```

By using these shortcuts, you can run code conveniently and efficiently. This practice can also help you become familiar with keyboard shortcuts when transitioning to integrated development environments (IDEs) like [RStudio](https://posit.co/products/open-source/rstudio/) or [Visual Studio Code with R](https://code.visualstudio.com/docs/languages/r).


## Preventing Modifications to Code

Code cells can be locked to their initial state by specifying `#| read-only: true`. The next code cell has such a feature implemented. Try modifying the expression `1 + 1` to any other value.

::: {.panel-tabset}
## `{quarto-webr}` Output

```{webr-r}
#| read-only: true
1 + 1
```

## Cell code

```{{webr-r}}
#| read-only: true
1 + 1
```
:::

:::{.callout-note}
This option can be paired with `autorun: true` to avoid having the user press the "Run code" button to see the output.
:::


## Drawing Attention to Code

Lines of code can be highlighted using `editor-code-line-numbers` to draw attention to specific parts of the code. For example:

- `editor-code-line-numbers: 1-3` will highlight lines 1 to 3.
- `editor-code-line-numbers: 1,3,6` will highlight lines 1, 3, and 6.
- `editor-code-line-numbers: 1,3-5,7` will highlight lines 1, 3 to 5, and 7.

We can see the `1,3-5,7` example in the following code cell:

::: {.panel-tabset}
## `{quarto-webr}` Output

```{webr-r}
#| read-only: true
#| editor-code-line-numbers: 1,3-5,7

# This is a comment

1 + 1
2 + 2
3 + 3

# This is another comment
```

## Cell code

```{{webr-r}}
#| read-only: true
#| editor-code-line-numbers: 1,3-5,7

# This is a comment

1 + 1
2 + 2
3 + 3

# This is another comment
```
:::


## Create a Graph with Base R

For this example, webR empowers us to create and visualize data plots interactively. We can tweak labels, colors, or even the variables being used on an as-needed basis to explore "What if ..." scenarios. For instance, what if we try changing the value `blue` to `orange` and run the code again.

```{webr-r}
plot(
  mpg ~ wt,
  data = mtcars,
  col = "blue", 
  xlab = "Miles/(US) gallon",
  ylab = "Weight (1000 lbs)",
  main = "Miles per Gallon and Weight of Cars",
  sub = "Source: 1974 Motor Trend US magazine."
)
```



## Fill in the Blanks

Another approach is to purposely leave out part of a command during an exercise to afford students structure in solving it. For example, we could have the question of:

> Fill in the blank to have the following expression add up to **42**.

```{webr-r}
35 + ________
```

## Data Wrangle in Real Time

Data manipulation is a crucial part of data analysis. In this example, we'll modify a data set in real-time and view the results. It's like changing ingredients while cooking to get the perfect dish!

```{webr-r}
# Create a copy of the data
mtcars2 <- mtcars

# Change variable to a factor
mtcars2$vs <- factor(mtcars2$vs, labels = c("V", "S"))

modified_vs_data = data.frame(
  "original_vs" = mtcars$vs,
  "modified_vs" = mtcars2$vs
)

head(modified_vs_data)
```


## Working with R Packages

You can incorporate R packages available in webR by installing them interactively using `webr::install()` within a `{webr-r}` code cell or by specifying them in the document's YAML. Once you've installed a package, you can harness its power just as you would in a traditional R environment. For more details, please refer to [Using R Packages](qwebr-using-r-packages.qmd).

:::callout-note
Please note that installing certain packages, such as `ggplot2`, may take some time depending on the [communication channel](qwebr-communication-channels.qmd) being used.
:::

Let's take `ggplot2` as an example:

```{webr-r}
webr::install("ggplot2")
```

With `ggplot2` now installed, let's create a graph with it!

```{webr-r}
library(ggplot2)

p <- ggplot(mpg, aes(class, hwy))
p + geom_boxplot()
```

## Variable Definitions and Reuse

Define variables in one code cell and reuse them in subsequent cells:

```{webr-r}
name <- "James"
age <- 42
```

```{webr-r}
message(name, " is ", age, " years old!")
```

## Functions

Functions can similarly be defined and used in one code cell or multiple code cells.

```{webr-r}
say_hello = function(name) {
  msg = paste0("Hello ", name, "! Welcome to webR :)")
  return(msg)
}

say_hello("James")
```

```{webr-r}
say_hello("Hulya")
```

:::callout-note

The function definition must be run before calling the function. Otherwise, there will be an error that is generated.
:::

## Handling Errors and Warnings

When webR encounters an error while running R code, the error and warning messages are displayed to the user.

For example, if the routine has a hard stop, the execution immediately ends, and the message is shared.

```{webr-r}
stop("This is a hard error")
```

Similarly, if a variable is not found, then the code stops being evaluated and returns an error.
```{webr-r}
variable_not_defined
```

Unlike errors, warning messages are allowed to propagate into the output without stopping the computation.

```{webr-r}
warning("Uh-oh, there's a warning!")

# Compute a value
1 + 1
```

This is even the case inside of complex functions. 

```{webr-r}
quadratic_roots <- function(a, b, c) {

  cat(paste0("Analyzing the quadratic equation: ", a, "x^2 + ", b, "x + ", c, "."))

  discriminant <- (b^2) - (4*a*c)

  # Check if there are 2 solutions
  if(discriminant != 0) {

    # Are the solutions imaginary?
    if(discriminant < 0) {
      warning("There are no real-numbered roots for this quadratic equation.")
      discriminant <- as.complex(discriminant)
    }
    
    # Compute the solutions
    x_intercepts <- (-b + c(-1, 1) * sqrt(discriminant)) / (2*a)

    return(x_intercepts)
  } 

  # When the discriminant is 0, compute a single solution.
  x_intercept <- (-b) / (2*a)

  return(x_intercept)
}

quadratic_roots(1, 3, 7)
```

## Escaping Characters in a String

Handle special characters in strings with ease:

```{webr-r}
seven_seas <- "Ahoy, matey!\nLet's set sail for adventure!\n"
seven_seas
```

## Anonymous Function Definition

Define and use anonymous functions seamlessly:

```{webr-r}
add_one <- \(x) x + 1
add_one(2)
```

## Empty Code Cell

Define an empty code cell by simply leaving it blank.

```{webr-r}

```

## Pre-rendered Code Cell

Any code using the usual `{r}` tag will be executed, and its output saved, just as if you were rendering a Quarto document without the webR extension:

```{r}
message("Hello!")
```

# Fin

These are just some of the powerful features and capabilities that webR brings to your Quarto HTML documents, making your data analysis and presentation more dynamic and engaging. Have an interesting example to share? Let us know [at our issue tracker](https://github.com/coatless/quarto-webr/issues)!
