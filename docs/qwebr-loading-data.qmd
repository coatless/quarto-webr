---
title: "Accessing and Using Data in webR"
subtitle: "Possible avenues for Data Retrieval"
author: "James Joseph Balamuta"
date: "01-14-2024"
date-modified: last-modified
format: 
  html:
    toc: true
engine: knitr
filters:
- webr
---

# Overview

When working with data in [webR](https://docs.r-wasm.org/webr/latest/), there are some tricks to using data in the web environment. This documentation entry guides you through a few changes related to accessing data.

## Accessing Data through R Data Packages

One approach to accessing data is to store the data inside of an [R data package](https://thecoatlessprofessor.com/programming/r/creating-an-r-data-package/). This kind of R package consists solely of data in an R ready format with the added benefit of help documentation. If the data package is on CRAN, chances are there is a version available for webR on the [main repository (warning not a mobile data friendly link)](https://repo.r-wasm.org/) and, thus, can be accessed using `install.packages("pkg")` or added to the documents `packages` key. Otherwise, the R package will need to be converted, deployed, and accessed through GitHub Pages by following the advice to [setup a custom package repository](qwebr-using-r-packages.qmd#custom-repositories).

## Retrieving Data from the Web

::: {.callout-note}
Before proceeding, take note of the following considerations when working with remote data: 

1. **Security Protocol:** webR necessitates data retrieval via the [HyperText Transfer Protocol Secure (HTTPS)](https://developer.mozilla.org/en-US/docs/Glossary/HTTPS) protocol to ensure secure connections and the [Cross-Origin Resource Sharing (CORS)](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) being enabled.
2. **Package Compatibility:** In the absence of websockets within webR, packages reliant on `{curl}` methods may require adaptation or alternative solutions.
:::

When retrieving data in webR, it is imperative to always use links that use [HyperText Transfer Protocol Secure (HTTPS)](https://developer.mozilla.org/en-US/docs/Glossary/HTTPS). From there, the data at the HTTPS URL can be downloaded using the `download.file()` function and subsequently reading it into R utilizing a relative path. Follow this example:

```r
url <- "https://example.com/data.csv"
download.file(url, "data.csv")
```

This action saves the file into webR's virtual file system to be read into R's analysis environment. Replace `"https://example.com/data.csv"` with the actual URL of your desired data source.

### Base R 

For optimized performance, leverage base R's `read.*()` functions, as they do not necessitate additional package dependencies. 

```r
data <- read.csv("data.csv")
```

### Tidyverse

Alternatively, you can use `tidyverse`-based functions like `readr::read_*()`.

:::{.callout-note}
Note that employing `tidyverse` or `readr` functions entails additional package downloads at the session's outset or immediately preceeding the function usage.
:::

```r
install.packages("readr")
data <- readr::read_csv("data.csv")
```
